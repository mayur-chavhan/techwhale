{
    "version": "https://jsonfeed.org/version/1",
    "title": "TechWhale",
    "description": "",
    "home_page_url": "https://techwhale.in",
    "feed_url": "https://techwhale.in/feed.json",
    "user_comment": "",
    "icon": "https://techwhale.in/media/website/imageedit_19_3669952192.png",
    "author": {
        "name": "Mayur Chavhan"
    },
    "items": [
        {
            "id": "https://techwhale.in/upgrade-old-version-of-nginx-on-ubuntu-2204/",
            "url": "https://techwhale.in/upgrade-old-version-of-nginx-on-ubuntu-2204/",
            "title": "How to upgrade old version of Nginx on Ubuntu 22.04",
            "summary": "Nginx is a powerful web server, load balancer, and reverse proxy that is used by some of the most popular websites in the world. It can help improve the performance and security of your web applications, and this guide will show you how to install&hellip;",
            "content_html": "<p>Nginx is a powerful web server, load balancer, and reverse proxy that is used by some of the most popular websites in the world. It can help improve the performance and security of your web applications, and this guide will show you how to install the latest version of Nginx on Ubuntu 22.04.</p>\n<p>To install Nginx, you need to follow these steps:</p>\n<ol>\n<li>Log in as root\nTo proceed with the installation of Nginx, you need to be logged in as root. If you are not already logged in as root, you can switch to the root user using the following command:</li>\n</ol>\n<pre><code>$ sudo -i\n</code></pre>\n<ol>\n<li>Update package list\nThe next step is to update the package list using the following command:</li>\n</ol>\n<pre><code># apt update\n</code></pre>\n<ol>\n<li>Install required packages\nInstall the required packages to your system using the following command:</li>\n</ol>\n<pre><code># apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring -y\n</code></pre>\n<ol>\n<li>Import the Nginx signing key\nImport the Nginx signing key using the following command:</li>\n</ol>\n<pre><code># wget -O- &lt;https://nginx.org/keys/nginx_signing.key&gt; | gpg --dearmor \\\\\n    | tee /etc/apt/trusted.gpg.d/nginx.gpg &gt; /dev/null\n</code></pre>\n<ol>\n<li>Verify the key\nVerify that the downloaded file contains the proper key using the following command:</li>\n</ol>\n<pre><code># gpg --dry-run --quiet --import --import-options import-show /etc/apt/trusted.gpg.d/nginx.gpg\n</code></pre>\n<ol>\n<li>Set up the apt repository\nSet up the apt repository for stable Nginx packages using the following command:</li>\n</ol>\n<pre><code># echo &quot;deb &lt;http://nginx.org/packages/ubuntu&gt; `lsb_release -cs` nginx&quot; \\\\\n    | tee /etc/apt/sources.list.d/nginx.list\n</code></pre>\n<ol>\n<li>Update repository information\nUpdate the repository information using the following command:</li>\n</ol>\n<pre><code># apt update\n</code></pre>\n<ol>\n<li>Remove existing Nginx installations\nRemove all existing Nginx installations using the following command. (This step can be skipped on new systems.)</li>\n</ol>\n<pre><code># apt purge nginx nginx-common nginx-full nginx-core\n</code></pre>\n<ol>\n<li>Install Nginx\nInstall Nginx using the following command:</li>\n</ol>\n<pre><code># apt install nginx\n</code></pre>\n<ol>\n<li>Verify the installation\nVerify the installation and Nginx version using the following command:</li>\n</ol>\n<pre><code># nginx -v\n</code></pre>\n<ol>\n<li>Enable the Nginx service\nEnable the Nginx service using the following command:</li>\n</ol>\n<pre><code># systemctl enable nginx\n</code></pre>\n<ol>\n<li>Start Nginx\nStart Nginx using the following command:</li>\n</ol>\n<pre><code># systemctl start nginx\n</code></pre>\n<ol>\n<li>Modify the default configuration\nThe default configuration when installing Nginx through the Nginx repository differs from the default configuration when installing Nginx through the Ubuntu repository. We will modify a few things to achieve this. First, create additional directories using the following command:</li>\n</ol>\n<pre><code># mkdir /etc/nginx/{modules-available,modules-enabled,sites-available,sites-enabled,snippets}\n</code></pre>\n<ol>\n<li>Edit the nginx.conf file\nEdit the nginx.conf file using the following command:</li>\n</ol>\n<pre><code># cat &gt; /etc/nginx/nginx.conf &lt;&lt;EOF\nuser  www-data;\nworker_processes  auto;\npid        /var/run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n\n    server_tokens off;\n\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    access_log  /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n</code></pre>\n<ol>\n<li>Check the configuration\nCheck the configuration using the following command:</li>\n</ol>\n<pre><code># nginx -t\n</code></pre>\n<ol>\n<li>Restart Nginx\nRestart Nginx using the following command:</li>\n</ol>\n<pre><code># systemctl restart nginx\n</code></pre>\n<ol>\n<li>Test Nginx\nTest if Nginx is responding using the curl command:</li>\n</ol>\n<pre><code># curl localhost\n</code></pre>\n<p>It is important to note that this tutorial assumes you are using Ubuntu 22.04. If you are using a different version of Ubuntu or a different operating system, the commands may be different. Also, make sure you have appropriate permissions before running commands.</p>\n",
            "image": "https://techwhale.in/media/posts/44/ScreenShot-20230726-173736.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Tutorials",
                   "Nginx"
            ],
            "date_published": "2023-07-26T17:16:43+05:30",
            "date_modified": "2023-07-26T17:38:07+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-automate-initial-server-setup-of-multiple-ubuntu-2204-servers-using-ansible/",
            "url": "https://techwhale.in/how-to-automate-initial-server-setup-of-multiple-ubuntu-2204-servers-using-ansible/",
            "title": "How To Automate Initial Server Setup of Multiple Ubuntu 22.04 Servers Using Ansible",
            "summary": "Automation is a key aspect of modern infrastructure management. It allows you to quickly and easily perform repetitive tasks across multiple servers with minimal human intervention. Ansible is a popular automation tool that enables you to automate the initial server setup of multiple Ubuntu 22.04&hellip;",
            "content_html": "<p>Automation is a key aspect of modern infrastructure management. It allows you to quickly and easily perform repetitive tasks across multiple servers with minimal human intervention. Ansible is a popular automation tool that enables you to automate the initial server setup of multiple Ubuntu 22.04 servers with ease.</p>\n<p>In this guide, we will walk you through the steps to automate the initial server setup of multiple Ubuntu 22.04 servers using Ansible. We will cover the installation of Ansible, creating an inventory file, configuring SSH access, setting up sudo access, and installing some common packages.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Before we begin, you will need the following:</p>\n<ul>\n<li>Multiple Ubuntu 22.04 servers.</li>\n<li>A user account with sudo privileges on each server.</li>\n<li>Ansible installed on your local machine.</li>\n</ul>\n<h2 id=\"step-1-installing-ansible\">Step 1: Installing Ansible</h2>\n<p>Ansible is not installed by default on Ubuntu 22.04. To install Ansible on your local machine, follow these steps:</p>\n<ol>\n<li>Open a terminal window on your local machine.</li>\n<li>Update the package lists and install Ansible with the following command:</li>\n</ol>\n<pre><code>sudo apt update\nsudo apt install ansible\n</code></pre>\n<ol>\n<li>Verify that Ansible is installed by running the following command:</li>\n</ol>\n<pre><code>ansible --version\n</code></pre>\n<p>You should see the version of Ansible that you installed.</p>\n<h2 id=\"step-2-creating-an-inventory-file\">Step 2: Creating an Inventory File</h2>\n<p>The inventory file is a list of all the servers that Ansible should manage. This file is written in INI format and can be located anywhere on your local machine. To create an inventory file, follow these steps:</p>\n<ol>\n<li>Open a terminal window on your local machine.</li>\n<li>Create a new text file with the following command:</li>\n</ol>\n<pre><code>nano inventory.ini\n</code></pre>\n<ol>\n<li>Add the IP addresses or hostnames of each server to the file, one per line:</li>\n</ol>\n<pre><code>[webserver]\n192.168.1.101\n192.168.1.102\n\n[database]\n192.168.1.103\n192.168.1.104\n</code></pre>\n<p>In this example, we have two groups of servers: webserver and database. The IP addresses of the servers in each group are listed below the group name.</p>\n<ol>\n<li>Save and close the file.</li>\n</ol>\n<h2 id=\"step-3-configuring-ssh-access\">Step 3: Configuring SSH Access</h2>\n<p>In order for Ansible to manage your servers, it needs to be able to connect to them using SSH. To configure SSH access, follow these steps:</p>\n<ol>\n<li>Generate an SSH key pair on your local machine with the following command:</li>\n</ol>\n<pre><code>ssh-keygen\n</code></pre>\n<ol>\n<li>Copy the public key to each server with the following command:</li>\n</ol>\n<pre><code>ssh-copy-id username@server_ip_address\n</code></pre>\n<ol>\n<li>Test that you can connect to each server with the following command:</li>\n</ol>\n<pre><code>ssh username@server_ip_address\n</code></pre>\n<h2 id=\"step-4-setting-up-sudo-access\">Step 4: Setting Up Sudo Access</h2>\n<p>In order to perform certain tasks, such as installing packages, Ansible needs to be able to run commands with sudo privileges. To set up sudo access, follow these steps:</p>\n<ol>\n<li>Open a terminal window on each server.</li>\n<li>Add your user account to the sudo group with the following command:</li>\n</ol>\n<pre><code>sudo usermod -aG sudo username\n</code></pre>\n<ol>\n<li>Test that your user account has sudo access with the following command:</li>\n</ol>\n<pre><code>sudo whoami\n</code></pre>\n<p>You should see “root” as the output.</p>\n<h2 id=\"step-5-installing-common-packages\">Step 5: Installing Common Packages</h2>\n<p>Now that Ansible is set up and configured to manage your servers, we can install some common packages. To do this, we will create a playbook.</p>\n<ol>\n<li>Create a new text file with the following command:</li>\n</ol>\n<pre><code>nano playbook.yml\n</code></pre>\n<ol>\n<li>Add the following code to the file:</li>\n</ol>\n<pre><code>---\n- name: Install common packages\n  hosts: all\n  become: true\n  tasks:\n    - name: Update package lists\n      apt:\n        update_cache: yes\n\n    - name: Install packages\n      apt:\n        name:\n          - nano\n          - git\n          - curl\n          - wget\n</code></pre>\n<p>This playbook will update the package lists and install the Nano, Git, Curl, and Wget packages on all servers in the inventory file.</p>\n<ol>\n<li>Save and close the file.</li>\n<li>Run the playbook with the following command:</li>\n</ol>\n<pre><code>ansible-playbook -i inventory.ini playbook.yml\n</code></pre>\n<p>Ansible will connect to each server, update the package lists, and install the specified packages.</p>\n<h2 id=\"step-6-creating-a-custom-user\">Step 6: Creating a Custom User</h2>\n<p>By default, Ubuntu 22.04 comes with a user named “ubuntu”. It is recommended that you create a custom user with a unique username and password for security reasons. To create a new user, follow these steps:</p>\n<ol>\n<li>Open a terminal window on each server.</li>\n<li>Create a new user with the following command, replacing “newuser” with your desired username:</li>\n</ol>\n<pre><code>sudo adduser newuser\n</code></pre>\n<ol>\n<li>Set a password for the new user when prompted.</li>\n<li>Add the new user to the sudo group with the following command:</li>\n</ol>\n<pre><code>sudo usermod -aG sudo newuser\n</code></pre>\n<ol>\n<li>Test that the new user has sudo access with the following command:</li>\n</ol>\n<pre><code>sudo whoami\n</code></pre>\n<p>You should see “root” as the output.</p>\n<h2 id=\"step-7-configuring-firewall\">Step 7: Configuring Firewall</h2>\n<p>A firewall is an essential security tool that prevents unauthorized access to your servers. Ubuntu 22.04 comes with UFW (Uncomplicated Firewall) pre-installed. To configure UFW, follow these steps:</p>\n<ol>\n<li>Open a terminal window on each server.</li>\n<li>Enable UFW with the following command:</li>\n</ol>\n<pre><code>sudo ufw enable\n</code></pre>\n<ol>\n<li>Allow SSH access with the following command:</li>\n</ol>\n<pre><code>sudo ufw allow ssh\n</code></pre>\n<ol>\n<li>Allow HTTP and HTTPS access (if applicable) with the following command:</li>\n</ol>\n<pre><code>sudo ufw allow http\nsudo ufw allow https\n</code></pre>\n<ol>\n<li>Verify that the firewall is configured correctly with the following command:</li>\n</ol>\n<pre><code>sudo ufw status verbose\n</code></pre>\n<p>You should see the rules that you just configured listed.</p>\n<h2 id=\"step-8-configuring-timezone\">Step 8: Configuring Timezone</h2>\n<p>By default, Ubuntu 22.04 is set to the UTC timezone. To change the timezone, follow these steps:</p>\n<ol>\n<li>Open a terminal window on each server.</li>\n<li>List the available time zones with the following command:</li>\n</ol>\n<pre><code>timedatectl list-timezones\n</code></pre>\n<ol>\n<li>Set the timezone to your desired timezone with the following command, replacing “America/New_York” with your desired timezone:</li>\n</ol>\n<pre><code>sudo timedatectl set-timezone America/New_York\n</code></pre>\n<ol>\n<li>Verify that the timezone is set correctly with the following command:</li>\n</ol>\n<pre><code>timedatectl\n</code></pre>\n<p>You should see the timezone that you just set listed.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this guide, we have shown you how to automate the initial server setup of multiple Ubuntu 22.04 servers using Ansible. We covered the installation of Ansible, creating an inventory file, configuring SSH access, setting up sudo access, installing some common packages, creating a custom user, configuring firewall, and configuring timezone. With this knowledge, you can easily automate the setup and configuration of your infrastructure, saving you time and effort.</p>\n",
            "image": "https://techwhale.in/media/posts/43/git-workflow-copy.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials",
                   "Automation",
                   "Ansible"
            ],
            "date_published": "2023-07-14T03:04:41+05:30",
            "date_modified": "2023-07-26T17:34:34+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-aws-cli-on-linux-windows-and-mac/",
            "url": "https://techwhale.in/how-to-install-aws-cli-on-linux-windows-and-mac/",
            "title": "How to Install AWS CLI on Linux, Windows, and Mac",
            "summary": "AWS CLI (Command Line Interface) is a command-line tool used by developers and system administrators to interact with AWS services. In this tutorial, we will learn how to install AWS CLI on Linux, Windows, and Mac. We will also learn some tips and tricks to&hellip;",
            "content_html": "<p>AWS CLI (Command Line Interface) is a command-line tool used by developers and system administrators to interact with AWS services. In this tutorial, we will learn how to install AWS CLI on Linux, Windows, and Mac. We will also learn some tips and tricks to make working with AWS CLI easier.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Before we start, make sure you have the following prerequisites:</p>\n<ul>\n<li>A Linux, Windows, or Mac machine with administrative privileges</li>\n<li>Python 2.7.9 or later, or Python 3.4 or later</li>\n</ul>\n<h2 id=\"installing-aws-cli-on-linux\">Installing AWS CLI on Linux</h2>\n<p>Follow the steps below to install AWS CLI on Linux:</p>\n<ol>\n<li><p>Open the terminal on your Linux machine.</p>\n</li>\n<li><p>Update the package list:</p>\n<pre><code>sudo apt-get update\n</code></pre>\n</li>\n<li><p>Install the AWS CLI package:</p>\n<pre><code>sudo apt-get install awscli\n</code></pre>\n</li>\n<li><p>Verify the installation:</p>\n<pre><code>aws --version\n</code></pre>\n<p> The above command should output the version of AWS CLI installed on your machine.</p>\n</li>\n</ol>\n<h2 id=\"installing-aws-cli-on-windows\">Installing AWS CLI on Windows</h2>\n<p>Follow the steps below to install AWS CLI on Windows:</p>\n<ol>\n<li><p>Download the AWS CLI MSI installer for Windows from the <a href=\"https://aws.amazon.com/cli/\">official AWS CLI website</a>.</p>\n</li>\n<li><p>Run the installer and follow the prompts to install AWS CLI.</p>\n</li>\n<li><p>Open Command Prompt or PowerShell and run the following command:</p>\n<pre><code>aws --version\n</code></pre>\n<p> The above command should output the version of AWS CLI installed on your machine.</p>\n</li>\n</ol>\n<h2 id=\"installing-aws-cli-on-mac\">Installing AWS CLI on Mac</h2>\n<p>Follow the steps below to install AWS CLI on Mac:</p>\n<ol>\n<li><p>Open the terminal on your Mac machine.</p>\n</li>\n<li><p>Install AWS CLI using Homebrew:</p>\n<pre><code>brew install awscli\n</code></pre>\n</li>\n<li><p>Verify the installation:</p>\n<pre><code>aws --version\n</code></pre>\n<p> The above command should output the version of AWS CLI installed on your machine.</p>\n</li>\n</ol>\n<h2 id=\"tips-and-tricks\">Tips and Tricks</h2>\n<h3 id=\"multiple-aws-profiles\">Multiple AWS Profiles</h3>\n<p>You can configure multiple AWS profiles on your machine. This is useful if you have multiple AWS accounts or if you are working with multiple IAM users.</p>\n<p>To create a new AWS profile, run the following command:</p>\n<pre><code>aws configure --profile &lt;profile-name&gt;\n</code></pre>\n<p>Replace <code>&lt;profile-name&gt;</code> with the name of your new profile. Follow the prompts to provide your AWS access key, secret access key, region, and output format.</p>\n<p>To switch between AWS profiles, specify the profile name when running AWS CLI commands:</p>\n<pre><code>aws s3 ls --profile &lt;profile-name&gt;\n</code></pre>\n<h3 id=\"using-aws-sso\">Using AWS SSO</h3>\n<p>If your organization uses AWS SSO (Single Sign-On), you can use AWS CLI to log in to your AWS account without providing your AWS access key and secret access key.</p>\n<p>To use AWS SSO with AWS CLI, run the following command:</p>\n<pre><code>aws sso login --profile &lt;profile-name&gt; --region &lt;aws-region&gt;\n</code></pre>\n<p>Replace <code>&lt;profile-name&gt;</code> with the name of your AWS profile and <code>&lt;aws-region&gt;</code> with the AWS region you want to log in to.</p>\n<h3 id=\"syncing-files-to-amazon-s3\">Syncing Files to Amazon S3</h3>\n<p>You can use AWS CLI to sync files and directories to Amazon S3. This is useful for backing up files to Amazon S3 or for distributing files to a large number of users.</p>\n<p>To sync a local directory to an S3 bucket, run the following command:</p>\n<pre><code>aws s3 sync /path/to/local/directory s3://&lt;bucket-name&gt;/&lt;prefix&gt;\n</code></pre>\n<p>Replace <code>/path/to/local/directory</code> with the path to your local directory, <code>&lt;bucket-name&gt;</code> with the name of your S3 bucket, and <code>&lt;prefix&gt;</code> with the prefix to use for the uploaded files.</p>\n<h3 id=\"copying-files-between-amazon-s3-buckets\">Copying Files Between Amazon S3 Buckets</h3>\n<p>You can use AWS CLI to copy files between Amazon S3 buckets. This is useful if you want to duplicate files in different buckets or regions.</p>\n<p>To copy a file between S3 buckets, run the following command:</p>\n<pre><code>aws s3 cp s3://&lt;source-bucket&gt;/&lt;source-key&gt; s3://&lt;destination-bucket&gt;/&lt;destination-key&gt;\n</code></pre>\n<p>Replace <code>&lt;source-bucket&gt;</code> with the name of the source S3 bucket, <code>&lt;source-key&gt;</code> with the key of the source file, <code>&lt;destination-bucket&gt;</code> with the name of the destination S3 bucket, and <code>&lt;destination-key&gt;</code> with the key of the destination file.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this tutorial, we learned how to install AWS CLI on Linux, Windows, and Mac. We also learned some tips and tricks to make working with AWS CLI easier. With AWS CLI, you can manage your AWS infrastructure from the command line, making it easier to automate common tasks.</p>\n",
            "image": "https://techwhale.in/media/posts/42/git-workflow-copy-1.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Tutorials",
                   "DevOps"
            ],
            "date_published": "2023-07-14T03:00:37+05:30",
            "date_modified": "2023-07-26T17:34:52+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-add-swap-space-on-ubuntu-22-and-debian-11-12/",
            "url": "https://techwhale.in/how-to-add-swap-space-on-ubuntu-22-and-debian-11-12/",
            "title": "How To Add Swap Space on Ubuntu 22 and Debian 11 / 12",
            "summary": "If you are running a Debian 11 system and are experiencing slow performance or running out of memory, you may need to add swap space to your system. Swap space is a designated area on your hard drive that is used to temporarily store data&hellip;",
            "content_html": "<p>If you are running a Debian 11 system and are experiencing slow performance or running out of memory, you may need to add swap space to your system. Swap space is a designated area on your hard drive that is used to temporarily store data when your system has run out of physical memory (RAM). In this guide, we will walk you through the steps to add swap space to your Debian 11 system.</p>\n<h2 id=\"step-1-checking-for-existing-swap-space\">Step 1: Checking for Existing Swap Space</h2>\n<p>Before adding a new swap file, you should first check if there is any existing swap space on your system. To do this, run the following command in your terminal:</p>\n<pre><code>sudo swapon --show\n</code></pre>\n<p>If you get no output, it means there is no existing swap space on your system.</p>\n<h2 id=\"step-2-creating-a-swap-file\">Step 2: Creating a Swap File</h2>\n<p>To create a new swap file, we will use the <code>fallocate</code> command. This command creates a file with a specified size. For example, to create a 2GB swap file, run the following command:</p>\n<pre><code>sudo fallocate -l 2G /swapfile\n</code></pre>\n<p>Next, we need to restrict access to the swap file to root only. Run the following command:</p>\n<pre><code>sudo chmod 600 /swapfile\n</code></pre>\n<h2 id=\"step-3-enabling-the-swap-file\">Step 3: Enabling the Swap File</h2>\n<p>Now that we have created the swap file, we need to enable it. Run the following command:</p>\n<pre><code>sudo mkswap /swapfile\n</code></pre>\n<p>This command initializes the swap file. Next, we need to enable the swap file with the following command:</p>\n<pre><code>sudo swapon /swapfile\n</code></pre>\n<p>To make the swap file permanent, we need to add it to the <code>/etc/fstab</code> file. Open the file with your preferred text editor:</p>\n<pre><code>sudo nano /etc/fstab\n</code></pre>\n<p>Add the following line to the file:</p>\n<pre><code>/swapfile swap swap defaults 0 0\n</code></pre>\n<p>Save and close the file.</p>\n<h2 id=\"step-4-verifying-the-swap-space\">Step 4: Verifying the Swap Space</h2>\n<p>To verify that the swap space has been added, you can run the following command:</p>\n<pre><code>sudo swapon --show\n</code></pre>\n<p>This command should now display your new swap file.</p>\n<h2 id=\"tips-and-tricks\">Tips and Tricks</h2>\n<h3 id=\"customizing-the-size-of-the-swap-file\">Customizing the Size of the Swap File</h3>\n<p>You can customize the size of the swap file to your requirements. Just replace “2G” in the <code>fallocate</code> command with the desired size (e.g. 4G, 8G, etc.). However, it is recommended to have a swap space of 2GB or less, depending on your system’s needs.</p>\n<h3 id=\"swap-file-vs-swap-partition\">Swap File vs Swap Partition</h3>\n<p>You can also create a swap partition instead of a swap file. However, it is recommended to use a swap file as it is easier to resize and manage.</p>\n<h3 id=\"adding-too-much-swap-space\">Adding Too Much Swap Space</h3>\n<p>Adding too much swap space can actually slow down your system, as the system will start using the swap space instead of physical memory. It is recommended to have a swap space of 2GB or less, depending on your system’s needs.</p>\n<h3 id=\"verifying-swap-space-usage\">Verifying Swap Space Usage</h3>\n<p>To verify how much swap space is being used, run the following command:</p>\n<pre><code>sudo swapon --summary\n</code></pre>\n<p>This command will show you the amount of swap space being used, as well as the total amount of swap space available.</p>\n<h3 id=\"removing-swap-space\">Removing Swap Space</h3>\n<p>If you no longer need the swap space, you can remove it by running the following commands:</p>\n<pre><code>sudo swapoff /swapfile\nsudo rm /swapfile\n</code></pre>\n<p>Congratulations! You have successfully added swap space to your Debian 11 system.</p>\n",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials",
                   "Debian"
            ],
            "date_published": "2023-07-14T02:57:48+05:30",
            "date_modified": "2023-07-14T02:57:48+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-configure-logging-and-log-rotation-in-nginx-on-an-ubuntu-22-and-debian-12/",
            "url": "https://techwhale.in/how-to-configure-logging-and-log-rotation-in-nginx-on-an-ubuntu-22-and-debian-12/",
            "title": "How To Configure Logging and Log Rotation in Nginx on an Ubuntu 22 and Debian 12",
            "summary": "Nginx is a popular web server used to serve web applications. It is known for its high performance, reliability, and scalability. Nginx logs all the requests that are processed by the server. These logs can be useful for troubleshooting issues with the server, analyzing traffic&hellip;",
            "content_html": "<p>Nginx is a popular web server used to serve web applications. It is known for its high performance, reliability, and scalability. Nginx logs all the requests that are processed by the server. These logs can be useful for troubleshooting issues with the server, analyzing traffic patterns, and monitoring server activity. However, if the logs are not properly configured and rotated, they can consume too much disk space and make it difficult to analyze the logs over time. In this guide, we will show you how to configure logging and log rotation in Nginx on an Ubuntu 22 and Debian Server 12.</p>\n<h2 id=\"step-1-configuring-nginx-logging\">Step 1: Configuring Nginx Logging</h2>\n<p>Nginx logs all the requests that are processed by the server. By default, Nginx logs all the requests to the error log file. However, it is recommended to configure separate access and error log files to make it easier to analyze the logs.</p>\n<ol>\n<li><p>Open the Nginx configuration file <code>/etc/nginx/nginx.conf</code> using a text editor. You can use any text editor of your choice, such as <code>nano</code>, <code>vim</code>, or <code>emacs</code>.</p>\n<pre><code>sudo nano /etc/nginx/nginx.conf\n</code></pre>\n</li>\n<li><p>Locate the <code>http</code> block in the configuration file. This block contains the main configuration for the HTTP server.</p>\n</li>\n<li><p>Add the following lines to the <code>http</code> block to enable logging:\nThis will create two log files: <code>/var/log/nginx/access.log</code> for all access logs and <code>/var/log/nginx/error.log</code> for all error logs.</p>\n<pre><code>access_log  /var/log/nginx/access.log;\nerror_log  /var/log/nginx/error.log;\n</code></pre>\n</li>\n<li><p>Save the changes and exit the text editor.</p>\n</li>\n<li><p>Restart Nginx to apply the changes:</p>\n<pre><code>sudo systemctl restart nginx\n</code></pre>\n</li>\n</ol>\n<h2 id=\"step-2-configuring-log-rotation\">Step 2: Configuring Log Rotation</h2>\n<p>Log rotation is the process of archiving old log files and creating new ones to prevent disk space issues. In Nginx, log rotation can be configured using the <code>logrotate</code> utility. The <code>logrotate</code> utility is a system tool that can be used to manage log files.</p>\n<ol>\n<li><p>Create a new log rotation configuration file for Nginx:</p>\n<pre><code>sudo nano /etc/logrotate.d/nginx\n</code></pre>\n</li>\n<li><p>Add the following lines to the file:\nThis configuration will rotate the logs daily, keep 52 rotated logs, compress the rotated logs, delay compression until the next rotation, and create new log files with permissions <code>0640</code> owned by the <code>www-data</code> and <code>adm</code> groups.</p>\n<pre><code>/var/log/nginx/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 0640 www-data adm\n    sharedscripts\n    postrotate\n        [ -f /run/nginx.pid ] &amp;&amp; kill -USR1 `cat /run/nginx.pid`\n    endscript\n}\n</code></pre>\n</li>\n<li><p>Save the changes and exit the text editor.</p>\n</li>\n<li><p>Test the log rotation configuration:\nThis command will force a log rotation and print any errors to the console.</p>\n<pre><code>sudo logrotate -f /etc/logrotate.d/nginx\n</code></pre>\n</li>\n</ol>\n<h2 id=\"tips-and-tricks\">Tips and Tricks</h2>\n<h3 id=\"real-time-nginx-logs\">Real-time Nginx logs</h3>\n<p>To view the Nginx logs in real-time, use the <code>tail</code> command:</p>\n<pre><code>tail -f /var/log/nginx/access.log\ntail -f /var/log/nginx/error.log\n</code></pre>\n<p>The <code>tail</code> command will display the last few lines of the log file and wait for new lines to be added to the file. This is useful for monitoring the logs in real-time.</p>\n<h3 id=\"analyzing-nginx-logs\">Analyzing Nginx logs</h3>\n<p>To analyze the Nginx logs, use a log analyzer like <code>goaccess</code>. <code>goaccess</code> is a command-line tool that can be used to generate reports from log files. <code>goaccess</code> can generate reports in HTML, JSON, or CSV format.</p>\n<p>To install <code>goaccess</code> on Ubuntu 22 or Debian Server 12, run the following command:</p>\n<pre><code>sudo apt install goaccess\n</code></pre>\n<p>To generate an HTML report from the access log, run the following command:</p>\n<pre><code>goaccess /var/log/nginx/access.log -o /var/www/html/report.html --log-format=COMBINED\n</code></pre>\n<p>This command will generate an HTML report from the access log and save it to <code>/var/www/html/report.html</code>.</p>\n<h3 id=\"excluding-specific-requests-from-being-logged\">Excluding specific requests from being logged</h3>\n<p>To exclude specific requests from being logged, use the <code>map</code> directive in the Nginx configuration file. The <code>map</code> directive can be used to define a variable that can be used in the configuration file.</p>\n<p>For example, to exclude requests that match the regular expression <code>~*^/admin</code> from being logged, add the following configuration to the Nginx configuration file:</p>\n<pre><code>map $request_uri $loggable {\n    default 1;\n    ~*^/admin 0;\n}\nserver {\n    ...\n    access_log  /var/log/nginx/access.log combined if=$loggable;\n    ...\n}\n</code></pre>\n<p>This configuration will exclude requests that match the regular expression <code>~*^/admin</code> from being logged.</p>\n<h3 id=\"customizing-log-formats\">Customizing log formats</h3>\n<p>By default, Nginx uses the <code>combined</code> log format, which includes the client IP address, request time, request method, request URL, HTTP version, status code, size of the response, referrer, and user agent. However, you can customize the log format to include only the information that you need.</p>\n<p>To customize the log format, modify the <code>access_log</code> directive in the Nginx configuration file. For example, to include only the client IP address, request time, request URL, and user agent, add the following line to the <code>http</code> block in the Nginx configuration file:</p>\n<pre><code>log_format  mylog  &#39;$remote_addr - $time_local - &quot;$request&quot; - &quot;$http_user_agent&quot;&#39;;\n</code></pre>\n<p>Then, update the <code>access_log</code> directive to use the new log format:</p>\n<pre><code>access_log  /var/log/nginx/access.log mylog;\n</code></pre>\n<p>This will create a log file at <code>/var/log/nginx/access.log</code> using the <code>mylog</code> log format.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this guide, we have shown you how to configure logging and log rotation in Nginx on an Ubuntu 22 and Debian Server 12. By following these steps, you can ensure that your Nginx logs are properly configured and rotated to prevent disk space issues and make it easier to analyze the logs when troubleshooting issues. We have also provided some tips and tricks to help you monitor and analyze the logs, customize log formats, and exclude specific requests from being logged.</p>\n",
            "image": "https://techwhale.in/media/posts/40/ScreenShot-20230726-174020.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "TechWhale Guides",
                   "Nginx"
            ],
            "date_published": "2023-07-14T02:54:23+05:30",
            "date_modified": "2023-07-26T17:40:32+05:30"
        },
        {
            "id": "https://techwhale.in/automate-linux-system-management-with-ansible-system-roles/",
            "url": "https://techwhale.in/automate-linux-system-management-with-ansible-system-roles/",
            "title": "Automate Linux System Management with Ansible System Roles",
            "summary": "Ansible is an open-source automation tool that allows you to automate tasks across multiple servers. Ansible System Roles are pre-written Ansible playbooks that are designed to automate the installation, configuration, and management of specific services and applications on Linux systems. By using Ansible System Roles,&hellip;",
            "content_html": "<p>Ansible is an open-source automation tool that allows you to automate tasks across multiple servers. Ansible System Roles are pre-written Ansible playbooks that are designed to automate the installation, configuration, and management of specific services and applications on Linux systems.</p>\n<p>By using Ansible System Roles, you can automate the deployment of various applications and services like Apache, MySQL, Nginx, PostgreSQL, and many more. In this guide, we will walk you through the steps to automate Linux systems with Ansible System Roles.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Before we start, you need to have Ansible installed on your system. You can install Ansible by running the following command:</p>\n<pre><code>sudo apt-get install ansible\n</code></pre>\n<h2 id=\"step-1-create-a-playbook\">Step 1: Create a Playbook</h2>\n<p>The first step in automating Linux systems with Ansible System Roles is to create a playbook. A playbook is a file that contains a set of instructions that Ansible will execute on your servers.</p>\n<p>To create a playbook, create a file with a <code>.yml</code> extension and add the following code:</p>\n<pre><code>---\n- name: Install Apache\n  hosts: webservers\n  become: true\n  roles:\n    - geerlingguy.apache\n</code></pre>\n<p>In the above code, we have specified the name of the playbook, the hosts on which the playbook will be executed, and the Ansible System Role that we want to use for installing Apache. In this case, we are using the <code>geerlingguy.apache</code> System Role.</p>\n<h2 id=\"step-2-define-hosts\">Step 2: Define Hosts</h2>\n<p>The next step is to define the hosts on which you want to execute the playbook. You can define hosts in the <code>/etc/ansible/hosts</code> file. Open the file with your favorite text editor and add the following code:</p>\n<pre><code>[webservers]\nserver1.example.com\nserver2.example.com\n</code></pre>\n<p>In the above code, we have defined a group of hosts with the name <code>webservers</code> and added two servers to the group.</p>\n<h2 id=\"step-3-execute-the-playbook\">Step 3: Execute the Playbook</h2>\n<p>Now that we have created the playbook and defined the hosts, we can execute the playbook by running the following command:</p>\n<pre><code>ansible-playbook playbook.yml\n</code></pre>\n<p>In the above command, <code>playbook.yml</code> is the name of the playbook that we created in Step 1.</p>\n<h2 id=\"example-1-install-nginx\">Example 1: Install Nginx</h2>\n<p>To install Nginx using Ansible System Roles, create a playbook with the following code:</p>\n<pre><code>---\n- name: Install Nginx\n  hosts: webservers\n  become: true\n  roles:\n    - geerlingguy.nginx\n</code></pre>\n<p>In the above code, we are using the <code>geerlingguy.nginx</code> System Role to install Nginx.</p>\n<h2 id=\"example-2-install-mysql\">Example 2: Install MySQL</h2>\n<p>To install MySQL using Ansible System Roles, create a playbook with the following code:</p>\n<pre><code>---\n- name: Install MySQL\n  hosts: databases\n  become: true\n  roles:\n    - geerlingguy.mysql\n</code></pre>\n<p>In the above code, we are using the <code>geerlingguy.mysql</code> System Role to install MySQL.</p>\n<h2 id=\"example-3-install-postgresql\">Example 3: Install PostgreSQL</h2>\n<p>To install PostgreSQL using Ansible System Roles, create a playbook with the following code:</p>\n<pre><code>---\n- name: Install PostgreSQL\n  hosts: databases\n  become: true\n  roles:\n    - geerlingguy.postgresql\n</code></pre>\n<p>In the above code, we are using the <code>geerlingguy.postgresql</code> System Role to install PostgreSQL.</p>\n<h2 id=\"example-4-install-redis\">Example 4: Install Redis</h2>\n<p>To install Redis using Ansible System Roles, create a playbook with the following code:</p>\n<pre><code>---\n- name: Install Redis\n  hosts: cacheservers\n  become: true\n  roles:\n    - geerlingguy.redis\n</code></pre>\n<p>In the above code, we are using the <code>geerlingguy.redis</code> System Role to install Redis.</p>\n<h2 id=\"example-5-install-docker\">Example 5: Install Docker</h2>\n<p>To install Docker using Ansible System Roles, create a playbook with the following code:</p>\n<pre><code>---\n- name: Install Docker\n  hosts: dockerservers\n  become: true\n  roles:\n    - geerlingguy.docker\n</code></pre>\n<p>In the above code, we are using the <code>geerlingguy.docker</code> System Role to install Docker.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this guide, we have shown you how to automate Linux systems with Ansible System Roles. By using Ansible System Roles, you can easily automate the deployment of various applications and services on your Linux servers. With the examples provided in this guide, you can now start automating your Linux systems with Ansible System Roles.</p>\n",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Docker",
                   "DevOps",
                   "Ansible"
            ],
            "date_published": "2023-07-14T02:49:33+05:30",
            "date_modified": "2023-07-14T02:49:33+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-mariadb-110-with-phpmyadmin-on-rocky-amalinux/",
            "url": "https://techwhale.in/how-to-install-mariadb-110-with-phpmyadmin-on-rocky-amalinux/",
            "title": "How to Install MariaDB 11.0 With phpMyAdmin on Rocky / AmaLinux",
            "summary": "MariaDB is an open-source relational database management system that is a drop-in replacement for MySQL. It is developed by the original creators of MySQL and is widely used in web applications. phpMyAdmin is a free and open-source web-based application that provides a graphical user interface&hellip;",
            "content_html": "<p>MariaDB is an open-source relational database management system that is a drop-in replacement for MySQL. It is developed by the original creators of MySQL and is widely used in web applications. phpMyAdmin is a free and open-source web-based application that provides a graphical user interface for managing MySQL and MariaDB databases. In this tutorial, we will install MariaDB 11.0 and phpMyAdmin on Rocky / AmaLinux.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Before starting the installation process, make sure that you have the following:</p>\n<ul>\n<li>A Rocky / AmaLinux server with sudo privileges.</li>\n<li>Access to the internet to download and install the required packages.</li>\n</ul>\n<h2 id=\"step-1-update-the-system\">Step 1: Update the System</h2>\n<p>The first step is to update the system packages to their latest versions. Open the terminal and execute the following command:</p>\n<pre><code>sudo yum update\n</code></pre>\n<p>This command will update all the installed packages to their latest versions.</p>\n<h2 id=\"step-2-install-mariadb-110\">Step 2: Install MariaDB 11.0</h2>\n<p>To install MariaDB 11.0, execute the following command in the terminal:</p>\n<pre><code>sudo yum install -y mariadb-server\n</code></pre>\n<p>This command will install the MariaDB server on your system. Once the installation is complete, start the MariaDB service and enable it to start at boot time using the following commands:</p>\n<pre><code>sudo systemctl start mariadb\nsudo systemctl enable mariadb\n</code></pre>\n<p>Next, run the following command to secure your MariaDB server:</p>\n<pre><code>sudo mysql_secure_installation\n</code></pre>\n<p>This command will prompt you to set a root password, remove anonymous users, disallow remote root login, and remove test databases. Follow the prompts and answer the questions to secure your MariaDB server.</p>\n<h2 id=\"step-3-install-phpmyadmin\">Step 3: Install phpMyAdmin</h2>\n<p>To install phpMyAdmin, execute the following command in the terminal:</p>\n<pre><code>sudo yum install -y epel-release\nsudo yum install -y phpMyAdmin\n</code></pre>\n<p>This command will install phpMyAdmin and its dependencies on your system.</p>\n<h2 id=\"step-4-configure-phpmyadmin\">Step 4: Configure phpMyAdmin</h2>\n<p>After installing phpMyAdmin, you need to configure it to work with MariaDB. Open the phpMyAdmin configuration file using the following command:</p>\n<pre><code>sudo nano /etc/httpd/conf.d/phpMyAdmin.conf\n</code></pre>\n<p>In this file, find the following line:</p>\n<pre><code>&lt;IfModule mod_authz_core.c&gt;\n</code></pre>\n<p>Add the following lines after it:</p>\n<pre><code># Apache 2.4\n&lt;RequireAny&gt;\nRequire ip 127.0.0.1\nRequire ip ::1\n&lt;/RequireAny&gt;\n</code></pre>\n<p>Save and close the file.</p>\n<h2 id=\"step-5-restart-the-services\">Step 5: Restart the Services</h2>\n<p>After making the necessary changes to the configuration files, restart the services using the following commands:</p>\n<pre><code>sudo systemctl restart httpd\nsudo systemctl restart mariadb\n</code></pre>\n<h2 id=\"step-6-access-phpmyadmin\">Step 6: Access phpMyAdmin</h2>\n<p>Open your web browser and navigate to the following URL:</p>\n<pre><code>&lt;http://your-server-ip/phpMyAdmin&gt;\n</code></pre>\n<p>Replace ‘your-server-ip’ with the IP address of your server. You will be prompted to enter your MariaDB username and password. Enter the credentials and click on the ‘Go’ button to access the phpMyAdmin dashboard.</p>\n<h2 id=\"issues-and-fixes\">Issues and Fixes</h2>\n<p>If you encounter any issues during the installation process, try the following fixes:</p>\n<ul>\n<li>If you get the error ‘No package epel-release available’, run the following command and try again:</li>\n</ul>\n<pre><code>sudo yum install -y &lt;https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&gt;\n</code></pre>\n<ul>\n<li>If you get the error ‘Access denied for user ‘root‘@’localhost’ (using password: YES)’, try resetting the MariaDB root password using the following commands:</li>\n</ul>\n<pre><code>sudo systemctl stop mariadb\nsudo mysqld_safe --skip-grant-tables &amp;\nmysql -u root\nUPDATE mysql.user SET Password=PASSWORD(&#39;new_password&#39;) WHERE User=&#39;root&#39;;\nFLUSH PRIVILEGES;\nexit;\nsudo systemctl start mariadb\n</code></pre>\n<ul>\n<li>If you get the error ‘Cannot connect: invalid settings’, open the phpMyAdmin configuration file using the following command and replace the existing lines with the following:</li>\n</ul>\n<pre><code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;] = &#39;cookie&#39;;\n$cfg[&#39;Servers&#39;][$i][&#39;host&#39;] = &#39;localhost&#39;;\n$cfg[&#39;Servers&#39;][$i][&#39;compress&#39;] = false;\n$cfg[&#39;Servers&#39;][$i][&#39;AllowNoPassword&#39;] = false;\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this tutorial, we have shown you how to install MariaDB 11.0 with phpMyAdmin on Rocky / AmaLinux. We have also shown you how to configure phpMyAdmin and access it from a web browser. If you encounter any issues during the installation process, try the available fixes.</p>\n",
            "image": "https://techwhale.in/media/posts/38/ScreenShot-20230726-173240.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "TechWhale Guides",
                   "MySQL"
            ],
            "date_published": "2023-07-14T02:45:56+05:30",
            "date_modified": "2023-07-26T17:33:11+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-podman-compose-on-debian-12-bookworm/",
            "url": "https://techwhale.in/how-to-install-podman-compose-on-debian-12-bookworm/",
            "title": "How to install Podman Compose on Debian 12 (Bookworm)",
            "summary": "f you are running Debian 12 (Bookworm) and want to use Docker Compose or Podman Compose, here are the steps to install Podman Compose on your system. Docker and Podman are both container runtimes, but they have some differences in their architecture and features. Docker&hellip;",
            "content_html": "<p>f you are running Debian 12 (Bookworm) and want to use Docker Compose or Podman Compose, here are the steps to install Podman Compose on your system.</p>\n<h2 id=\"comparing-docker-and-podman\">Comparing Docker and Podman</h2>\n<p>Docker and Podman are both container runtimes, but they have some differences in their architecture and features.</p>\n<h3 id=\"architecture\">Architecture</h3>\n<p>Docker uses a client-server architecture, where the Docker client communicates with the Docker daemon to manage containers. The Docker daemon runs as a background process on the host machine.</p>\n<p>Podman, on the other hand, uses a daemonless architecture, where each container is managed as a separate process on the host machine. This makes Podman more lightweight and secure than Docker.</p>\n<h3 id=\"features\">Features</h3>\n<p>Docker has a larger ecosystem and more features than Podman, including a wider variety of plugins and tools. However, Podman has some unique features that Docker does not have, such as rootless containers and the ability to run containers without a daemon.</p>\n<h2 id=\"installing-podman-compose\">Installing Podman Compose</h2>\n<ol>\n<li><p>Add the Podman repository to your system by running the following command:</p>\n<pre><code>echo &quot;deb &lt;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_12/&gt; /&quot; | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list\n</code></pre>\n</li>\n<li><p>Add the repository key to your system by running the following command:</p>\n<pre><code>curl -L &lt;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_12/Release.key&gt; | sudo apt-key add -\n</code></pre>\n</li>\n<li><p>Update the package list by running the following command:</p>\n<pre><code>sudo apt-get update\n</code></pre>\n</li>\n<li><p>Install Podman Compose by running the following command:</p>\n<pre><code>sudo apt-get install podman-compose\n</code></pre>\n</li>\n<li><p>Verify Podman Compose installation by running the following command:</p>\n<pre><code>podman-compose version\n</code></pre>\n<p> If the installation was successful, you should see the version number of Podman Compose.</p>\n</li>\n</ol>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Both Docker and Podman have their strengths and weaknesses, and the choice of which one to use depends on your specific use case and requirements. If you value security and lightweight architecture, Podman may be a better choice for you. If you need a wider variety of tools and plugins, Docker may be the better option.</p>\n",
            "image": "https://techwhale.in/media/posts/37/git-workflow-copy-2.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Tutorials",
                   "Docker"
            ],
            "date_published": "2023-07-14T02:39:34+05:30",
            "date_modified": "2023-07-26T17:33:45+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-pm2-process-management-on-ubuntu-2210-debian-11/",
            "url": "https://techwhale.in/how-to-install-pm2-process-management-on-ubuntu-2210-debian-11/",
            "title": "How to install PM2 (Process Management) on Ubuntu 22.10 / Debian 11",
            "summary": "PM2 is a fantastic process manager designed specifically for Node.js applications. Throughout my journey as a web developer, I've worked extensively with Node.js. I've had to schedule and manage a multitude of Node.js applications using CRON, which, let me tell you, was no walk in&hellip;",
            "content_html": "\n  <p>\n    PM2 is a fantastic process manager designed specifically for Node.js applications.<br><br>Throughout my journey as a web developer, I've worked extensively with Node.js. I've had to schedule and manage a multitude of Node.js applications using CRON, which, let me tell you, was no walk in the park. That was until I discovered PM2! It was a game-changer, making my life significantly easier. PM2 ensures my apps are always up and running, and it automatically refreshes them whenever I make updates. Plus, it gives me the flexibility to manually set the reload time using CRON or adjust the restart delay for any application. The best part? It works seamlessly across all operating systems!<br><br>Now, you might be thinking, \"Is PM2 only for Node.js apps?\" The answer is a resounding no! While PM2 was indeed created with Node.js applications in mind, its utility isn't confined to just that. After using PM2 for a while, I discovered that it can manage scripts from any programming language! I gave it a whirl with Python, and guess what? It worked like a charm!<br><br>In this article, I'm going to share a practical example of how you can schedule and automate your Python scripts using PM2. So, buckle up and let's dive in!<br><br>Step 1: Update Your System<br><br>First things first, let's make sure your system is up-to-date. Open up your terminal and type in the following command:<br><br><code>sudo apt update<br></code><br>This command will fetch the list of available updates and then upgrade your system. The -y flag automatically confirms all prompts, saving you from having to manually approve each update.<br><br>Step 2: Install Node.js<br><br>PM2 is a Node.js application, so we'll need to have Node.js installed on our system. Here's how to do it:<br><br><code>sudo apt install nodejs -y<br></code><br>Once the installation is complete, you can verify it by checking the version of Node.js:<br><br><code>nodejs -v<br></code><br>You should see a version number as the output, which means Node.js is installed correctly.<br><br>Step 3: Install NPM (Node Package Manager)<br><br>NPM is the default package manager for Node.js and it's what we'll use to install PM2. To install NPM, use the following command:<br><br><code>sudo apt install npm -y<br></code><br>Just like we did with Node.js, we can check if NPM is installed correctly:<br><br><code>npm -v<br></code><br>If you see a version number, you're good to go!<br><br>Step 4: Install PM2<br><br>Now that we have Node.js and NPM installed, we can finally install PM2. Here's the command to do it:<br><br><code>sudo npm install -g pm2<br></code><br>The -g flag installs PM2 globally, which means you can use it from any directory on your system.<br><br>To check if PM2 is installed correctly, you can use the following command:<br><br><code>pm2 -v<br></code><br>If you see a version number, congratulations! You've successfully installed PM2 on your Ubuntu 22.10 or Debian 11 system.<br><br>Step 5: Set PM2 to Start on Boot<br><br>One of the great things about PM2 is that it can automatically restart your applications if your system reboots. To set this up, you can use the following command:<br><br><code>pm2 startup<br></code><br>This command will generate a command that you need to run with superuser privileges. Copy the outputted command and run it:<br><br><br><code>sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u yourusername --hp /home/yourusername<br></code><br>Remember to replace yourusername with your actual username.<br><br>And there you have it! You've installed PM2 on your Ubuntu 22.10 or Debian 11 system. Now you can use PM2 to manage and keep your Node.js, Python or Any script or applications running in the background.<br><br>Thank you for reading.\n  </p>\n\n  <p>\n    \n  </p>",
            "image": "https://techwhale.in/media/posts/34/install-pm2.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials",
                   "DevOps",
                   "Debian"
            ],
            "date_published": "2023-05-19T11:53:02+05:30",
            "date_modified": "2023-05-31T00:22:11+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-bypass-specific-website-or-ip-from-openvpn-connection-on-mac/",
            "url": "https://techwhale.in/how-to-bypass-specific-website-or-ip-from-openvpn-connection-on-mac/",
            "title": "How to bypass specific website or IP from OpenVPN connection on Mac",
            "summary": "We all have sites that needs to bypass the VPN connection and OpenVPN is popular open source VPN software but it lacks to have bypass a website from it’s network but if you’ve a mac then it’s a easy process as shown in below guide&hellip;",
            "content_html": "<p>We all have sites that needs to bypass the VPN connection and OpenVPN is popular open source VPN software but it lacks to have bypass a website from it’s network but if you’ve a mac then it’s a easy process as shown in below guide and hope it helps you.</p>\n<p>To bypass specific websites or IP addresses from OpenVPN connection on a Mac, you can use the route command to exclude them from the VPN tunnel. Here’s how you can do it:</p>\n<ol>\n<li><p>Open the Terminal app on your Mac. You can find it in Applications &gt; Utilities.</p>\n</li>\n<li><p>First, find your default gateway IP address. You can do this by running the following command in Terminal:</p>\n</li>\n</ol>\n<pre><code>netstat -nr | grep default\n</code></pre>\n<p>This command will display your default gateway IP address in the second column. Note it down as you’ll need it in the next steps.</p>\n<ol start=\"3\">\n<li>Now, find the IP address of the website you want to bypass. You can use the following command, replacing “example.com” with the website you want to bypass:</li>\n</ol>\n<pre><code>nslookup example.com\n</code></pre>\n<p>This command will give you the IP address of the website. Note it down as you’ll need it in the next steps.</p>\n<ol start=\"4\">\n<li>To bypass the website from theOpenVPN connection, use the route command with the following syntax, replacing “your_gateway_ip” with the default gateway IP you noted down earlier, and “website_ip” with the IP address of the website you want to bypass:</li>\n</ol>\n<pre><code>sudo route add -host website_ip your_gateway_ip\n</code></pre>\n<p>For example, if your default gateway IP is 192.168.1.1 and the website’s IP is 123.45.67.89, the command would be:</p>\n<pre><code>sudo route add -host 123.45.67.89 192.168.1.1\n</code></pre>\n<ol start=\"5\">\n<li><p>You will be prompted to enter your Mac’s admin password to execute the command. Once you’ve entered the password, the route will be added, and the specified website will be bypassed from the OpenVPN connection.</p>\n</li>\n<li><p>To check if the bypass is working, you can visit the website and check your IP address. It should show your regular IP address instead of the VPN IP address.</p>\n</li>\n<li><p>If you want to remove the bypass, you can use the following command, replacing “website_ip” with the IP address of the website you want to remove the bypass for:</p>\n</li>\n</ol>\n<pre><code>sudo route delete -host website_ip\n</code></pre>\n<ol start=\"8\">\n<li>You can repeat steps 3-7 for any additional websites or IP addresses you want to bypass from the OpenVPN connection.</li>\n</ol>\n<p>Note: These changes are temporary and will be reset when you restart your Mac. To make the bypass permanent, you can create a script to run these commands at startup or add them to your OpenVPN configuration file.</p>\n",
            "image": "https://techwhale.in/media/posts/33/bypass-openvpn.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "TechWhale Guides"
            ],
            "date_published": "2023-04-21T19:32:59+05:30",
            "date_modified": "2023-04-21T21:55:22+05:30"
        },
        {
            "id": "https://techwhale.in/command-systemctl-helpful-tips-and-usage-for-you-to-tryout/",
            "url": "https://techwhale.in/command-systemctl-helpful-tips-and-usage-for-you-to-tryout/",
            "title": "How to use SystemCtl for Daily Usage and It&#x27;s Helpful Tips ",
            "summary": "When it comes to Linux, the systemctl command is your go-to for managing services. It controls the boot process and allows you to start, stop, enable, disable, and check the status of services. In order to make the most of the systemctl command, consider the&hellip;",
            "content_html": "<p>When it comes to Linux, the systemctl command is your go-to for managing services. It controls the boot process and allows you to start, stop, enable, disable, and check the status of services.<br><br>In order to make the most of the systemctl command, consider the following:<br><br>Services Provided List The list-units option and the —type=service flag will display a complete list of available services.</p>\n<pre><br>systemctl list-units —type=service</pre>\n<p><br><br>Just a list of all the defunct services, please. Use the —all option to see a list of all the disabled services:</p>\n<pre>Entering systemctl list-units —type=service —all</pre>\n<p>To launch a service: You can activate a service by typing \"start\" followed by the service's name.</p>\n<pre>servicename systemctl start</pre>\n<p>Service termination is accomplished by issuing the stop command followed by the service's name.</p>\n<pre>servicename stop systemctl</pre>\n<p>To restart a service, type the restart command, then the name of the service.</p>\n<pre>systemctl restart yourservicename</pre>\n<p>Activate a service by issuing the enable command followed by the service's name, as in:<br><br>To activate the service, type</p>\n<pre><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">systemctl enable servicename</span></pre>\n<p>Use the disable command followed by the name of the service to prevent it from starting automatically.</p>\n<pre> systemctl disable servicename</pre>\n<p>Verify the current condition of a service: The status command, followed by the name of the service to check, is used to do just that.</p>\n<pre>  systemctl status servicename</pre>\n<p>Review the service's logs to see if there were any errors. Journalctl service name will display the service's logs.<br><br>copy paste this into a terminal:</p>\n<pre>journalctl -u servicename</pre>\n<p><br>If you have modified the system manager configuration and want to apply your changes, you can do so with the daemon-reload command.</p>\n<pre>daemon-reload systemctl</pre>",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
            ],
            "date_published": "2022-12-27T01:35:58+05:30",
            "date_modified": "2023-04-21T19:36:22+05:30"
        },
        {
            "id": "https://techwhale.in/master-the-linux-terminal-50-essential-commands-you-need-to-know/",
            "url": "https://techwhale.in/master-the-linux-terminal-50-essential-commands-you-need-to-know/",
            "title": "Master the Linux Terminal: 50 Essential Commands You Need to Know",
            "summary": "As a Linux user, the terminal is an essential tool for interacting with your operating system. From installing and updating software to managing files and performing advanced tasks, the terminal allows you to accomplish a wide range of tasks more efficiently than using a graphical&hellip;",
            "content_html": "<p>As a Linux user, the terminal is an essential tool for interacting with your operating system. From installing and updating software to managing files and performing advanced tasks, the terminal allows you to accomplish a wide range of tasks more efficiently than using a graphical user interface (GUI).</p>\n<p>Here are 50 important Linux commands you should know:</p>\n<p>cd - Change the current directory\nls - List the files in a directory\npwd - Print the current working directory\nmkdir - Create a new directory\nrmdir - Remove an empty directory\nrm - Remove a file or directory\ncp - Copy a file or directory\nmv - Move a file or directory\ncat - Display the contents of a file\nless - View the contents of a file one page at a time\nhead - Display the first few lines of a file\ntail - Display the last few lines of a file\ngrep - Search for patterns in a file\nfind - Search for files based on criteria\nsort - Sort the lines in a file\nuniq - Remove duplicate lines from a file\nwc - Count the number of lines, words, and characters in a file\nchmod - Change the permissions of a file or directory\nchown - Change the owner of a file or directory\nsudo - Run a command with superuser privileges\nsu - Switch to a different user account\nwhoami - Display the current user’s username\npasswd - Change the current user’s password\nping - Test a network connection\ntraceroute - Trace the route packets take to a destination\ntelnet - Connect to a remote server using the Telnet protocol\nssh - Connect to a remote server using the SSH protocol\nscp - Copy files between servers using the SSH protocol\nftp - Transfer files using the FTP protocol\nrsync - Synchronize files between servers\ntar - Create and extract archives\ngzip - Compress and decompress files\nbzip2 - Compress and decompress files\nunzip - Extract files from a ZIP archive\ngunzip - Decompress a GZIP archive\nbunzip2 - Decompress a BZIP2 archive\napt-get - Install and manage packages on Debian-based systems\nyum - Install and manage packages on Red Hat-based systems\ndnf - Install and manage packages on Fedora-based systems\nsystemctl - Manage system services\nservice - Manage system services\njournalctl - View the system log\ndmesg - View the kernel log\ntop - Display information about the top CPU and</p>\n",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
            ],
            "date_published": "2022-12-26T19:35:24+05:30",
            "date_modified": "2022-12-27T02:07:05+05:30"
        },
        {
            "id": "https://techwhale.in/mastering-devops-tools-a-practical-guide-to-boost-your-skills/",
            "url": "https://techwhale.in/mastering-devops-tools-a-practical-guide-to-boost-your-skills/",
            "title": "&quot;Mastering DevOps Tools: A Practical Guide to Boost Your Skills&quot;",
            "summary": "Because the DevOps movement has been gaining steam over the past several years, it is becoming increasingly vital for those who work in the technology industry to maintain familiarity with the most recent developments in both trends and methodologies. As a result, many IT professionals&hellip;",
            "content_html": "<div class=\"w-full border-b border-black/10 dark:border-gray-900/50 text-gray-800 dark:text-gray-100 group bg-gray-50 dark:bg-[#444654]\">\n<div class=\"text-base gap-4 md:gap-6 m-auto md:max-w-2xl lg:max-w-2xl xl:max-w-3xl p-4 md:py-6 flex lg:px-0\">\n<div class=\"relative flex w-[calc(100%-50px)] md:flex-col lg:w-[calc(100%-115px)]\">\n<div class=\"flex flex-grow flex-col gap-3\">\n<div class=\"min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p><span data-preserver-spaces=\"true\">Because the DevOps movement has been gaining steam over the past several years, it is becoming increasingly vital for those who work in the technology industry to maintain familiarity with the most recent developments in both trends and methodologies. As a result, many IT professionals have set their sights on the year 2023 to become \"masters\" of DevOps.</span></p>\n<p><span data-preserver-spaces=\"true\">The combination of software development and software operations is referred to as \"DevOps,\" It is a process that requires coordination between teams responsible for software development and teams responsible for software operations. DevOps practitioners aspire to continuously give value to their clients by improving the speed, quality, and consistency of the software delivery process. They do this by leveraging modern automation tools and processes.</span></p>\n<p><span data-preserver-spaces=\"true\">In the year 2023, if you would like to become an expert in DevOps, the following are some pointers to get you started:</span></p>\n<p><span data-preserver-spaces=\"true\">1. Get Familiar with the Fundamentals To become an expert in DevOps, you must first become familiar with the fundamentals of the process. To get started, you should familiarize with the essentials, such as continuous integration and delivery. It would help if you also familiarize with common DevOps tools and methods, such as Docker, Kubernetes, and Ansible.</span></p>\n<p><span data-preserver-spaces=\"true\">2. Obtain a Certification: Although obtaining certificates is not essential to become a master of DevOps, doing so can be an effective approach to demonstrating your abilities and understanding. Certifications such as the Red Hat Certified System Administrator (RHCSA) and the Certified Kubernetes Administrator are quite common in the DevOps industry (CKA).</span></p>\n<p><span data-preserver-spaces=\"true\">3. Participate in a Community Participating in a DevOps community is an excellent method to keep up with the most recent developments in best practices and trends. Find online forums, in-person gatherings, and conferences covering DevOps issues and attend those.</span></p>\n<p><span data-preserver-spaces=\"true\">4. Automate Everything: Automation is the cornerstone of DevOps, and it is important to become a master of DevOps in 2023. Automating everything you do is the fourth step to becoming a master of DevOps. Make it a priority to acquire knowledge of operating automation tools like Jenkins and Ansible, and gain experience configuring automated pipelines and processes.</span></p>\n<p><span data-preserver-spaces=\"true\">5. Always Stay Current Because the DevOps landscape is in a perpetual evolution, it is essential always to be updated on the most recent trends and practices. Staying updated requires that you keep up with the newest news and blogs, participate in webinars, and follow industry experts.</span></p>\n<p><span data-preserver-spaces=\"true\">As a developer or IT professional, keeping up with the latest tools and techniques in the DevOps field is essential. Whether you're new to DevOps or have been working in the field for a while, there are always new tools to learn and ways to improve your skills.</span></p>\n<p><span data-preserver-spaces=\"true\">Here are some tips for learning and using DevOps tools effectively:</span></p>\n<ol>\n<li><span data-preserver-spaces=\"true\">Please choose the right tools for your needs: There are countless DevOps tools available, so it's important to choose the ones that are right for your project or organization. Consider factors such as your team's skills and experience, the technology stack you're using, and the goals you're trying to achieve.</span></li>\n<li><span data-preserver-spaces=\"true\">Get hands-on experience: The best way to learn a new tool is to use it. Set aside time to experiment with different tools and see how they work in a real-world setting. This will help you understand their capabilities and limitations and give you the confidence to use them effectively in your projects.</span></li>\n<li><span data-preserver-spaces=\"true\">Learn from others: Many resources are available for learning about DevOps tools, including online courses, tutorials, and blogs. Follow experts in the field, join online communities, and seek out opportunities to learn from others who are experienced with the tools you're interested in.</span></li>\n<li><span data-preserver-spaces=\"true\">Automate as much as possible: Automation is a key component of DevOps, and many tools are designed to automate various tasks and processes. Take your time to learn how to use these tools to automate tasks and streamline your workflow, as this will save you time and effort in the long run.</span></li>\n<li><span data-preserver-spaces=\"true\">Keep learning: The DevOps field is constantly evolving, and new tools and techniques are always being developed. Stay up-to-date with the latest developments and continue learning new skills to stay competitive in your career.</span></li>\n</ol>\n<p><span data-preserver-spaces=\"true\">By following these tips and putting in the effort to learn and use DevOps tools effectively, you'll be well on path to mastering the field and becoming a valuable asset to your team or organization. Happy learning!</span></p>\n<p><span data-preserver-spaces=\"true\"> </span></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
            ],
            "date_published": "2022-12-26T11:47:53+05:30",
            "date_modified": "2022-12-26T19:42:32+05:30"
        },
        {
            "id": "https://techwhale.in/prepare-yourself-for-the-arrival-of-devops-in-the-year-2023/",
            "url": "https://techwhale.in/prepare-yourself-for-the-arrival-of-devops-in-the-year-2023/",
            "title": "Increase your salary and prepare yourself for DevOps in the year 2023.",
            "summary": "As a software engineer or IT professional, you are always looking for ways to improve your skills and advance your career. One area that can be particularly lucrative is DevOps, a set of practices that combines software development and operations to streamline the delivery of&hellip;",
            "content_html": "<p>As a software engineer or IT professional, you are always looking for ways to improve your skills and advance your career. One area that can be particularly lucrative is DevOps, a set of practices that combines software development and operations to streamline the delivery of software. By learning DevOps, you can increase your value as an employee and potentially negotiate a higher salary.</p>\n<p>Here are some tips for scaling your salary with DevOps in 2023:</p>\n<ol>\n<li>\n<p>Learn the fundamentals: Start by familiarizing yourself with the core concepts of DevOps, such as continuous integration, continuous delivery, and infrastructure as code.</p>\n</li>\n<li>\n<p>Gain experience with popular tools: To be a successful DevOps engineer, you will need to be proficient with tools such as Git, Docker, Jenkins, and Ansible. These tools are used to automate the build, test, and deployment process, as well as manage infrastructure.</p>\n</li>\n<li>\n<p>Join a DevOps team: The best way to learn DevOps is by doing it. Look for opportunities to join a DevOps team at your current company or consider seeking out a new job with a company that values DevOps practices.</p>\n</li>\n<li>\n<p>Build your network: DevOps is a rapidly evolving field, and staying up to date with the latest trends and technologies is crucial. Attend meetups, conferences, and online events to connect with other DevOps professionals and learn from experts in the field.</p>\n</li>\n<li>\n<p>Pursue certification: While not required, earning a DevOps certification can help you stand out in the job market and demonstrate your expertise to potential employers. There are several options to choose from, including the Certified Kubernetes Administrator (CKA) and the Certified Cloud Native Professional (CCNP).</p>\n</li>\n</ol>\n<p>By investing in your DevOps skills, you can increase your value as an employee and potentially negotiate a higher salary. With the right combination of knowledge, experience, and networking, you can position yourself as a valuable asset to any organization and scale your salary in 2023 and beyond.</p>\n<p>As a developer or IT professional, staying up-to-date with the latest tools and technologies is crucial in order to remain competitive in the job market. This is especially true in the field of DevOps, where the use of automation and other technologies can greatly improve the efficiency and reliability of software delivery. With that in mind, here are some tools and practices that you should consider adopting in preparation for DevOps in 2023:</p>\n<ol>\n<li>\n<p>Containerization: Containerization involves packaging applications and their dependencies into a self-contained unit that can be easily deployed and run on any host. This makes it easy to deploy applications in a consistent environment, regardless of the underlying infrastructure. Docker is currently the most popular tool for containerization, but alternatives such as Kubernetes and Apache Mesos are also worth considering.</p>\n</li>\n<li>\n<p>Infrastructure as code (IaC): IaC involves using code to automate the provisioning and management of infrastructure resources, such as servers, networking, and storage. This allows you to version control your infrastructure and makes it easier to reproduce and scale your environment. Some popular tools for IaC include Terraform, Ansible, and CloudFormation.</p>\n</li>\n<li>\n<p>Continuous integration (CI) and continuous delivery (CD): CI and CD are practices that involve automatically building, testing, and deploying code changes as they are made. This allows for faster and more reliable software delivery, as it reduces the risk of errors and makes it easier to roll back changes if necessary. Tools such as Jenkins, Travis CI, and CircleCI can help automate this process.</p>\n</li>\n<li>\n<p>Monitoring and logging: In order to effectively manage and troubleshoot a distributed system, it's important to have visibility into the various components and their behavior. This can be achieved through monitoring tools such as Datadog, New Relic, and Prometheus, which allow you to track key metrics and alerts in real-time. Additionally, logging tools such as Elasticsearch, Logstash, and Kibana (ELK stack) can help you collect and analyze log data from your applications and infrastructure.</p>\n</li>\n<li>\n<p>Collaboration and communication: DevOps is all about collaboration and communication, and there are a number of tools that can help facilitate this process. Tools such as Slack, Microsoft Teams, and Asana can help team members stay connected and share information in real-time. Additionally, code review tools such as GitHub, Bitbucket, and GitLab can help teams collaborate on code changes and ensure that code is of high quality before it is deployed.</p>\n</li>\n</ol>\n<p>By adopting these tools and practices, you can position yourself to be well-prepared for the demands of DevOps in 2023 and beyond. As always, it's important to keep an eye on emerging technologies and stay open to learning and adapting as the field evolves.</p>",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
            ],
            "date_published": "2022-12-26T03:24:09+05:30",
            "date_modified": "2022-12-26T03:44:33+05:30"
        },
        {
            "id": "https://techwhale.in/the-best-10-devops-tools-available-for-use-in-2023/",
            "url": "https://techwhale.in/the-best-10-devops-tools-available-for-use-in-2023/",
            "title": "The Best 10 DevOps Tools Available for Use in 2023",
            "summary": "Git: Git is a version control system that is widely used for software development and version control. It allows developers to track changes to their code and collaborate with team members on projects. Docker: Docker is a containerization platform that allows developers to package applications&hellip;",
            "content_html": "<ol>\n<li>\n<p>Git: Git is a version control system that is widely used for software development and version control. It allows developers to track changes to their code and collaborate with team members on projects.</p>\n</li>\n<li>\n<p>Docker: Docker is a containerization platform that allows developers to package applications and their dependencies into containers, which can then be easily deployed on any host.</p>\n</li>\n<li>\n<p>Jenkins: Jenkins is an open-source automation server that helps automate parts of the software development process. It can be used to build, test, and deploy software projects.</p>\n</li>\n<li>\n<p>Ansible: Ansible is an open-source configuration management tool that can be used to automate the deployment and management of applications and infrastructure.</p>\n</li>\n<li>\n<p>Kubernetes: Kubernetes is an open-source container orchestration platform that allows developers to deploy and manage containerized applications at scale.</p>\n</li>\n<li>\n<p>Nagios: Nagios is a popular open-source monitoring tool that can be used to monitor servers, applications, and network devices.</p>\n</li>\n<li>\n<p>Terraform: Terraform is an infrastructure as code (IAC) tool that allows developers to define and manage infrastructure resources using declarative configuration files.</p>\n</li>\n<li>\n<p>ELK Stack: The ELK Stack (Elasticsearch, Logstash, and Kibana) is a popular open-source log management platform that allows developers to collect, process, and visualize log data.</p>\n</li>\n<li>\n<p>Grafana: Grafana is an open-source visualization and monitoring platform that allows developers to create dashboards and alerts for their applications and infrastructure.</p>\n</li>\n<li>\n<p>Splunk: Splunk is a powerful log management and analysis platform that allows developers to search, analyze, and visualize log data in real-time.</p>\n</li>\n</ol>",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
            ],
            "date_published": "2022-12-26T03:21:22+05:30",
            "date_modified": "2022-12-26T03:21:22+05:30"
        },
        {
            "id": "https://techwhale.in/update-your-docker-compose-containers-easily-with-two-steps/",
            "url": "https://techwhale.in/update-your-docker-compose-containers-easily-with-two-steps/",
            "title": "Streamline Your Container Updates with Docker: A Step-by-Step Guide",
            "summary": "Updating your Docker containers can be a tedious and time-consuming process, especially if you have multiple containers running simultaneously. However, with the right tools and strategies in place, it's possible to streamline this process and make it much more efficient. Here are some steps you&hellip;",
            "content_html": "<p>Updating your Docker containers can be a tedious and time-consuming process, especially if you have multiple containers running simultaneously. However, with the right tools and strategies in place, it's possible to streamline this process and make it much more efficient.</p>\n<p>Here are some steps you can follow to easily update your Docker containers:</p>\n<ol>\n<li>\n<p>Identify the containers that need to be updated: Before you can update your containers, you'll need to identify which ones need updating. This can be done by running the \"docker ps\" command and looking for containers with outdated images.</p>\n</li>\n<li>\n<p>Pull the updated images: Once you've identified the containers that need updating, you can use the \"docker pull\" command to retrieve the updated images. This will ensure that you have the latest version of the image available.</p>\n</li>\n<li>\n<p>Stop and remove the old containers: To update a container, you'll need to stop and remove the old one first. You can do this with the \"docker stop\" and \"docker rm\" commands.</p>\n</li>\n<li>\n<p>Run the updated container: Once the old container has been stopped and removed, you can use the \"docker run\" command to start the updated container. Make sure to specify the updated image name and any necessary environment variables or command-line arguments.</p>\n</li>\n<li>\n<p>Repeat the process for all necessary containers: If you have multiple containers that need updating, simply repeat these steps for each one.</p>\n</li>\n</ol>\n<p> </p>\n<p>You can use following commands as an examples:</p>\n<ol>\n<li>Pull the updated images for your containers from the Docker registry. You can do this by running the following command:</li>\n</ol>\n<div class=\"bg-black mb-4 rounded-md\">\n<pre class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre-wrap hljs\">docker-compose pull\n</code></pre>\n</div>\n<ol start=\"2\">\n<li>Stop and remove the existing containers. You can do this by running the following command:</li>\n</ol>\n<div class=\"bg-black mb-4 rounded-md\">\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans\"> </div>\n<pre class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre-wrap hljs\">docker-compose down\n</code></pre>\n</div>\n<ol start=\"3\">\n<li>Recreate the containers using the updated images. You can do this by running the following command:</li>\n</ol>\n<div class=\"bg-black mb-4 rounded-md\">\n<pre>docker-compose up -d</pre>\n</div>\n<p>This will update the containers with the latest versions of the images and recreate them with the updated configuration.</p>\n<p>Alternatively, you can use the <code>--force-recreate</code> flag with the <code>up</code> command to force the recreation of the containers, even if their configuration has not changed.</p>\n<div class=\"bg-black mb-4 rounded-md\">\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans\"> </div>\n<pre class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre-wrap hljs language-css\">docker-compose up -d <span class=\"hljs-attr\">--force-recreate</span>\n</code></pre>\n</div>\n<p>By following these steps, you can easily update your Docker containers and ensure that you're running the latest and most secure versions. Happy containerizing!</p>",
            "image": "https://techwhale.in/media/posts/23/Untitled-Design-1.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Docker"
            ],
            "date_published": "2022-07-01T03:25:08+05:30",
            "date_modified": "2022-12-26T03:46:56+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-launch-traefik-reverse-proxy-using-docker-compose/",
            "url": "https://techwhale.in/how-to-launch-traefik-reverse-proxy-using-docker-compose/",
            "title": "How to launch Traefik reverse proxy using docker-compose?",
            "summary": "There is a growing demand for centralised, multi-domain, and secure application hosting in light of the proliferation of reverse proxy services. This is partly due to the accessibility of numerous open source projects that encourage experimentation. Therefore, Traefik is introduced as a reverse proxy, and&hellip;",
            "content_html": "<p>There is a growing demand for centralised, multi-domain, and secure application hosting in light of the proliferation of reverse proxy services. This is partly due to the accessibility of numerous open source projects that encourage experimentation.<br><br>Therefore, Traefik is introduced as a reverse proxy, and although there is much discussion about how easy it is to use, most users will find the documentation to be difficult to understand. Even though I am one of them, I have found a method to overcome my situation, and I hope to teach others to do the same.<br><br>I'm using Traefik as a reverse proxy to publish and secure services that are running in Docker containers because that's where most of the popular open source projects are housed. In this blog post, I'll show you how to use docker-compose to deploy Traefik 2 across many hosts on a local machine.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://techwhale.in/media/posts/21/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea.png\" alt=\"\" width=\"1024\" height=\"1024\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-xs.png 300w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-sm.png 480w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-md.png 768w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-lg.png 1024w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-xl.png 1360w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-2xl.png 1600w\"></figure>\n<p><br>If you're using Docker and want to utilize Traefik as a reverse proxy, you may use docker-compose to set up the Traefik container and any additional containers you'd like to run behind the proxy.</p>\n<p>Here is an example <code>docker-compose.yml</code> file that sets up Traefik as a reverse proxy:</p>\n<div class=\"bg-black mb-4 rounded-md\">\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans\" style=\"text-align: center;\"> </div>\n<pre class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre-wrap hljs language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">'3'</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">traefik:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">traefik:latest</span>\n    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">--api</span> <span class=\"hljs-string\">--docker</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"80:80\"</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"8080:8080\"</span>\n    <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/var/run/docker.sock:/var/run/docker.sock</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./traefik.toml:/etc/traefik/traefik.toml</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./acme.json:/acme.json</span>\n    <span class=\"hljs-attr\">networks:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">web</span>\n\n<span class=\"hljs-attr\">networks:</span>\n  <span class=\"hljs-attr\">web:</span>\n    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span>\n</code></pre>\n<div> </div>\n<div>This <code>docker-compose.yml</code> file does the following:</div>\n</div>\n<ul>\n<li>Defines a single service, named <code>traefik</code>, that runs the latest version of the Traefik Docker image.</li>\n<li>Exposes the Traefik dashboard on port 8080 and the default HTTP port (80) to the host machine.</li>\n<li>Mounts the Docker socket file as a volume, so that Traefik can listen for container events and update its configuration accordingly.</li>\n<li>Mounts a configuration file (<code>traefik.toml</code>) and an ACME JSON file (<code>acme.json</code>), which are used to configure Traefik's behavior and store SSL certificates, respectively.</li>\n<li>Creates a custom network named <code>web</code> and assigns the <code>traefik</code> service to it.</li>\n</ul>\n<p>To start Traefik and any other containers behind the proxy, run the following command:</p>\n<div class=\"bg-black mb-4 rounded-md\">\n<div class=\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans\"> </div>\n<pre class=\"p-4 overflow-y-auto\"><code class=\"!whitespace-pre-wrap hljs language-bash\">$ docker-compose up -d\n</code></pre>\n</div>\n<p>This will start the <code>traefik</code> service in the background (detached mode) and create any other necessary containers, as specified in the <code>docker-compose.yml</code> file.</p>\n<p>Note: The specific configuration options used in the <code>traefik.toml</code> file will depend on your specific needs and setup. You can find more information about how to configure Traefik in the <a href=\"https://docs.traefik.io/\" target=\"_new\">Traefik documentation</a>.</p>\n<p> </p>",
            "image": "https://techwhale.in/media/posts/21/Untitled-Design.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Docker",
                   "DevOps"
            ],
            "date_published": "2022-06-29T22:17:35+05:30",
            "date_modified": "2022-12-26T03:17:27+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-secure-your-site-from-sql-injection-exploits-and-spamming-agents-using-nginx/",
            "url": "https://techwhale.in/how-to-secure-your-site-from-sql-injection-exploits-and-spamming-agents-using-nginx/",
            "title": "How to secure your site from SQL Injection, Exploits and Spamming Agents using Nginx.",
            "summary": "Nginx is one of most popular web server that has so many features that even it may surprise you. One of best feature of Nginx that it has huge library of security policies that it makes your web-server absolute hacker-proof and you won't even need&hellip;",
            "content_html": "<p>Nginx is one of most popular web server that has so many features that even it may surprise you. One of best feature of Nginx that it has huge library of security policies that it makes your web-server absolute hacker-proof and you won't even need another tool to protect your sites.</p>\n<p>All your Nginx sites config can be import from another location so for clean code we are going to keep the security policies on a separate configuration file.</p>\n<p>Lets call our file a <span style=\"color: #3598db;\"><strong>security.conf</strong></span> under <strong>\"<span style=\"color: #f1c40f;\">/etc/nginx/</span>\"</strong></p>\n<p>There are variant of attacks can be done by attackers and famous attack types are listed down below,</p>\n<ul>\n<li>SQL Injection</li>\n<li>File Injection</li>\n<li>Spam</li>\n<li>User Agents</li>\n<li>Bandwidth Hogs and Hacking Tools</li>\n</ul>\n<p>Here's the <span style=\"color: #3598db;\"><strong>security.conf</strong></span> file content as follows,</p>\n<pre><code class=\"language-bash\">$ cd /etc/nginx</code></pre>\n<pre><code class=\"language-bash\">$ nano security.conf </code></pre>\n<p>Paste below code into the file and save the file using CTRL + X and ENTER.</p>\n<pre data-trimmed=\"true\"><code>##\n# Protection against SQL injection\n##\nlocation ~* \"(eval()\"  { deny all; }\nlocation ~* \"(127.0.0.1)\"  { deny all; }\nlocation ~*</code> \"([a-z0-9]{2000})\" <code>{ deny all; }\nlocation ~* \"(javascript:)(.*)(;)\"  { deny all; }\nlocation ~* \"(base64_encode)(.*)(()\"  { deny all; }\nlocation ~* \"(GLOBALS|REQUEST)(=|[|%)\"  { deny all; }\nlocation ~* \"(&lt;|%3C).*script.*(&gt;|%3)\" { deny all; }\nlocation ~ \"(|...|../|~|`|&lt;|&gt;||)\" { deny all; }\nlocation ~* \"(boot.ini|etc/passwd|self/environ)\" { deny all; }\nlocation ~* \"(thumbs?(_editor|open)?|tim(thumb)?).php\" { deny all; }\nlocation ~* \"('|\")(.*)(drop|insert|md5|select|union)\" { deny all; }\nlocation ~* \"(https?|ftp|php):/\" { deny all; }\nlocation ~* \"(='|=%27|/'/?).\" { deny all; }\nlocation ~ \"({0}|(/(|...|+++|\"\")\" { deny all; }\nlocation ~ \"(~|`|&lt;|&gt;|:|;|%||s|{|}|[|]||)\" { deny all; }\nlocation ~* \"/(=|$&amp;|_mm|(wp-)?config.|cgi-|etc/passwd|muieblack)\" { deny all; }\nlocation ~* \"(&amp;pws=0|_vti_|(null)|{$itemURL}|echo(.*)kae|etc/passwd|eval(|self/environ)\" { deny all; }\nlocation ~* \".(aspx?|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf)$\" { deny all; }\nlocation ~* \"/(^$|mobiquo|phpinfo|shell|sqlpatch|thumb|thumb_editor|thumbopen|timthumb|webshell).php\" { deny all; }\n##\n# Block SQL injections Attacks\n##\nset $block_sql_injections 0; if ($query_string ~ \"union.*select.*(\") { set $block_sql_injections 1; }\nif ($query_string ~ \"union.*all.*select.*\") { set $block_sql_injections 1; }\nif ($query_string ~ \"concat.*(\") { set $block_sql_injections 1; }\nif ($block_sql_injections = 1) { return 404; }\n##\n# Block File injections Attacks\n##\nset $block_file_injections 0;\nif ($query_string ~ \"[a-zA-Z0-9_]=http://\") { set $block_file_injections 1; }\nif ($query_string ~ \"[a-zA-Z0-9_]=(..//?)+\") { set $block_file_injections 1; }\nif ($query_string ~ \"[a-zA-Z0-9_]=/([a-z0-9_.]//?)+\") { set $block_file_injections 1; }\nif ($block_file_injections = 1) { return 404; }\n##\n# Block common bad exploits \n##\nset $block_common_exploits 0;\nif ($query_string ~ \"(&lt;|%3C).*script.*(&gt;|%3E)\") { set $block_common_exploits 1; }\nif ($query_string ~ \"GLOBALS(=|[|%[0-9A-Z]{0,2})\") { set $block_common_exploits 1; }\nif ($query_string ~ \"_REQUEST(=|[|%[0-9A-Z]{0,2})\") { set $block_common_exploits 1; }\nif ($query_string ~ \"proc/self/environ\") { set $block_common_exploits 1; }\nif ($query_string ~ \"mosConfig_[a-zA-Z_]{1,21}(=|%3D)\") { set $block_common_exploits 1; }\nif ($query_string ~ \"base64_(en|de)code(.*)\") { set $block_common_exploits 1; }\nif ($block_common_exploits = 1) { return 404; }\n##\n# Block SPAM Keywords\n##\nset $block_spam 0;\nif ($query_string ~ \"b(ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo)b\") { set $block_spam 1; }\nif ($query_string ~ \"b(erections|hoodia|huronriveracres|impotence|levitra|libido)b\") { set $block_spam 1; }\nif ($query_string ~ \"b(ambien|bluespill|cialis|cocaine|ejaculation|erectile)b\") { set $block_spam 1; }\nif ($query_string ~ \"b(lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby)b\") { set $block_spam 1; }\nif ($block_spam = 1) { return 404; }\n##\n# Block bad user agents\n##\nset $block_user_agents 0;\n# Don't disable wget if you need it to run cron jobs!\n#if ($http_user_agent ~ \"Wget\") { set $block_user_agents 1; }\n# Disable Akeeba Remote Control 2.5 and earlier\nif ($http_user_agent ~ \"Indy Library\") { set $block_user_agents 1; }\n##\n# Common bandwidth hoggers and hacking tools.\n##\nif ($http_user_agent ~ \"libwww-perl\") { set $block_user_agents 1; }\nif ($http_user_agent ~ \"GetRight\") { set $block_user_agents 1; }\nif ($http_user_agent ~ \"GetWeb!\") { set $block_user_agents 1; }\nif ($http_user_agent ~ \"Go!Zilla\") { set $block_user_agents 1; }\nif ($http_user_agent ~ \"Download Demon\") { set $block_user_agents 1; }\nif ($http_user_agent ~ \"Go-Ahead-Got-It\") { set $block_user_agents 1; }\nif ($http_user_agent ~ \"TurnitinBot\") { set $block_user_agents 1; }\nif ($http_user_agent ~ \"GrabNet\") { set $block_user_agents 1; }\nif ($block_user_agents = 1) { return 404; }\n##\n<br></code></pre>\n<p>Now, Go to the site-available folder and add the below line to running site configuration file to secure the site,</p>\n<p>For example, If you wish to protect the <a href=\"http://www.example.com.conf\">www.example.com.conf</a> then edit the file and add before closing \" } \" </p>\n<pre><code> include security.conf;</code></pre>\n<p>Since, security.conf file exists at /etc/nginx folder root path so you don't have to put whole file path.</p>\n<p>After these changes you will need to reload nginx configuration if everything is in order but before that verify Nginx configuration is working properly following this command,</p>\n<pre><code>$ sudo nginx -t</code></pre>\n<p>if output of above command shows this then it's mean all went OK...</p>\n<pre data-trimmed=\"true\"><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful</code></pre>\n<p>Next step is to reload Nginx service to see the effect of configuration we made in the website.</p>\n<pre><code>$ service nginx reload</code></pre>\n<p>Voila!! You're SET!!</p>",
            "image": "https://techwhale.in/media/posts/19/secure-nginx-server-2.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Tutorials",
                   "TechWhale Guides",
                   "Nginx"
            ],
            "date_published": "2021-07-20T01:07:56+05:30",
            "date_modified": "2022-07-25T00:13:00+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-create-swap-partition-on-aws-ec2-instance-for-ubuntu-2004/",
            "url": "https://techwhale.in/how-to-create-swap-partition-on-aws-ec2-instance-for-ubuntu-2004/",
            "title": "How to create Swap Partition on Ubuntu 20.04 and Debian 10",
            "summary": "On AWS, If you are using smaller instance type like t2.small and t3.small or any Digital Ocean instance you are using which requires more RAM resources then you know it won't be enough for your application and it's application performance will take hit. Since, We&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fav8m12l1g\">Create a File</a></li>\n<li><a href=\"#mcetoc_1fav8m12l1h\">Convert file into SWAP compatible file.</a></li>\n<li><a href=\"#mcetoc_1fav8m12l1i\">Mount SWAP File</a></li>\n<li><a href=\"#mcetoc_1fav8m12l1j\">Add SWAP at system boot entry.</a></li>\n</ul>\n</div>\n<p>On AWS, If you are using smaller instance type like t2.small and t3.small or any Digital Ocean instance you are using which requires more RAM resources then you know it won't be enough for your application and it's application performance will take hit.</p>\n<figure class=\"post__image post__image--center\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://arkit.co.in/wp-content/uploads/2016/07/swap-space-arkit.jpg\" alt=\"swap file system An Incredibly Easy Method That Works faster\" width=\"450\" height=\"188\" data-is-external-image=\"true\"></figure>\n<p>Since, We have SSD / NVMe Storage solutions which are very fast can be use as an alternative to operate as a RAM so we can create a SWAP partition which is basically tells Operating System to store CPU operation data on the disk partition when RAM space is not sufficient but SWAP partition is not fast as traditional RAM but it gets the job done with very little work.</p>\n<p>This article specifically made to help you to enable SWAP Partition to mount on the system for your instance or VPS.  Any Ubuntu or Debian based Linux operating system has same commands to set SWAP partition so you this guide will be useful for any debian based OS also for Ubuntu Desktop Users as well.</p>\n<h2 id=\"mcetoc_1fav8m12l1g\">Create a File</h2>\n<p>Consider, You got an instance or VPS of 2 vCore and 2 GB RAM.</p>\n<p>Use below command to create a 1 GB of Swap,</p>\n<pre><code>$ sudo dd if=/dev/zero of=/var/swapfile bs=1M count=1024</code></pre>\n<p>Above command will create a file \"swapfile\" in \"/var\" folder, but also learn what's the command actually doing,</p>\n<p>bs=1M count=1024 will create 1GB \"swapfile\", so you can change count if you want to use count as 2048, 4096 for 2GB and 4GB respectively.</p>\n<p>Alternative, Similar command you can use to create swapfile , </p>\n<pre>$ sudo fallocate -l 1G /var/swapfile</pre>\n<h2 id=\"mcetoc_1fav8m12l1h\">Convert file into SWAP compatible file.</h2>\n<p>Now, Let's convert this file into an actual swap,</p>\n<pre>$ sudo mkswap /var/swapfile</pre>\n<p>We almost done,</p>\n<h2 id=\"mcetoc_1fav8m12l1i\">Mount SWAP File</h2>\n<pre>$ sudo swapon /var/swapfile</pre>\n<p>Now we are done, We have mounted an swapfile into swap partition so CPU will use it if RAM storage is nearly full.</p>\n<p>You can check if swap partition properly mounted or not by using below command,</p>\n<pre>$ sudo swapon --show</pre>\n<h2><figure class=\"post__image post__image--center\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://techwhale.in/media/posts/18/aws-swap-file-2.png\" alt=\"aws-swapfile-ubuntu\" width=\"920\" height=\"107\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://techwhale.in/media/posts/18/responsive/aws-swap-file-2-xs.png 300w ,https://techwhale.in/media/posts/18/responsive/aws-swap-file-2-sm.png 480w ,https://techwhale.in/media/posts/18/responsive/aws-swap-file-2-md.png 768w ,https://techwhale.in/media/posts/18/responsive/aws-swap-file-2-lg.png 1024w ,https://techwhale.in/media/posts/18/responsive/aws-swap-file-2-xl.png 1360w ,https://techwhale.in/media/posts/18/responsive/aws-swap-file-2-2xl.png 1600w\"></figure></h2>\n<h2 id=\"mcetoc_1fav8m12l1j\">Add SWAP at system boot entry.</h2>\n<p>At times, When VPS or instance will get rebooted or at system boot, Swap partition will get unmounted if it's entry not added in system boot entry.</p>\n<p>Just add an entry to \"/etc/fstab\" file, Which System check if any partition needs to be mounted at boot.</p>\n<pre>$ echo \"/var/swapfile swap swap defaults 0 0\" | sudo tee -a /etc/fstab</pre>\n<p>That's it. You've just upgraded your server with a virtual RAM.</p>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://techwhale.in/media/posts/18/aws-swap-fstab.png\" alt=\"aws-swap-fstab\" width=\"905\" height=\"63\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://techwhale.in/media/posts/18/responsive/aws-swap-fstab-xs.png 300w ,https://techwhale.in/media/posts/18/responsive/aws-swap-fstab-sm.png 480w ,https://techwhale.in/media/posts/18/responsive/aws-swap-fstab-md.png 768w ,https://techwhale.in/media/posts/18/responsive/aws-swap-fstab-lg.png 1024w ,https://techwhale.in/media/posts/18/responsive/aws-swap-fstab-xl.png 1360w ,https://techwhale.in/media/posts/18/responsive/aws-swap-fstab-2xl.png 1600w\"></figure>\n<p>If you feel like a geek and really want to see summary of swap partition,</p>\n<pre>$ swapon --summary</pre>",
            "image": "https://techwhale.in/media/posts/18/how-to-create-swap-parition-ubuntu-204-3.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials"
            ],
            "date_published": "2021-07-19T17:07:26+05:30",
            "date_modified": "2021-07-19T19:46:07+05:30"
        },
        {
            "id": "https://techwhale.in/automate-smart-plug-to-charge-laptop-using-webhook-and-shell-script/",
            "url": "https://techwhale.in/automate-smart-plug-to-charge-laptop-using-webhook-and-shell-script/",
            "title": "Automate Smart Plug to charge laptop using Webhook and Shell Script.",
            "summary": "In the world of automation, it little gives me heebie-jeebies to turn on and off charging when needed cause I read that always plugged in charging will damage your laptop battery but since I'm using a laptop it always draws power so keeping on charging&hellip;",
            "content_html": "<p>In the world of automation, it little gives me heebie-jeebies to turn on and off charging when needed cause I read that always plugged in charging will damage your laptop battery but since I'm using a laptop it always draws power so keeping on charging all the time is good or bad that is debate we don't want to get in, so here we go..</p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1fani75hnn\">Get a SMART Switch</a></li>\n<li><a href=\"#mcetoc_1fani75hno\">Create an account on Sequematic</a></li>\n<li><a href=\"#mcetoc_1fani75hnp\">Write or Download Bash Script for an automation.</a></li>\n<li><a href=\"#mcetoc_1fani75hnq\">Cronjob for scheduled task run.</a></li>\n</ul>\n</div>\n<p>ASUS Laptop where they have inbuilt a hardware charging limit to 80% so I thought that it must be important that's why ASUS has done it. But now, the office gave me another working laptop which is DELL, and sadly given the model doesn't have a hardware charging limit available and while it's plugged and charging at full, sometimes laptop gets hot and its bad if you live in tropical area like myself. 😩</p>\n<p>Anyhow, You can see limiting the charging can increase your laptop's battery life a little better.</p>\n<figure class=\"align-center\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://www.xda-developers.com/files/2020/09/depth-of-charge.jpg\" alt=\"The ASUS ZenFone 7 and ROG Phone 3 support passthrough charging\" data-is-external-image=\"true\"></figure>\n<p>So here I have a problem so I thought, What if I can build a simple plug as a charger solution that can be turned automatically ON when charging gets low or reaches a set limit and it will get off when laptop charging reaches above 90%. and vice versa. So it a simple and fun to build this want to share this little project. 😎</p>\n<h4 id=\"mcetoc_1fani75hnn\">Get a SMART Switch</h4>\n<p>The first step is to get a wireless plug so I found the cheapest smart plug available on Amazon. which advertised as works with Alexa so without any research I thought it must work with everything. Boy! I was wrong but eventually, it worked out just fine, just went to my super helpful everyone's favourite friend who helped me to fix this kind of issue as always and you all know by its name \"google\". 🤓</p>\n<p>So this Solimo Smart Plug has this app called \"Smart Life\" to set up your device with your local centralized Wi-Fi router so you can talk to this \"IOT\" device from anywhere.</p>\n<p>https://amzn.to/354UpQW</p>\n<figure class=\"gmail-align-center align-center\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://images-na.ssl-images-amazon.com/images/I/51-Q1%2BQbCDL._SL1500_.jpg\" alt=\"Buy Amazon Brand - Solimo Smart Plug, 16A, Works with Alexa Online at Low  Prices in India - Amazon.in\" width=\"465\" height=\"465\" data-is-external-image=\"true\"></figure>\n<p>So I register myself on the app and proceed with usage turning ON and OFF.  Also, This app has multi-functionality like I can set it up like a timer but sadly I have to set up the timer again and again like Microwave or create a scene where I can connect to other services like location, temperature, etc. which is all fine but it's useless for the purpose and what I want to achieve.</p>\n<figure class=\"gmail-align-center align-center\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://www.ismartlife.me/images/ifttt@2x.png\" alt=\"Smart Life\" width=\"392\" height=\"436\" data-is-external-image=\"true\"></figure>\n<h4 id=\"mcetoc_1fani75hno\">Create an account on Sequematic</h4>\n<p>If you are familiar with IFTTT it's simply \"IF THIS THEN THAT\" and my project is all about that so I wanted to find an option to turn the plug state from my laptop whenever charging is necessary. Then I found out that I can turn on the device through Webhook, where I change the plug state as I want and the webhook is available on IFTTT. Then I searched in IFTTT if there's an applet available for \"Smart Life\" and found some applets.</p>\n<p>Great !! but then the PROBLEM occurred, where it showed my plug is unavailable in the applet settings so I search about it and found \"Smart Life\" broke ties with IFTTT so I search more than found out about another app called \"Brilliant Smart\" and really it's not that brilliant which turns out the same <br>Table of Contents<br>1. Get a SMART Switch<br>2. Create an account on Sequematic<br>3. Write or Download Bash Script for an automation.<br>4. Cronjob for scheduled task run.<br>Table of Contents<br>1. Get a SMART Switch<br>2. Create an account on Sequematic<br>3. Write or Download Bash Script for an automation.<br>4. Cronjob for scheduled task run.<br><br>failure as \"Smart Life\" then I went again for help on the internet and finally someone on Reddit said that there's another website which still can access \"Smart Life\" API and that site is \"<a href=\"https://sequematic.com/\" target=\"_blank\" rel=\"noopener noreferrer\">sequematic</a>\" which finally done all the work for me.</p>\n<p>Sequematic is really easy to set up so I created a step by creating a <a href=\"https://en.wikipedia.org/wiki/Webhook\" target=\"_blank\" rel=\"noopener noreferrer\">webhook</a> where I gave the state name as a \"turn_on\" and set parameter \"on\" and another step I have added a switch to turn on whenever a POST request on the web-hook is being sent.</p>\n<figure class=\"align-center\"><img decoding=\"async\" loading=\"lazy\"  src=\"https://www.fanjoe.be/wp-content/uploads/2020/06/SEQUEmatic-06.png\" alt=\"Lier Smart Life / Tuya à IFTTT après le 26 mai 2020 | Fanjoe&amp;#39;s website...\" data-is-external-image=\"true\"></figure>\n<p>In the above screenshot, you can see two sequences are created which are \"socket-switch-on\" and \"socket-switch-off\". In those sequences, two steps have been created.</p>\n<p>Cool !! Now my plug can be turned on from the internet using just a POST request. It was so simple so what now? How can I turn it on whenever my laptop needs charging?</p>\n<h4 id=\"mcetoc_1fani75hnp\">Write or Download Bash Script for an automation.</h4>\n<p>As always I wrote a very simple bash script [ Literally, It is very simple ], Check it out.</p>\n<pre>#!/bin/bash <br><br># get battery percentage <br><br>battery_current_charge=$(upower -i $(upower -e | grep '/battery') | grep --color=never -E percentage|xargs|cut -d' ' -f2|sed s/%//) <br><br># check if battery percentage with your set value, mine is 40 <br><br>if [[ $battery_current_charge -le \"40\" ]]; then <br><br># if you using Ubuntu then below notify command will show you notification notify-send \"Auto Charging\" \"Script Executed!\" <br>#This will trigger switch on if condition is satisfied <br><br>curl -X POST https://sequematic.com/trigger-ifttt-webhook/your-id//switch_on &gt;/dev/null 2&gt;&amp;1 <br>fi <br><br>if [[ $battery_current_charge -ge \"90\" ]]; then <br># This condition will turn off the charging when limit hit to 90 curl -X POST https://sequematic.com/trigger-ifttt-webhook/your-id//switch_off &gt;/dev/null 2&gt;&amp;1 <br>fi</pre>\n<p>So if you have some Linux experience then you can understand from the shell script that I have created two if conditions and in the first condition, it compares the current battery percentage to start the plug when the battery reaches below or equal to 40%.</p>\n<p>The second condition when the battery percentage reaches above or equal to 90% smart plug should automatically turn off.</p>\n<p>In the shell script, the URL taken from sequematic can change the plug state when the condition is satisfied so you need to replace both of your <a href=\"https://ifttt.com\">IFTTT</a> URLs from the sequematic link in the script.</p>\n<h4 id=\"mcetoc_1fani75hnq\">Cronjob for scheduled task run.</h4>\n<p>This is a simple task given in a simple script but how can this script know every time this battery value changes?</p>\n<p>As always, Linux has inbuilt tools like <a href=\"https://en.wikipedia.org/wiki/Cron\" target=\"_blank\" rel=\"noopener noreferrer\">Cron</a>, Where, I have given a timer to run this script for every 5 min to check battery percentage and the script will check its logic.</p>\n<p>Check out the below cronjob.</p>\n<p> </p>\n<pre>*/5 * * * * bash charge-battery-script.sh</pre>\n<p>Voila!! It worked like magic.</p>\n<hr>\n<p>I always use Ubuntu as my daily driver OS so it was a piece of cake for me to automate this process and if you want to do this on your Windows then, I suggest you should turn on <a href=\"https://docs.microsoft.com/en-us/windows/wsl/about\" target=\"_blank\" rel=\"noopener noreferrer\">WSL</a> Feature \"Windows Subsystem for Linux\" which of course enables Linux (Ubuntu) in your windows.</p>\n<p>I can think of many usages from this automation somethings like turn on smart lights or change the color of smart light, smart socket or plug activity from your laptop.</p>\n<p> </p>\n<address> Hope you found this article interesting and let us know your opinion if you have a way to improve it.</address>\n<blockquote>\n<p>Thank you for reading!</p>\n</blockquote>",
            "image": "https://techwhale.in/media/posts/15/Untitled-Design.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials",
                   "Tricks and Hack",
                   "Automation"
            ],
            "date_published": "2021-06-07T01:17:37+05:30",
            "date_modified": "2021-07-16T18:56:43+05:30"
        }
    ]
}
