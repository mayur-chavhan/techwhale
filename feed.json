{
    "version": "https://jsonfeed.org/version/1",
    "title": "TechWhale",
    "description": "",
    "home_page_url": "https://techwhale.in",
    "feed_url": "https://techwhale.in/feed.json",
    "user_comment": "",
    "icon": "https://techwhale.in/media/website/imageedit_19_3669952192.png",
    "author": {
        "name": "Mayur Chavhan"
    },
    "items": [
        {
            "id": "https://techwhale.in/smart-plug-on-web-hook-for-charging-laptop/",
            "url": "https://techwhale.in/smart-plug-on-web-hook-for-charging-laptop/",
            "title": "Smart Plug on Web-hook for charging laptop.",
            "summary": "Whenever my laptop charging gets full it always frustrates me to turn off charging cause i read somewhere keeping charging on 100% will damage your laptop battery. Past two years i used ASUS Laptops where they have inbuilt hardware charging limit to 80% so i&hellip;",
            "content_html": "<p>Whenever my laptop charging gets full it always frustrates me to turn off charging cause i read somewhere keeping charging on 100% will damage your laptop battery.</p>\n<p>Past two years i used ASUS Laptops where they have inbuilt hardware charging limit to 80% so i thought that it must be important that's why ASUS must have done it. Now, I have office laptop which is DELL and sadly it doesn't have charging limit and whenever i kept on charging at 100% it heats up so bad that whenever i type it gets very hot.</p>\n<p>So i though to myself if i can built a charger which can be turn automatically ON when charging gets low or reach to set limit and will gets off when laptop charging reaches 90% and turns out it was so much fun that i want to share this little project.</p>\n<p>Of course to turn switch ON and OFF, I must need to get a wireless plug so i found cheapest plug available on Amazon which advertised as works with Alexa so without any research i thought it must works with everything. Boy! i was soo wrong but eventually it worked out just fine cause i went to my only friend who helped me to fix this kinds of issue as always and helped me just fine. you all know by its name \"google\".</p>\n<figure class=\"align-center\"><img loading=\"lazy\"  src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcStuMpy1JKxo9emDbRWDg56_wETK1urFbEc3dhzvIXGXgihs09Mdu83PsHU47j_ljeFB7k&amp;usqp=CAU\" data-is-external-image=\"true\"  alt=\"Buy Amazon Brand - Solimo Smart Plug, 6A, Works with Alexa Online at Low  Prices in India - Amazon.in\"></figure>\n<p>So this Solimo Smart Plug has this app called \"Smart Life\" to setup your device with your local centralise Wi-Fi router so you can talk to this \"IOT\" device from anywhere.</p>\n<p>So i register myself on to the app and proceed with usage turning ON and OFF.  Also, This app has multi functionality like i can set it up like a timer but sadly i have to setup the timer again and again like Microwave or create a scene where i can connect to other services like location, temperature etc. which is all fine but it's useless for the purpose and what i want to achieve.</p>\n<p>If you are familiar with IFTTT so i wanted to find an option to turn plug state from my laptop whenever charging is necessary. Then i found out about i can turn on device through Webhook where i change plug state as i want and webhook is available on IFTTT. Then i search in IFTTT if there's an applets available for \"Smart Life\" and found some applets. Great !! but then the PROBLEM occurred, where it doesn't show my switch in the applet settings so i search about it and found \"Smart Life\" broke ties with IFTTT so i search more then found out about another app called \"Brilliant Smart\" and trust me they are calling them smart is really opposite of that which turns out same failure as \"Smart Life\" then i went again for help on internet and finally someone on Reddit said that there's an another website which still can access \"Smart Life\" API and that site is \"https://sequematic.com\" which finally worked out.</p>\n<p>Sequematic really easy to setup so i create a step by creating a webhook where i gave state name as a \"turn_on\" and set parameter \"on\" and another step i have added switch to turn on whenever a POST request on web-hook is being sent.</p>\n<p><img loading=\"lazy\" src=\"https://i.imgur.com/rly9gyt.png\" data-is-external-image=\"true\" ></p>\n<p>As above screenshot you can see two sequences is created which is \"socket-switch-on\" and \"socket-switch-off\". In those sequence you two steps has been created.</p>\n<p><img loading=\"lazy\" src=\"https://i.imgur.com/3Joe0s6.png\" data-is-external-image=\"true\" ></p>\n<p>Cool !! Now my plug can be turn on from internet using just a POST request. It was so simple so what now? How can i turn on whenever my laptop needs charging ?</p>\n<p>Since, i'm always use Ubuntu as my main OS so it was a piece of cake for me to automate this process and if you want to do this on your Windows then i suggest you should turn on WSL Feature \"Windows Subsystem for Linux\" which of course enables Linux (Ubuntu) in your windows.</p>\n<p>As always i wrote a very simple bash script [ Literally, It is very simple ], Check it out.</p>\n<pre>#!/bin/bash<br><br># get battery percentage<br><br>battery_current_charge=$(upower -i $(upower -e | grep '/battery') | grep --color=never -E percentage|xargs|cut -d' ' -f2|sed s/%//)<br><br># check if battery percentage with your set value, mine is 40<br>if [[ $battery_current_charge -le \"40\" ]]; then<br><br># if you using Ubuntu then below notify command will show you notification<br><br>notify-send \"Auto Charging\" \"Script Executed!\"<br><br>#This will trigger switch on if condition is satisfied <br>curl -X POST https://sequematic.com/trigger-ifttt-webhook/your-id/your-key/switch_on &gt;/dev/null 2&gt;&amp;1<br><br>fi<br><br>if [[ $battery_current_charge -ge \"90\" ]]; then<br><br># This condition will turn off the charging when limit hit to 90<br>curl -X POST https://sequematic.com/trigger-ifttt-webhook/your-id/your-key/switch_off &gt;/dev/null 2&gt;&amp;1<br><br>fi</pre>\n<p>So if you have some linux experience then you can understand from the shell script that i have created two if conditions and in first condition i have compared to start the plug when battery reaches 40%.</p>\n<p>Second condition where battery reaches 90% plug should automatically turn off.</p>\n<p>I have used this script and put it in cronjob where i have given timer to run this script for every 5 min to check battery percentage so if battery reaches below 40% the plug will be turn on and if battery reaches 90% then it will turn off automatically. </p>\n<pre>*/5 * * * * bash /home/mayur/charge-battery-script.sh</pre>\n<p> </p>\n<p>Voila!! It worked like a magic.</p>\n<p> </p>\n<address>Hope it helps someone and let us know your opinion if you have a way to improve it.</address>\n<blockquote>\n<p>Thank you for reading!</p>\n</blockquote>",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
            ],
            "date_published": "2021-06-07T01:17:37+05:30",
            "date_modified": "2021-06-07T01:33:01+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-portainer-on-linux-os-ubuntu-debian-centos-raspbian/",
            "url": "https://techwhale.in/how-to-install-portainer-on-linux-os-ubuntu-debian-centos-raspbian/",
            "title": "How to install Portainer on Linux OS (Ubuntu, Debian, CentOS, Raspbian)",
            "summary": " Replace your public ip address in above field and if you are running docker in your private machine then put your private IP like : 192.168.0.10:9000,192.168.1.10:9000 and so on.. To check if portainer is running on your host machine simply run below command, sudo&hellip;",
            "content_html": "\n  <p id=\"overviewbr\">\n    <br>\n  </p>\n\n  <div class=\"post__toc\">\n    <h3>Index:</h3>\n    <ul>\n      <li><a href=\"#overviewbr\">Overview:<br></a></li><li><a href=\"#installationbr\">Installation.<br></a></li><li><a href=\"#acess-portainer-gui\">Acess Portainer GUI</a></li><li><a href=\"#portainer-docker-processnbsp\">Portainer Docker Process&nbsp;</a></li><li><a href=\"#update-portainer\">Update Portainer</a></li>\n    </ul>\n  </div>\n  \n\n    <h2 id=\"overviewbr\">\n      Overview:<br>\n    </h2>\n\n  <p>\n    Portainer is docker web GUI application in where you can manage all your docker containers, Images and Volumes. It offers more features than just showing docker containers but you can even manage other docker nodes in one Portainer application.&nbsp;<br>\n  </p>\n\n  <p>\n    This guide will show you how easy is to install Portainer on any linux machines but before that you need to keep in mind that it needs some preparation before installing it.&nbsp;\n  </p>\n\n  <p>\n    There are two method is to install Portainer but this guide  will show you the easiest one.\n  </p>\n\n    <h2 id=\"installationbr\">\n      Installation.<br>\n    </h2>\n\n  <p>\n    The easiest method to install Portainer is of course is docker. To manage Docker, you need to deploy a docker container that contains Portainer binary and it access host docker process file to get all information what are docker containers with volumes are running.\n  </p>\n\n  <p>\n    Check out our guide on how to install Docker on Linux so you can install Portainer.\n  </p>\n\n  <p>\n    Now, Here we go, To Install Portainer here is this one line command that simply pulls up the Portainer image.\n  </p>\n\n  <p>\n    <mark>sudo docker run --name portainer --restart=unless-stopped -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</mark>\n  </p>\n\n  <p>\n    In this line of command, We specified docker name \"portainer\" and port in which Portainer Docker can be accessible to the public network. Which in this case is port \"<strong>9000</strong>\"\n  </p>\n\n  <ul>\n    <li>\"-v portainer_data\" is host location where on the Docker Host the Portainer data.</li><li>\"-v /var/run/docker.sock\" is Docker process where portainer can access all information and control docker applications.</li><li>\"portainer/portainer\" is the official docker image which will get pull from official Docker repository.</li>\n  </ul>\n\n    <h2 id=\"acess-portainer-gui\">\n      Acess Portainer GUI\n    </h2>\n\n  <p>\n    Now, Go to the browser and put Docker Host Server IP in there like this:\n  </p>\n<div>http://[public-ip-address]:9000</div>\n\n  <p>\n    Replace your public ip address in above field and if you are running docker in your private machine then put your private IP like : <strong>192.168.0.10:9000,192.168.1.10:9000</strong> and so on..\n  </p>\n\n    <h2 id=\"portainer-docker-processnbsp\">\n      Portainer Docker Process&nbsp;\n    </h2>\n\n  <p>\n    To check if portainer is running on your host machine simply run below command,\n  </p>\n\n  <p>\n    sudo docker ps\n  </p>\n\n  <p>\n    <strong>Command Output:</strong>\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>docker ps\nCONTAINER ID        IMAGE                                COMMAND             CREATED             STATUS              PORTS                                                               NAMES\n9a83bdecfc56        portainer/portainer                  \"/portainer\"        2 hours ago         Up 2 hours          0.0.0.0:8000-8000/tcp, 0.0.0.0:9000-&gt;9000/tcp                      portainer</code></pre>\n\n  <p>\n    Above output it shows that it exposes application to port 8000 and port 9000 but we use 9000 to access Portainer GUI.\n  </p>\n\n    <h2 id=\"update-portainer\">\n      Update Portainer\n    </h2>\n\n  <p>\n    If you want to update Docker of Portainer then simple run these following commands,\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo docker pull portainer/portainer</code></pre>\n\n  <p>\n    Above command will pull the latest image from official docker repository but it will not update the current running Portainer Docker so we will stop the running container so it will use updated image.\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo docker stop portainer </code></pre>\n\n  <p>\n    Here we have stopped our Portainer container and if you seem to notice we don't have to use docker id to stop portainer container but we used \"portainer\" name and this happened because we gave our docker container a name called \"portainer\" so using a name for container is makes easy to manage like stop and run the container.\n  </p>\n\n  <p>\n    Now, Delete old Portainer image to replace updated one.\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo docker rm portainer \n</code></pre>\n\n  <p>\n    Above command will delete only image but not the volume where we are keeping our Portainer data.\n  </p>\n\n  <p>\n    Re-run the docker portainer command to launch portainer with updated image at same volume and exposed ports we have given before.\n  </p>\n<pre class=\"line-numbers  language-bash\"><code>sudo docker run --name portainer --restart=unless-stopped -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer \n</code></pre>\n\n  <p>\n    Check again for docker process and if it's running then we are good to know. Hope this guide helped you.\n  </p>\n\n    <figure class=\"blockquote\">\n      <blockquote>Thank you for reading!</blockquote>\n      <figcaption>Mayur Chavhan</figcaption>\n    </figure>",
            "image": "https://techwhale.in/media/posts/10/Annotation-2020-06-25-082542-min-compressed.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Tutorials",
                   "Docker"
            ],
            "date_published": "2020-06-15T13:03:08+05:30",
            "date_modified": "2021-06-07T00:04:56+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-nginx-proxy-manager-on-raspberry-pi-4-arm64/",
            "url": "https://techwhale.in/how-to-install-nginx-proxy-manager-on-raspberry-pi-4-arm64/",
            "title": "How to install &quot;Nginx Proxy Manager&quot; on Raspberry Pi 4 [arm64]",
            "summary": " Overview: In DevOps deployments Reverse Proxy is very common for port routing in backend applications. One of the popular is Traefik. Similar to Traefik there are HAproxy and Nginx. HAproxy which is known for Server Load Balancer but also can be used as a&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1eal5n5a90\">Overview:</a></li>\n<li><a href=\"#mcetoc_1eal5nqjb5\">Prerequisite:</a></li>\n<li><a href=\"#mcetoc_1eal5oajo7\">Step-1: Create folders.</a></li>\n<li><a href=\"#mcetoc_1eal5q1579\">Step-2: Create a file called \"config.json\"</a></li>\n<li><a href=\"#mcetoc_1eal5qq5ba\">Step-3: Create Docker-Compose File</a></li>\n<li><a href=\"#mcetoc_1eal5rduib\">Step-5: Run Docker-Compose File</a></li>\n<li><a href=\"#mcetoc_1eal5s74vc\">Step-6: Login to NPMan dashboard</a></li>\n</ul>\n</div>\n<h2 id=\"mcetoc_1eal5n5a90\">Overview:</h2>\n<p><span style=\"font-weight: 400;\">In DevOps deployments Reverse Proxy is very common for port routing in backend applications. One of the popular is <a href=\"https://containo.us/traefik/\" target=\"_blank\" rel=\"noopener noreferrer\">Traefik</a>. Similar to Traefik there are HAproxy and Nginx.</span></p>\n<p><span style=\"font-weight: 400;\"><a href=\"http://www.haproxy.org/\" target=\"_blank\" rel=\"noopener noreferrer\">HAproxy </a>which is known for Server Load Balancer but also can be used as a reverse proxy.</span></p>\n<p><span style=\"font-weight: 400;\">Nginx is the fastest web server that can also be used as a reverse proxy for backend applications. </span></p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://i.imgur.com/0hZKBEF.png\" data-is-external-image=\"true\"  alt=\"Reverse-Proxy\" width=\"1137\" height=\"286\"></figure>\n<p><span style=\"font-weight: 400;\">All these three are excellent and popular reverse proxies used in servers but all these have one common problem: they need to write configuration files and it's not noobie server admin friendly since it involves years of experience to understand how exactly reverse proxy works. In Nginx and HAproxy, When you need to install SSL certificates for domai, It makes the configuration a little complicated and tiresome where in Traefik, It automatically handles domain certificates which makes Traefik awesome.</span></p>\n<p><span style=\"font-weight: 400;\">When i started learning Traefik it took few months for me to get a proper grip on its configuration and i learned on old Traefik version and when new Traefik versions came out then i have to read their documentation for new version changes plus then i have to added new changes to docker-compose file so my docker container can properly communicate with Traefik routing which adds big sigh for me. Don't get me wrong Traefik is still best for reverse proxy and if you can write Bash and Ansible Yaml scripts to automate with docker or backend applications then you're golden.</span><span style=\"font-weight: 400;\">Where \"Jamie Curnow\" aka \"</span><a href=\"https://jc21.com/\"><span style=\"font-weight: 400;\">jc21</span></a><span style=\"font-weight: 400;\">\" did all these three things in a single docker GUI application called \"Nginx Proxy Manager '' In which you can easily bind backend applications without writing a single line of code. Which makes it easy enough for newbie server admin also for Developers who don’t need to learn reverse proxy complex configurations.</span></p>\n<p>This installation can run same for any linux distros out there also docker image file also supports architecture for <a href=\"https://en.wikipedia.org/wiki/ARM_architecture\" target=\"_blank\" rel=\"noopener noreferrer\">armhf and arm64</a> so it can easily run on Raspberry Pi 3B and 4B without any issue. I personally used Raspbian Lite for testing purpose and it works well.</p>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://i.imgur.com/urx8Zmg.png\" data-is-external-image=\"true\"  alt=\"Nnginx-Proxy-Manager\" width=\"593\" height=\"224\">\n<figcaption >Nginx-Proxy-Manager</figcaption>\n</figure>\n<h2 id=\"mcetoc_1eal5nqjb5\"><strong>Prerequisite:</strong></h2>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Docker_(software)\" target=\"_blank\" rel=\"noopener noreferrer\">Docker </a></li>\n<li><strong>Docker-Compose</strong></li>\n<li>[Optional] <strong><a href=\"https://www.portainer.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Portainer</a></strong></li>\n</ol>\n<h2 id=\"mcetoc_1eal5oajo7\">Step-1: <strong>Create folders.</strong></h2>\n<pre>sudo mkdir npman</pre>\n<p>Inside NPman folder create these three folders [data, data/mysql and letsencrypt] or run below command,</p>\n<pre>sudo mkdir -p npman/{data/mysql,letsencrypt}</pre>\n<h2 id=\"mcetoc_1eal5q1579\"><strong>Step-2: </strong><strong>Create a file called \"config.json\"</strong></h2>\n<p id=\"mcetoc_1eal64sejd\"><strong>paste below lines of code into it.</strong></p>\n<pre>{\n  \"database\": {\n    \"engine\": \"mysql\",\n    \"host\": \"db\",\n    \"name\": \"DBNAME\",\n    \"user\": \"DBUSERNAME\",\n    \"password\": \"DBPASSWORD\",\n    \"port\": 3306\n  }</pre>\n<h2 id=\"mcetoc_1eal5qq5ba\">Step-3: Create Docker-Compose File</h2>\n<p><strong>Now, Create a file called \"docker-compose.yaml\" and paste following code into it.</strong></p>\n<p class=\"msg msg--info\">Source: <a href=\"https://github.com/jeff89179\">https://github.com/jeff89179</a> [ Thanks to him]</p>\n<p> </p>\n<pre data-enlighter-language=\"yaml\">version: '2'\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    restart: always\n    ports:\n      - '80:80'\n      - '443:443'\n      - '81:81'\n    volumes:\n      - './config.json:/app/config/production.json'\n      - './data:/data'\n      - './letsencrypt:/etc/letsencrypt'\n    depends_on:\n      - db\n  db:\n    image: 'yobasystems/alpine-mariadb:latest'\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: npman\n      MYSQL_DATABASE: npman\n      MYSQL_USER: npman\n      MYSQL_PASSWORD: password\n    volumes:\n      - './data/mysql:/var/lib/mysql'</pre>\n<address class=\"msg msg--info\"> Change MySQL password for production security purpose.</address>\n<h2 id=\"mcetoc_1eal5rduib\">Step-5: Run Docker-Compose File</h2>\n<p> </p>\n<p><strong>Run Docker-Compose command to download docker images and services,</strong></p>\n<pre><strong>sudo docker-compose up -d</strong></pre>\n<p>If you have Portainer running then go into the Portainer UI, And in the Stacks, add a new stack named \"NPMan\" and paste above docker-compose code and deploy it.</p>\n<p>After deployment check if container health and port are showing like this..</p>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://i.imgur.com/TvK1WNK.png\" data-is-external-image=\"true\"  alt=\"Portainer-Nginx-Proxy-Manager\" width=\"1901\" height=\"328\"></figure>\n<h2 id=\"mcetoc_1eal5s74vc\">Step-6: Login to NPMan dashboard</h2>\n<address>Go to browser and replace &lt;&lt;docker-host-server-ip&gt;&gt; to docker host server ip like this,</address><address><br><a href=\"http://&lt;&lt;docker-host-serve-ip&gt;&gt;:81/login\">http://&lt;&lt;docker-host-server-ip&gt;&gt;:81/login</a></address>\n<p><img loading=\"lazy\" src=\"https://i.imgur.com/4RE3JjY.png\" data-is-external-image=\"true\" ></p>\n<p>If everything goes right then enter below default credentials,</p>\n<p><strong>Credential for NPMan,</strong></p>\n<p> </p>\n<address class=\"msg msg--highlight  msg--success\"><span style=\"text-decoration: underline;\">Email</span>: <a href=\"mailto:admin@example.com\">admin@example.com</a><br><br><span style=\"text-decoration: underline;\">Password</span>: changeme</address>\n<p>Visit our repository has all codes in this tutorial,</p>\n<p class=\"msg msg--success msg--highlight  post__lead\">https://github.com/mayur-chavhan/Nginx-Proxy-Manager</p>\n<p> </p>\n<p>Cheers!</p>\n<blockquote>\n<p>Thank you for reading</p>\n</blockquote>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>",
            "image": "https://techwhale.in/media/posts/8/imageedit_31_2317095391.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Tutorials",
                   "TechWhale Guides",
                   "Docker"
            ],
            "date_published": "2020-06-13T01:03:53+05:30",
            "date_modified": "2021-06-07T00:07:34+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-setup-user-ssh-keys-on-ubuntu-1804/",
            "url": "https://techwhale.in/how-to-setup-user-ssh-keys-on-ubuntu-1804/",
            "title": "How to setup user SSH Keys on Ubuntu 18.04",
            "summary": " Overview SSH [ Secure Shell ] is a famous encrypted protocol are widely becoming popular for communicate server access. For security purpose SSH provide lot of features and one of the famous is SSH Keys and for some its complicated and mostly biased to&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1e91n65hn3\">Overview</a></li>\n<li><a href=\"#mcetoc_1e91n560l2\">Step 1 : Generate a RSA Key Pair on your machine.</a></li>\n<li><a href=\"#mcetoc_1e91n4u7m1\">Step 2 : Copy SSH Public Key to remote server.</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1e91n65hn3\">Overview</h3>\n<p><strong>SSH</strong> [ Secure Shell ] is a famous encrypted protocol are widely becoming popular for communicate server access. For security purpose SSH provide lot of features and one of the famous is SSH Keys and for some its complicated and mostly biased to use SSH password method.</p>\n<p>Cloud Service providers like AWS and GCP are default using ssh key method before creating any Instance. So they can generate SSH keys for you and you can download it for you to access it remotely. But other server provider mostly generate and provide you SSH password.</p>\n<p>SSH Password method is secured but password can be bruteforce by millions of bots are out there for cracking passwords and who knows if someone has supercomputer who can break your password within minutes but fear not cause SSH key to the rescue.</p>\n<p>In reality, SSH Keys gives an easy and perfectly secure way to connect your remote server and one SSH key can be use for multiple users.</p>\n<p>In this tutorial, How we can setup user ssh keys for Ubuntu 18.04 but it also applicable to any linux OS.</p>\n<p>For this example we will take a remote server which enabled with SSH password authentication and applying SSH Key based authentication.</p>\n<p>Before communication with remote server we have to do following steps.</p>\n<h3 id=\"mcetoc_1e91n560l2\">Step 1 : Generate a RSA Key Pair on your machine.</h3>\n<table style=\"width: 693.156px; background-color: yellow;\" border=\"7\">\n<tbody>\n<tr>\n<td class=\"align-center\" style=\"width: 28px;\"><span style=\"color: #843fa1;\"><strong>$</strong></span></td>\n<td style=\"width: 660.156px;\"><address><span style=\"color: #843fa1;\"><strong>ssh-keygen</strong></span></address></td>\n</tr>\n</tbody>\n</table>\n<p>Above command will generate 2048 bit RSA key pair consists of public and private keys. [ id_rsa and id_rsa.pub ] When you run ssh-keygen command it will ask for custom path to store your keys but for now default location is shown in below image.</p>\n<p><img loading=\"lazy\" src=\"https://i.imgur.com/NFHy3XT.png\" data-is-external-image=\"true\" ></p>\n<p><strong> Press enter to select default path for RSA keys.</strong></p>\n<p>Next, You should then see the following prompt:</p>\n<p class=\"msg msg--highlight \">Enter passphrase (empty for no passphrase):</p>\n<p>Additional security if you want to protect your SSH key using passphrase and empty for no passphrase so when you establish remote connection it will not ask for password everytime but its highly recommended that you should use passphrase and it gives more security and that's what we need.</p>\n<p><img loading=\"lazy\" src=\"https://i.imgur.com/DQska4v.png\" data-is-external-image=\"true\" ></p>\n<p> Here's the result after creation of the key</p>\n<p class=\"msg msg--success\"><strong>Your identification has been saved in /your_home/.ssh/id_rsa.</strong><br><br><strong>Your public key has been saved in /your_home/.ssh/id_rsa.pub.</strong><br><br><strong>The key fingerprint is:</strong><br><strong>SHA256:tQX64BUmMF2BY1wUSTdeJEYQQUjFIf9wrUAz0RJlaU4 user@remote-server</strong><br><strong>The key's randomart image is:</strong><br><strong>+---[RSA 2048]----+</strong><br><strong>| o=+@^#Ooo |</strong><br><strong>| .BB+XE= |</strong><br><strong>| .o.*=+ . |</strong><br><strong>| . = B.. |</strong><br><strong>| S o o |</strong><br><strong>| |</strong><br><strong>| |</strong><br><strong>| |</strong><br><strong>| |</strong><br><strong>+----[SHA256]-----+</strong></p>\n<p> </p>\n<p> And at this path you'll find ssh keys as follows,</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://i.imgur.com/xhRQmXn.png\" data-is-external-image=\"true\"  alt=\"ssh-key-path\" width=\"689\" height=\"236\"></figure>\n<p> That's it, Now you've generated public and private ssh key on your machine. Next step is very easy and we have to copy our public key to remote server so we can SSH Key based authentication for SSH.</p>\n<h3 id=\"mcetoc_1e91n4u7m1\">Step 2 : Copy SSH Public Key to remote server.</h3>\n<p>Now we have SSH public key which can authenticate remote machine from our host machine. There is fastest method to copy public key ID to remote host is simple tool called <strong>\"ssh-copy-id\" </strong></p>\n<p>Simple yet very useful for copying public ssh key to remote host. Remote host must have enabled password authentication so once public key authentication is done. Later, We can disable password authentication so only gateway to access your server is SSH Key authentication.</p>\n<p class=\"msg msg--highlight  msg--success\"><strong>ssh-copy-id <a href=\"mailto:user@remote_server\">user@remote_server</a></strong></p>\n<p><strong>[OPTIONAL] - SSH Public Key for Custom Include Key Path</strong></p>\n<p>If you have SSH Key available on different path you can use add include path parameter like this</p>\n<p class=\"msg msg--highlight  msg--success\"><strong>ssh-copy-id -i /ssh-key-folder/sshpub.key <a href=\"mailto:user@remote_server\">user@remote_server</a></strong></p>\n<p><strong>[OPTIONAL] - SSH Public Key for Custom Port</strong></p>\n<p class=\"msg msg--highlight  msg--success\"><strong>ssh-copy-id -p 5500 <a href=\"mailto:user@remote_server\">user@remote_server</a></strong></p>",
            "image": "https://techwhale.in/media/posts/6/image-0-compressed.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials",
                   "TechWhale Guides"
            ],
            "date_published": "2020-05-23T16:53:11+05:30",
            "date_modified": "2020-06-30T17:22:43+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-docker-and-docker-compose-on-ubuntu-1804/",
            "url": "https://techwhale.in/how-to-install-docker-and-docker-compose-on-ubuntu-1804/",
            "title": "How to install docker and docker-compose on Ubuntu 18.04",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1e8pdg7j87\">Overview</a></li>\n<li><a href=\"#mcetoc_1e8pcknm71\"> Update System</a></li>\n<li><a href=\"#mcetoc_1e8pcknm73\">Install Prerequisite Packages</a></li>\n<li><a href=\"#mcetoc_1e8pcknm74\">Add Docker Repositories</a></li>\n<li><a href=\"#mcetoc_1e8pcknm75\">Install Docker on Ubuntu 18.04</a></li>\n<li><a href=\"#mcetoc_1e8pcknm76\">Start Docker</a></li>\n</ul>\n</div>\n<hr>\n<h3 id=\"mcetoc_1e8pdg7j87\">Overview</h3>\n<figure class=\"post__image post__image--center\" ><img loading=\"lazy\" src=\"https://techwhale.in/media/posts/5/docker-cloud-twitter-card.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-xs.png 300w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-sm.png 480w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-md.png 768w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-lg.png 1024w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-xl.png 1360w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-2xl.png 1600w\"  alt=\"Docker-Image\" width=\"1586\" height=\"600\">\n<figcaption >Docker Container Image</figcaption>\n</figure>\n<p> </p>\n<p id=\"1cd8\" class=\"dropcap\" data-selectable-paragraph=\"\">Docker is an application that makes it simple and easy to run application processes in a container, which are like virtual machines, but more small, more resource-friendly, and more dependent on the host OS Kernel.</p>\n<p data-selectable-paragraph=\"\">Docker-Compose in other hand is more advanced but fairly makes easy if you want to add multiple docker containers and services working together as a one using a single file. YML / YAML is language is used to create docker-compose file.</p>\n<p data-selectable-paragraph=\"\">You’ll learn how to install and use it on an existing installation of Ubuntu 18.04.</p>\n<p class=\"msg msg--info\" data-selectable-paragraph=\"\"> Docker requires a 64-bit version of Ubuntu also a kernel version requires to greater than 3.10.X</p>\n<p>Ubuntu 18.04 doesn't comes with Docker official repository so we are going to add it and install it. Let's start with process to install Docker and Docker-Compose.</p>\n<h3 id=\"mcetoc_1e8pcknm71\"> Update System</h3>\n<p>First and most important is to update the system to keep all packages up to date so we don't run with outdated dependencies.</p>\n<p>Run the following commands:</p>\n<p class=\"msg msg--highlight \"><strong>sudo apt update -qq -y</strong></p>\n<h3 id=\"mcetoc_1e8pcknm73\">Install Prerequisite Packages</h3>\n<p>Once we have updated the system, we need to install some necessary packages before we are ready to install Docker. You can do this with the help of a single command:</p>\n<p class=\"msg msg--highlight \"><strong>sudo apt-get install curl apt-transport-https ca-certificates software-properties-common -qq -y </strong></p>\n<h3 id=\"mcetoc_1e8pcknm74\">Add Docker Repositories</h3>\n<p>Following steps is to add Docker Key and Repository to officially supported method for the Docker installation.</p>\n<p>Add the GPG key using following command in terminal:</p>\n<p class=\"msg msg--highlight \"><strong>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</strong></p>\n<p>Next, Add the repository:</p>\n<p class=\"msg msg--highlight \"><strong>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"</strong></p>\n<p>Update the repository information:</p>\n<p class=\"msg msg--highlight \"><strong>sudo apt update -y</strong></p>\n<h3 id=\"mcetoc_1e8pcknm75\">Install Docker on Ubuntu 18.04</h3>\n<p>We are almost close. Use apt command to install Docker:</p>\n<p class=\"msg msg--highlight \"><strong>sudo apt install docker-ce -y</strong></p>\n<h3 id=\"mcetoc_1e8pcknm76\">Start Docker</h3>\n<p>Once the installation is complete, Start the docker to enable the service:</p>\n<p class=\"msg msg--highlight \"><strong>sudo systemctl start docker</strong></p>\n<p>Check the service using below command if docker service is active or not.</p>\n<p class=\"msg msg--highlight \"><strong>sudo systemctl status docker</strong></p>\n<p><br>If all goes well then pat yourself in the back. Docker is installed on your Ubuntu machine. Now, Lets install Docker-Compose which is very easy now since we have docker installed on the machine.</p>\n<div class=\"uncode_text_column\">\n<p>Check if you have curl installed in your machine.</p>\n<p>If not then install curl using following command:</p>\n<p class=\"msg msg--highlight \"><strong>sudo apt install curl</strong></p>\n</div>\n<div class=\"heading-text el-text\">\n<h3 id=\"mcetoc_1e8pepps7a\" class=\"h3\"><span id=\"htoc-download-the-latest-docker-compose-version\">Install Latest Docker Compose</span></h3>\n</div>\n<div class=\"clear\"> </div>\n<div class=\"uncode_text_column\">\n<ol>\n<li>To download the latest version of Docker Compose, run below command:</li>\n</ol>\n<p class=\"msg msg--highlight \"><strong>sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose</strong></p>\n<p>At the time this article was written, Docker Compose 1.25.5 is the latest version but if you want to change latest version go to this release page.</p>\n<p class=\"msg msg--info\"><strong>https://github.com/docker/compose/releases</strong></p>\n<br>\n<p>2. Give executable permission to docker-compose at installed location:</p>\n<p class=\"msg msg--highlight \"><strong>sudo chmod +x /usr/local/bin/docker-compose</strong></p>\n<p> That's it, Now you've successfully installed docker-compose on your Ubuntu 18.04, Easy isn't it? </p>\n</div>",
            "image": "https://techwhale.in/media/posts/5/Webp.net-compress-image-2.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials",
                   "TechWhale Guides",
                   "Docker"
            ],
            "date_published": "2020-05-20T21:38:26+05:30",
            "date_modified": "2020-06-30T17:23:33+05:30"
        },
        {
            "id": "https://techwhale.in/install-jitsi-meet-on-ubuntu-1804/",
            "url": "https://techwhale.in/install-jitsi-meet-on-ubuntu-1804/",
            "title": "Install Jitsi Meet on Ubuntu 18.04",
            "summary": "Provisioning New Ubuntu 18.04 x64 VPS Create a new sudo user. A domain jitsi.server.com being pointed to the server instance mentioned above. Update server packages: For security and performance purposes, its necessary to update the Ubuntu 18.04 LTS system to the latest status: sudo apt&hellip;",
            "content_html": "<h3 id=\"Prerequisites\">Provisioning</h3>\n<ul>\n<li>New Ubuntu 18.04 x64 VPS</li>\n<li>Create a new sudo user.</li>\n<li>A domain <code>jitsi.server.com</code> being pointed to the server instance mentioned above.</li>\n</ul>\n<h3 id=\"Step_4__Update_the_system\">Update server packages:</h3>\n<p>For security and performance purposes, its necessary to update the Ubuntu 18.04 LTS system to the latest status:</p>\n<p class=\"msg msg--success\"><strong>sudo apt update sudo apt upgrade -y &amp;&amp; sudo shutdown -r now</strong></p>\n<p>You need to properly setup a hostname and an FQDN for the machine before you can enable HTTPS security by deploying a Let's Encrypt HTTPS certificate.</p>\n<p>The following commands will setup a hostname / FQDN:</p>\n<p class=\"msg msg--success\"><strong>sudo hostnamectl set-hostname jitsimeet</strong></p>\n<p class=\"msg msg--success\"><strong>sudo sed -i 's/^127.0.1.1.*$/127.0.1.1 jitsi.server.com jitsimeet/g' /etc/hosts</strong></p>\n<p>Check if hostname is set properly.</p>\n<p class=\"msg msg--highlight \"><strong>hostname</strong></p>\n<p class=\"msg msg--highlight \"><strong>hostname -f </strong></p>\n<p class=\"msg msg--success\"><br><strong>wget -qO - <a href=\"https://download.jitsi.org/jitsi-key.gpg.key\">https://download.jitsi.org/jitsi-key.gpg.key</a> | sudo apt-key add -</strong></p>\n<p class=\"msg msg--success\"><br><strong>apt-get update</strong></p>\n<p id=\"pre\" class=\"msg msg--success\"><strong>echo 'deb <a href=\"https://download.jitsi.org\">https://download.jitsi.org</a> stable/' &gt;&gt; /etc/apt/sources.list.d/jitsi-stable.list</strong></p>\n<p id=\"pre\" class=\"msg msg--success\"><strong>wget -qO - <a href=\"https://download.jitsi.org/jitsi-key.gpg.key\">https://download.jitsi.org/jitsi-key.gpg.key</a> | sudo apt-key add -</strong></p>\n<p id=\"pre\" class=\"msg msg--success\"><strong>apt-get install apt-transport-https</strong></p>\n<p id=\"pre\" class=\"msg msg--success\"><strong>apt-get update</strong></p>\n<p class=\"msg msg--success\"><strong>apt-get -y install jitsi-meet</strong></p>\n<p class=\"msg msg--success\"><strong>sudo /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh</strong></p>\n<h3 id=\"Step_3__Tweak_firewall_rules_for_running_Jitsi_Meet\">Firewall rules for Jitsi Meet</h3>\n<p>As required we need to allow <code>OpenSSH</code>, <code>HTTP</code>, and <code>HTTPS</code> traffic, along with inbound UDP traffic on port range of <code>5222-5281</code> and <code>10000</code> through port <code>20000</code>:</p>\n<p class=\"post__lead msg msg--highlight \"><strong>sudo ufw allow OpenSSH</strong><br><strong>sudo ufw allow http</strong><br><strong>sudo ufw allow https</strong><br><strong>sudo ufw allow in 4443/tcp</strong><br><strong>sudo ufw allow in 5222/tcp</strong><br><strong>sudo ufw allow in 5269/tcp</strong><br><strong>sudo ufw allow in 5280:5281/tcp </strong><br><strong>sudo ufw allow in 10000:20000/udp</strong><br><br><strong>sudo ufw enable</strong></p>\n<p> </p>\n<p>During the process, input your email <code>admin@gmail.com</code> as prompted and then press <kbd>ENTER</kbd>. This script will automatically handle any tasks related to the Let's Encrypt SSL certificate.</p>\n<p>Finally, point your favorite web browser to <code>http://jitsimeet.server.com</code> or <code>https://jitsimeet.server.com</code> to access your Jitsi Meet Video conferencing service. Feel free to explore the interface. Clicking the <code>GO</code> button will immediately create a Video conferencing channel for you.</p>\n<p><br><code class=\" language-bash\"></code></p>",
            "image": "https://techwhale.in/media/posts/4/image-8-compressed.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "Tutorials",
                   "TechWhale Guides"
            ],
            "date_published": "2020-05-18T01:58:42+05:30",
            "date_modified": "2020-06-25T22:18:06+05:30"
        },
        {
            "id": "https://techwhale.in/git-workflow-for-developers-and-devops/",
            "url": "https://techwhale.in/git-workflow-for-developers-and-devops/",
            "title": "Guide : Git workflow for Developers",
            "summary": " Git is a top distributed version control system and Nowadays all programmers and developers are dependent on its workflow. Manage to set up a proper Git code workflow is essential for projects that involve group collaboration. Follow procedures to keep working copy of your&hellip;",
            "content_html": "<p><span style=\"font-weight: 400;\"> </span></p>\n<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1e8i9uj8q3\">Overview:</a></li>\n<li><a href=\"#mcetoc_1e8i9m22q1\">Why Git or Github?</a></li>\n<li><a href=\"#c217\">The Workflow Cheat Sheet</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1e8i9uj8q3\">Overview:</h3>\n<p><span style=\"font-weight: 400;\">Git is a top distributed version control system and Nowadays all programmers and developers are dependent on its workflow. Manage to set up a proper Git code workflow is essential for projects that involve group collaboration. Follow procedures to keep working copy of your project through identifying code problems and evolving into a big scale project.</span></p>\n<p><span style=\"font-weight: 400;\">One of the biggest git repository hosting is Github. </span><a href=\"https://git-scm.com/\"><span style=\"font-weight: 400;\">Git</span></a><span style=\"font-weight: 400;\"> is a distributed version control system accessible through a CLI. Git is </span><a href=\"https://en.wikipedia.org/wiki/Free_and_open-source_software\"><span style=\"font-weight: 400;\">free and open-source software</span></a><span style=\"font-weight: 400;\"> distributed under the terms of the </span><a href=\"https://en.wikipedia.org/wiki/GNU_General_Public_License\"><span style=\"font-weight: 400;\">GNU General Public License</span></a><span style=\"font-weight: 400;\"> version 2.</span></p>\n<p><span style=\"font-weight: 400;\"> Using Github, I can share all of my coding projects with the world. Github has a plethora of unique features that enhance the git experience and make collaborative coding simple. I am far from a Git or Github expert, but this is a short guide to get you started with Git on Github:</span></p>\n<h3 id=\"mcetoc_1e8i9m22q1\"><strong>Why Git or Github?</strong></h3>\n<p>It is the best and most popular system available for managing and tracking any code changes also it allows other developers to collaborate on projects at any scale.</p>\n<p>In simple words, GitHub is a “hub” for everyone who is working with the Git version control system. It provides a variety of features to make developers' jobs much easier and it's open for the public so anyone can share their code to the development community and can do better projects or make existing code repositories much better by power of collaboration.</p>\n<p>System like Git become a lot more obvious once you make sense of how they truly work. The objective of this guide is to reveal some insight into how Git functions in the engine. We're going to investigate a portion of Git's center ideas including its fundamental item stockpiling, how submits work, how branches and labels work, and we'll take a gander at the various types of converging in Git including the much-dreaded rebase. Ideally toward the finish, all things considered, you'll have a strong comprehension of these ideas and will have the option to utilize a portion of Git's further developed highlights with certainty. <br><br>It's important now that this guide isn't proposed to be a's first experience with Git. This guide was composed for individuals who as of now use Git, however might want to more readily comprehend it by taking a look in the engine, and get familiar with a couple of slick deceives en route. All things considered, we should start.</p>\n<p class=\"msg msg--info\"><span style=\"font-weight: 400;\">This is a short guide to get you started with Git on Github:</span></p>\n<table>\n<tbody>\n<tr>\n<td class=\"align-center\">\n<p><strong>Repository </strong></p>\n</td>\n<td>\n<p><span style=\"font-weight: 400;\">Commonly called the “repo,” this is where all of the updated versions (and the primary version) of a project are stored. This is your staging ground for the project. Each repo has a unique URL for easy access.</span></p>\n</td>\n</tr>\n<tr>\n<td class=\"align-center\">\n<p><strong>Forking </strong></p>\n</td>\n<td>\n<p><span style=\"font-weight: 400;\">Unless developers pay for a private repository, their project can be viewed by all other members of the GitHub community. If these members feel they could make a worthy contribution, then they can create a new project (repository) from yours. This is called “forking a repo.”</span></p>\n</td>\n</tr>\n<tr>\n<td class=\"align-center\">\n<p><strong>Pull Request</strong></p>\n</td>\n<td>\n<p><span style=\"font-weight: 400;\">After forking a repo and making new changes to existing code, GitHub users can invite the developers of the original repository to view the changes.</span></p>\n</td>\n</tr>\n<tr>\n<td class=\"align-center\">\n<p><strong>Merging </strong></p>\n</td>\n<td>\n<p><span style=\"font-weight: 400;\">If you like the changes someone made after forking your repository, you can opt to accept those changes and merge them with your existing repository.</span></p>\n</td>\n</tr>\n<tr>\n<td class=\"align-center\">\n<p><strong>Changelogs </strong></p>\n</td>\n<td>\n<p><span style=\"font-weight: 400;\">This lets developers working on a single project see all changes, who made them, and when.</span></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"font-weight: 400;\">Git workflow is the mixer of steps that we have to follow before starting the development cycle means how developers pull, push, commit, clone and manage code.</span></p>\n<h3 id=\"c217\" class=\"hp hq ds ar aq hr du lr dw ls hu lt hw lu hy lv ia\">The Workflow Cheat Sheet</h3>\n<p class=\"msg msg--success\"><span id=\"2f9d\" data-selectable-paragraph=\"\">--------------------------------------------<br>Managing your Local Repo<br>--------------------------------------------<br>NOTE: If you need to hard reset your local repo to match <br>the remote master use the following commands:<br>$ git fetch origin<br>$ git reset --hard origin/master<br><br>Undo the act of committing, leaving everything else intact:<br>$ git reset --soft HEAD^:<br><br>Undo the act of committing and everything you'd staged, <br>but leave the work tree (your files intact):<br>$ git reset HEAD^<br><br>Completely undo it, throwing away all uncommitted changes,<br>resetting everything to the previous commit:<br>$ git reset --hard HEAD^<br><br>-------------------------------------------- <br>BEGIN WORKFLOW<br>-------------------------------------------- <br>Clone the Repo to local machine:<br>$ git clone https://github.com/user_name/repo_name.git<br><br>Make sure the local master is up-to-date:<br>$ git pull origin master<br><br>Create new branch:<br>$ git banch branch_name<br><br>Move to branch:<br>$ git checkout branch_name<br><br>Navigate file structure as needed:<br>$ ls <br>$ cd folder_name<br><br>Add the files to the branch:<br>$ git add .<br><br>Verify file: <br>$ git status<br><br>Commit the files:<br>$ git commit -m \"comment\"<br><br>Add branch and files to the Remote Repo:<br>$ git push -u origin branch_name<br><br>Go to the github website to manage pull request and merge. <br><br>Switch back to local master so you can delete the local branch:<br>$ git checkout master<br><br>Delete local branch: <br>$ git branch -d branch_name<br>OR <br>$ git branch -D branch_name<br><br>If you don't want to go to the website, you can merge your branch <br>to the master locally and push the new master to the remote repo:<br><br>Switch back to master branch:<br>$ git checkout master<br><br>Merge the branch with the local master:<br>$ git merge branch_name -m \"comment\"<br><br>Push the local master to the remote master:<br>$ git push origin master<br><br>Delete local branch: <br>$ git branch -d branch_name<br>OR <br>$ git branch -D branch_name</span></p>\n<p> </p>",
            "image": "https://techwhale.in/media/posts/3/l2mvWRp1.png",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Tutorials",
                   "TechWhale Guides"
            ],
            "date_published": "2020-05-18T01:16:00+05:30",
            "date_modified": "2020-06-30T17:24:14+05:30"
        },
        {
            "id": "https://techwhale.in/how-to-install-ansible-on-ubuntu-1804-debian-10-buster/",
            "url": "https://techwhale.in/how-to-install-ansible-on-ubuntu-1804-debian-10-buster/",
            "title": "How to install Ansible on Ubuntu 18.04 / Debian 10 Buster",
            "summary": " What is Ansible? Ansible is an open source DevOps automation tool that solves server provisioning in installing tools, configuration, deployment and provisioning. It leverages SSH to communicate between servers. It uses the playbook which states every steps of automation jobs, and playbook uses a simple language called&hellip;",
            "content_html": "<div class=\"post__toc\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#mcetoc_1e887o48e3\">What is Ansible?</a></li>\n<li><a href=\"#mcetoc_1e883n8jk0\">Prerequisites :</a></li>\n<li><a href=\"#step-1-—-installing-ansible\">Before start...</a></li>\n<li><a href=\"#mcetoc_1e8s96ber2\">Add official Ansible repository</a></li>\n<li><a href=\"#mcetoc_1e8s976in4\">Update Packages</a></li>\n<li><a href=\"#step-1-—-installing-ansible\">Install Ansible </a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1e887o48e3\">What is Ansible?</h3>\n<figure class=\"post__image post__image--center\"><img loading=\"lazy\"  src=\"https://techwhale.in/media/posts/2/imageedit_16_2728091063.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-xs.png 300w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-sm.png 480w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-md.png 768w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-lg.png 1024w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-xl.png 1360w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-2xl.png 1600w\"  alt=\"ansible\" width=\"359\" height=\"284\"></figure>\n<p id=\"mcetoc_1e8hhbh66b\">Ansible is an open source DevOps automation tool that solves server provisioning in installing tools, configuration, deployment and provisioning. It leverages SSH to communicate between servers. It uses the playbook which states every steps of automation jobs, and playbook uses a simple language called \"YAML\".</p>\n<hr>\n<h3 id=\"mcetoc_1e883n8jk0\">Prerequisites :</h3>\n<p class=\"msg msg--info\"><strong>Operating System</strong>: Ubuntu 18.04 / Debian 10 Buster</p>\n<p class=\"msg msg--info\"><strong>SSH Access</strong> :  You need remote server SSH access available with Password or Key Access so our ansible server can communicate remotely.</p>\n<p class=\"msg msg--info\"><strong>Python</strong>: python version 2.7 or above it should be installed.</p>\n<p> </p>\n<h3 id=\"step-1-—-installing-ansible\">Before start...</h3>\n<p>The use of Ansible as a capability of managing your server infrastructure, you want to install the Ansible software program on the machine that will serve as the Ansible manage node.</p>\n<p>Ansible’s only real dependency is Python. Once Python is installed, the simplest way to get Ansible running is to use pip, a simple package manager for Python. Don't worry most of the linux distro comes with default Python 2.7 and CentOS 8 comes with built in Python version 3.7.</p>\n<p>The easiest way to install Ansible on a Debian or Ubuntu system is to use the official apt package.</p>\n<h3 id=\"mcetoc_1e8s96ber2\">Add official Ansible repository</h3>\n<p><br>From your ansible host node, run the following command to consist of the authentic project’s PPA and it is needed else you'll end up with older version of Ansible :</p>\n<p id=\"mcetoc_1e8hh88s18\" class=\"msg msg--success\"><strong>sudo apt-add-repository ppa:ansible/ansible</strong></p>\n<p class=\"msg msg--info\">Press ENTER to proceed with PPA addition.</p>\n<h3 id=\"mcetoc_1e8s976in4\">Update Packages</h3>\n<p>Newly added PPA needs to be updated :</p>\n<p id=\"mcetoc_1e8hh6keo7\" class=\"msg msg--success\"><strong>sudo apt update</strong></p>\n<p class=\"post__lead\">If an error like <strong>“sudo: add-apt-repository: command not found”</strong>, then you’re missing the <strong><code>python-software-properties</code></strong> package. Install it with the following command:</p>\n<p id=\"mcetoc_1e8hh61i85\" class=\"msg msg--highlight  msg--success post__lead\"><strong>sudo apt-get install python-software-properties</strong></p>\n<h3 id=\"step-1-—-installing-ansible\">Install Ansible </h3>\n<p>After update is done, you can easily install Ansible using simple install command,</p>\n<p id=\"mcetoc_1e8hh5qdi4\" class=\"msg msg--success\"><strong>sudo apt-get install ansible -y</strong></p>\n<p>Our installation process has been done. Now let’s check ansible version. </p>\n<p id=\"mcetoc_1e8hhi53oc\" class=\"msg msg--success\"><strong>sudo ansible --version</strong></p>\n<figure class=\"post__image post__image--center\"><a href=\"https://i.imgur.com/YSu2ISW.png\"><img loading=\"lazy\"  src=\"https://i.imgur.com/YSu2ISW.png\" data-is-external-image=\"true\"  alt=\"\" width=\"1283\" height=\"172\"></figure></a></p>\n<p>That's all folks. Happy Hacking!!</p>\n<p> </p>",
            "image": "https://techwhale.in/media/posts/2/Webp.net-compress-image-3.jpg",
            "author": {
                "name": "Mayur Chavhan"
            },
            "tags": [
                   "Ubuntu",
                   "DevOps",
                   "Debian",
                   "Automation",
                   "Ansible"
            ],
            "date_published": "2020-05-14T04:28:21+05:30",
            "date_modified": "2020-06-30T17:46:44+05:30"
        }
    ]
}
