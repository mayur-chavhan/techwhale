<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>TechWhale</title>
    <link href="https://techwhale.in/feed.xml" rel="self" />
    <link href="https://techwhale.in" />
    <updated>2025-05-03T02:42:02+05:30</updated>
    <author>
        <name>Mayur Chavhan</name>
    </author>
    <id>https://techwhale.in</id>

    <entry>
        <title>WordOps-Backup: The Script I Wish I Had When My WordPress Site Needed Saving</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/wordops-backup-the-script-i-wish-i-had-when-my-wordpress-site-needed-saving/"/>
        <id>https://techwhale.in/wordops-backup-the-script-i-wish-i-had-when-my-wordpress-site-needed-saving/</id>
        <media:content url="https://techwhale.in/media/posts/51/From-Code-to-Kubernetes-The-Kaniko-Method-for-Node.js-Deployment-1.png" medium="image" />
            <category term="DevOps"/>
            <category term="Automation"/>

        <updated>2025-05-03T02:41:50+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/51/From-Code-to-Kubernetes-The-Kaniko-Method-for-Node.js-Deployment-1.png" alt="WordOps-Backup: The Script I Wish I Had When My WordPress Site Needed Saving" />
                    Let’s be honest-if you’ve ever managed a WordPress site, you know the anxiety of “what if my server crashes tomorrow?” I’ve been there. More than once. That’s exactly why I built WordOps-Backup: to take the pain, panic, and finger-crossing out of WordPress backups for anyone&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/51/From-Code-to-Kubernetes-The-Kaniko-Method-for-Node.js-Deployment-1.png" class="type:primaryImage" alt="WordOps-Backup: The Script I Wish I Had When My WordPress Site Needed Saving" /></p>
                <p>Let’s be honest-if you’ve ever managed a WordPress site, you know the anxiety of “what if my server crashes tomorrow?” I’ve been there. More than once. That’s exactly why I built <a href="https://github.com/mayur-chavhan/WordOps-Backup">WordOps-Backup</a>: to take the pain, panic, and finger-crossing out of WordPress backups for anyone using WordOps.</p><p>This isn’t just another backup script. It’s the tool I wish existed when I first dove into the world of self-hosted WordPress, and it’s designed for real admins who want reliability, speed, and a little peace of mind.</p><hr>
<h2 id="the-problem-wordpress-backups-are-often-a-mess">The Problem: WordPress Backups Are Often a Mess</h2>
<p>Let me set the scene. You’ve got a WordPress site humming along on a shiny WordOps stack. Maybe you’ve even tuned your Nginx, hardened your security, and set up Let’s Encrypt SSL. But then you realize:  </p><ul>
<li>Your backups are scattered (or worse, non-existent)  </li>
<li>Manual backups eat up your time and sanity  </li>
<li>Most scripts don’t handle incremental backups or notifications  </li>
<li>When disaster strikes, you’re left sifting through half-baked tarballs and old SQL dumps</li>
</ul>
<p>I hit this wall myself. After a late-night plugin update nuked my database, I knew there had to be a better way.</p><hr>
<h2 id="why-wordops-and-why-it-deserves-a-smarter-backup-tool">Why WordOps? (And Why It Deserves a Smarter Backup Tool)</h2>
<p><strong>WordOps</strong> is a command-line tool that makes deploying and managing WordPress on Nginx almost fun. With a few keystrokes, you get a high-performance stack:  </p><ul>
<li>Nginx, PHP, MariaDB, Redis, WP-CLI, and more  </li>
<li>Automated SSL, kernel optimizations, and security hardening  </li>
<li>Super-fast caching and easy monitoring  </li>
<li>Simple commands for installing, updating, and removing sites</li>
</ul>
<p>But even with all that power, backup and restore are left up to you. That’s where WordOps-Backup comes in.</p><hr>
<h2 id="building-wordops-backup-the-features-i-needed-and-you-probably-do-too">Building WordOps-Backup: The Features I Needed (and You Probably Do Too)</h2>
<p>I wanted a backup solution that felt like a natural extension of WordOps-fast, flexible, and friendly. Here’s what I built:</p><h3 id="1-multiple-backup-types"><strong>1. Multiple Backup Types</strong></h3>
<ul>
<li><strong>Full backups:</strong> Everything-files and database, zipped up tight</li>
<li><strong>Database-only:</strong> For when you just want the essentials</li>
<li><strong>Incremental:</strong> Only changed files since the last full backup, saving space and time</li>
</ul>
<h3 id="2-advanced-compression"><strong>2. Advanced Compression</strong></h3>
<ul>
<li><strong>zstd:</strong> Lightning-fast and efficient, for those who want speed and small files</li>
<li><strong>pigz:</strong> Parallel gzip for multicore systems, because time is money</li>
</ul>
<h3 id="3-backup-management"><strong>3. Backup Management</strong></h3>
<ul>
<li><strong>Retention policies:</strong> Set how long to keep old backups-no more filling up your disk</li>
<li><strong>Automatic cleanup:</strong> Out with the old, in with the new, all on autopilot</li>
<li><strong>Scheduling:</strong> Cron integration and an interactive menu for “set it and forget it”</li>
</ul>
<h3 id="4-notifications-that-actually-work"><strong>4. Notifications That Actually Work</strong></h3>
<ul>
<li><strong>Telegram:</strong> Get instant pings when your backup finishes (or fails)</li>
<li><strong>Email (SMTP):</strong> Full logs and status updates in your inbox</li>
<li><strong>ntfy:</strong> Push notifications for the modern admin</li>
</ul>
<h3 id="5-user-experience"><strong>5. User Experience</strong></h3>
<ul>
<li><strong>Interactive menu:</strong> For those who hate memorizing commands</li>
<li><strong>CLI options:</strong> For automation geeks and scripting wizards</li>
<li><strong>Detailed logging:</strong> See exactly what happened, when, and why</li>
</ul>
<hr>
<h2 id="how-to-use-wordops-backup-a-quickstart-for-the-eager">How to Use WordOps-Backup (A Quickstart for the Eager)</h2>
<h3 id="1-clone-and-configure"><strong>1. Clone and Configure</strong></h3>
<pre><code class="language-bash">git clone https://github.com/mayur-chavhan/WordOps-Backup.git
cd WordOps-Backup
chmod +x wordpress-backup.sh
</code></pre>
<p>Edit the variables at the top of the script to match your setup-choose your backup directory, retention days, compression type, and notification preferences.</p><h3 id="2-run-in-interactive-mode"><strong>2. Run in Interactive Mode</strong></h3>
<pre><code class="language-bash">./wordpress-backup.sh
</code></pre>
<p>You’ll get a menu with options for full, database-only, or incremental backups, scheduling, cleanup, and more.</p><h3 id="3-or-use-command-line-mode"><strong>3. Or Use Command-Line Mode</strong></h3>
<pre><code class="language-bash">./wordpress-backup.sh --full yourdomain.com
./wordpress-backup.sh --db yourdomain.com
./wordpress-backup.sh --incremental yourdomain.com
</code></pre>
<p>Perfect for cron jobs or integrating into your own scripts.</p><h3 id="4-set-up-notifications"><strong>4. Set Up Notifications</strong></h3>
<ul>
<li>For Telegram, create a bot and grab your chat ID</li>
<li>For email, plug in your SMTP details</li>
<li>For ntfy, pick your topic and server</li>
</ul>
<h3 id="5-schedule-automatic-backups"><strong>5. Schedule Automatic Backups</strong></h3>
<p>Add cron jobs for daily, weekly, or custom schedules. Example:</p><pre><code class="language-bash">0 2 * * * /path/to/wordpress-backup.sh --full example.com
</code></pre>
<hr>
<h2 id="why-this-script-actually-makes-wordpress-backups-easy">Why This Script Actually Makes WordPress Backups Easy</h2>
<p>Let’s be real: most backup scripts are either too simple (missing features you need) or too complex (requiring a PhD to configure). WordOps-Backup is different because it’s built for admins who want to get stuff done, not spend hours reading docs.</p><ul>
<li><strong>Incremental backups</strong> mean you’re not wasting bandwidth or disk space  </li>
<li><strong>Compression options</strong> let you trade off speed and size as needed  </li>
<li><strong>Notifications</strong> keep you in the loop, so you’re never left guessing  </li>
<li><strong>Retention and cleanup</strong> mean you won’t wake up to a full disk and a crashed site  </li>
<li><strong>It’s open source and customizable</strong>-add your own tweaks, or contribute back</li>
</ul>
<hr>
<h2 id="whats-next-and-how-you-can-make-it-even-better">What’s Next? (And How You Can Make It Even Better)</h2>
<p>WordOps-Backup is designed to grow with you. Want to add new notification channels? Tweak the backup structure? It’s all possible. Fork it, hack it, and share your improvements.</p><p>If you’re running WordPress on WordOps and you care about your data, give this script a spin. Your future self (and your clients) will thank you.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Mastering Kubernetes: A Deep Dive into Building a Cluster &quot;The Hard Way</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/mastering-kubernetes-a-deep-dive-into-building-a-cluster-the-hard-way/"/>
        <id>https://techwhale.in/mastering-kubernetes-a-deep-dive-into-building-a-cluster-the-hard-way/</id>
            <category term="Kubernetes"/>
            <category term="DevOps"/>

        <updated>2025-04-15T12:25:58+05:30</updated>
            <summary>
                <![CDATA[
                    And Why Every DevOps Engineer Should Try It Once. Kubernetes has become the backbone of modern cloud-native infrastructure, but its complexity often remains shrouded in abstraction. Managed services like GKE, EKS, or AKS simplify deployment but obscure the inner workings of the platform. Enter Kubernetes&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>And Why Every DevOps Engineer Should Try It Once.</p><hr>
<h3 id="introduction-the-value-of-learning-kubernetes-from-scratch"><strong>Introduction: The Value of Learning Kubernetes from Scratch</strong></h3>
<p>Kubernetes has become the backbone of modern cloud-native infrastructure, but its complexity often remains shrouded in abstraction. Managed services like GKE, EKS, or AKS simplify deployment but obscure the inner workings of the platform. Enter <strong>Kubernetes The Hard Way</strong>, a hands-on tutorial by Kelsey Hightower designed to strip away the magic and expose the core components powering a Kubernetes cluster.  </p><p>For developers and DevOps engineers, this exercise isn’t just about setting up a cluster—it’s about understanding TLS bootstrapping, certificate authority workflows, and the symbiotic relationship between etcd, the API server, and kubelet. By manually configuring each component, you gain the expertise to debug, optimize, and secure production-grade clusters with confidence.  </p><hr>
<h3 id="why-the-hard-way-is-worth-the-effort"><strong>Why “The Hard Way” is Worth the Effort</strong></h3>
<ol>
<li><p><strong>Demystifying Kubernetes Architecture</strong><br>Unlike automated tools like <code>kubeadm</code>, this method forces you to interact with every critical component:  </p><ul>
<li><strong>etcd</strong>: The distributed key-value store that holds cluster state.  </li>
<li><strong>kube-apiserver</strong>: The gateway for all administrative tasks.  </li>
<li><strong>kube-controller-manager &amp; scheduler</strong>: Orchestrators for workload placement and lifecycle management.  </li>
<li><strong>kubelet &amp; kube-proxy</strong>: Node-level agents handling pod execution and networking.</li>
</ul>
<p>By manually configuring these, you’ll grasp how they communicate via TLS certificates and API endpoints.  </p></li>
<li><p><strong>Building Security Expertise</strong><br>TLS certificates are the lifeblood of secure cluster communication. “The Hard Way” teaches you to:  </p><ul>
<li>Generate a Certificate Authority (CA) using OpenSSL.  </li>
<li>Issue client/server certificates for components like <code>kube-apiserver</code> and <code>kubelet</code>.  </li>
<li>Configure RBAC and encryption-at-rest for sensitive data in etcd.</li>
</ul>
</li>
<li><p><strong>Networking Mastery</strong><br>From configuring CNI plugins to troubleshooting pod-to-pod communication, you’ll learn how Kubernetes enforces network policies and service discovery—skills critical for optimizing performance in production.</p></li>
</ol>
<hr>
<h3 id="prerequisites-for-success"><strong>Prerequisites for Success</strong></h3>
<p>Before diving in, ensure you have:  </p><ul>
<li><strong>Basic Kubernetes Knowledge</strong>: Familiarity with pods, deployments, and services.  </li>
<li><strong>Cloud or Local VMs</strong>: A cloud provider account (e.g., AWS, GCP) or local VMs with 2+ CPUs and 4GB RAM.  </li>
<li><strong>Command-Line Proficiency</strong>: Comfort with <code>kubectl</code>, <code>openssl</code>, and Linux system administration.  </li>
<li><strong>Patience</strong>: This guide is a marathon, not a sprint. Expect to spend 4–8 hours troubleshooting.</li>
</ul>
<hr>
<h3 id="step-by-step-roadmap-without-the-handholding"><strong>Step-by-Step Roadmap (Without the Handholding)</strong></h3>
<ol>
<li><p><strong>Infrastructure Setup</strong>  </p><ul>
<li>Provision VMs for control plane (1 node) and workers (2+ nodes).  </li>
<li>Configure network rules to allow traffic between components (e.g., API server port 6443).</li>
</ul>
</li>
<li><p><strong>Certificate Authority &amp; TLS Configuration</strong>  </p><ul>
<li>Generate a root CA and issue certificates for:  <ul>
<li><code>kube-apiserver</code> (server cert).  </li>
<li><code>kubelet</code> (client cert).  </li>
<li><code>etcd</code> (peer and server certs).</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Bootstrapping etcd</strong>  </p><ul>
<li>Deploy a 3-node etcd cluster with TLS-enabled peer communication.  </li>
<li>Validate cluster health using <code>etcdctl</code>.</li>
</ul>
</li>
<li><p><strong>Control Plane Setup</strong>  </p><ul>
<li>Install <code>kube-apiserver</code>, <code>kube-controller-manager</code>, and <code>kube-scheduler</code>.  </li>
<li>Configure service accounts, encryption for secrets, and RBAC policies.</li>
</ul>
</li>
<li><p><strong>Worker Node Configuration</strong>  </p><ul>
<li>Install <code>kubelet</code> and <code>kube-proxy</code>.  </li>
<li>Join nodes to the cluster using bootstrap tokens and approved CSRs.</li>
</ul>
</li>
<li><p><strong>Validation</strong>  </p><ul>
<li>Deploy a test pod and service.  </li>
<li>Verify DNS resolution, network policies, and logging.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="common-pitfalls--how-to-avoid-them"><strong>Common Pitfalls &amp; How to Avoid Them</strong></h3>
<ul>
<li><strong>Certificate Mismatches</strong>: Double-check Common Names (CNs) and Subject Alternative Names (SANs).  </li>
<li><strong>etcd Failures</strong>: Ensure TLS paths are correct and peer URLs are resolvable.  </li>
<li><strong>kubelet Registration</strong>: Monitor CSRs and approve them manually if auto-approval fails.  </li>
<li><strong>Network Misconfigurations</strong>: Use <code>kubectl get endpoints</code> to troubleshoot service discovery.</li>
</ul>
<hr>
<h3 id="key-takeaways-for-devops-teams"><strong>Key Takeaways for DevOps Teams</strong></h3>
<ol>
<li><strong>Deep Troubleshooting Skills</strong>: Manual setup exposes edge cases you’d never encounter with managed services.  </li>
<li><strong>Security Best Practices</strong>: TLS bootstrapping and encryption-at-rest are non-negotiable in production.  </li>
<li><strong>Confidence in Customization</strong>: Tailor clusters to meet compliance or performance needs (e.g., custom CNI plugins).</li>
</ol>
<hr>
<h3 id="enhancing-your-learning-journey"><strong>Enhancing Your Learning Journey</strong></h3>
<ul>
<li><strong>Automate Repetitive Tasks</strong>: Use Terraform or Ansible to script VM provisioning.  </li>
<li><strong>Explore Advanced Topics</strong>: Integrate monitoring (Prometheus), logging (EFK stack), or service meshes (Istio).  </li>
<li><strong>Join the Community</strong>: Engage with Kubernetes SIGs or forums to troubleshoot challenges.</li>
</ul>
<hr>
<h3 id="conclusion-embrace-the-challenge"><strong>Conclusion: Embrace the Challenge</strong></h3>
<p>“Kubernetes The Hard Way” is more than a tutorial—it’s a rite of passage. While the process is daunting, the payoff is unparalleled: a visceral understanding of Kubernetes’ internals that transforms you from a user to an architect.  </p><p><em>Ready to begin? Clone the <a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">official repository</a> and start your journey today.</em>  </p><hr>
<p><strong>SEO Optimization Tips</strong>:  </p><ul>
<li><strong>Keywords</strong>: Kubernetes from scratch, manual cluster setup, TLS bootstrapping, etcd configuration.  </li>
<li><strong>Internal Links</strong>: Link to related articles on Kubernetes security or networking.  </li>
<li><strong>Meta Description</strong>: “Master Kubernetes internals by building a cluster ‘The Hard Way.’ Learn TLS bootstrapping, etcd setup, and advanced troubleshooting for DevOps professionals.”</li>
</ul>
<p>By combining hands-on rigor with strategic learning, you’ll not only conquer Kubernetes but also future-proof your infrastructure expertise.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>GitOps: ArgoCD as Your Kubernetes Deployment Conductor  </title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/gitops-revolution-argocd-as-your-kubernetes-deployment-conductor/"/>
        <id>https://techwhale.in/gitops-revolution-argocd-as-your-kubernetes-deployment-conductor/</id>
            <category term="Kubernetes"/>
            <category term="Automation"/>

        <updated>2025-04-15T12:24:49+05:30</updated>
            <summary>
                <![CDATA[
                    Imagine your Kubernetes cluster as a symphony orchestra. Without a conductor, instruments play out of sync. ArgoCD is that maestro, ensuring every deployment hits the right note. This guide transforms you from Kubernetes novice to GitOps virtuoso, using ArgoCD to automate deployments while you focus&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Imagine your Kubernetes cluster as a symphony orchestra. Without a conductor, instruments play out of sync. ArgoCD is that maestro, ensuring every deployment hits the right note. This guide transforms you from Kubernetes novice to GitOps virtuoso, using ArgoCD to automate deployments while you focus on innovation. Ready to orchestrate perfection? Let’s begin! 🎻  </p><h2 id="why-gitops-changes-everything">Why GitOps Changes Everything</h2>
<p><strong>GitOps</strong> <em>(your deployment safety net)</em> reduces deployment errors by 68% according to CNCF research. By treating Git as your source of truth, you gain:  </p><ul>
<li><strong>Auditable Changes</strong>: Every deployment tracked via Git commits  </li>
<li><strong>Self-Healing Systems</strong>: Automatic drift correction  </li>
<li><strong>Rollback Superpowers</strong>: Revert to any previous state in seconds</li>
</ul>
<p>Real-world impact? A fintech company reduced production incidents by 92% after adopting ArgoCD, while an e-commerce platform achieved 50% faster release cycles.  </p><h2 id="argocd-fundamentals-the-conductors-baton">ArgoCD Fundamentals: The Conductor’s Baton</h2>
<h3 id="what-makes-argocd-special">What Makes ArgoCD Special?</h3>
<p>ArgoCD implements GitOps by continuously comparing your cluster’s live state with Git-stored manifests. Key features:  </p><ul>
<li><strong>Multi-Environment Support</strong>: Manage dev/stage/prod from single Git repo  </li>
<li><strong>Multi-Source Deployments</strong>: Combine Helm, Kustomize, and raw YAML  </li>
<li><strong>Health Monitoring</strong>: Instant visibility into deployment status</li>
</ul>
<p>🧠 <em>Pro Tip: ArgoCD’s “Application of Applications” pattern lets you manage entire environments declaratively.</em>  </p><h2 id="installation-getting-the-maestro-on-stage">Installation: Getting the Maestro On Stage</h2>
<h3 id="method-1-kubectl-quickstart">Method 1: kubectl Quickstart</h3>
<pre><code class="language-bash">kubectl create namespace argocd  
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml  
</code></pre>
<p>This deploys all essential components.  </p><h3 id="method-2-helm-for-advanced-control">Method 2: Helm for Advanced Control</h3>
<pre><code class="language-bash">helm repo add argo https://argoproj.github.io/argo-helm  
helm upgrade --install argocd argo/argo-cd --version 7.7.22 -n argocd  
</code></pre>
<p>Helm allows easier upgrades and customization.  </p><h3 id="accessing-the-dashboard">Accessing the Dashboard</h3>
<p>Retrieve admin password:  </p><pre><code class="language-bash">kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath=&quot;{.data.password}&quot; | base64 -d  
</code></pre>
<p>Port-forward to localhost:  </p><pre><code class="language-bash">kubectl -n argocd port-forward svc/argocd-server 8080:80  
</code></pre>
<p>Visit <code>http://localhost:8080</code> to see your new control center.  </p><h2 id="declarative-deployments-the-sheet-music">Declarative Deployments: The Sheet Music</h2>
<h3 id="sample-application-manifest">Sample Application Manifest</h3>
<pre><code class="language-yaml">apiVersion: argoproj.io/v1alpha1  
kind: Application  
metadata:  
  name: demo-app  
  namespace: argocd  
spec:  
  project: default  
  source:  
    repoURL: https://github.com/yourrepo/app-manifests.git  
    targetRevision: HEAD  
    path: kustomize/overlays/prod  
  destination:  
    server: https://kubernetes.default.svc  
    namespace: production  
  syncPolicy:  
    automated:  
      prune: true  
      selfHeal: true  
    syncOptions:  
    - CreateNamespace=true  
</code></pre>
<p>This manifest:  </p><ol>
<li>Tracks Git repo for changes  </li>
<li>Auto-syncs to production namespace  </li>
<li>Self-heals configuration drift</li>
</ol>
<h2 id="synchronization-strategies-keeping-the-rhythm">Synchronization Strategies: Keeping the Rhythm</h2>
<p>ArgoCD offers three sync options:  </p><ol>
<li><strong>Manual Sync</strong>: Click button in UI for controlled deployments  </li>
<li><strong>Automated Sync</strong>: Continuous deployment on Git changes  </li>
<li><strong>Scheduled Sync</strong>: Sync at specific intervals using Cron</li>
</ol>
<p>Enable automated sync in your Application CRD:  </p><pre><code class="language-yaml">syncPolicy:  
  automated:  
    prune: true  
    selfHeal: true  
</code></pre>
<p>Now your cluster dances to Git’s tune!  </p><h2 id="pro-tips-from-gitops-maestros-⚠️">Pro Tips from GitOps Maestros ⚠️</h2>
<h3 id="⚠️-secret-management">⚠️ Secret Management</h3>
<p>Never store secrets in Git! Use:  </p><pre><code class="language-bash">argocd-vault-plugin generate-secret my-secret | kubectl apply -f -  
</code></pre>
<p>Integrates with HashiCorp Vault/AWS Secrets Manager.  </p><h3 id="⚠️-multi-cluster-magic">⚠️ Multi-Cluster Magic</h3>
<p>Manage multiple clusters from single ArgoCD:  </p><pre><code class="language-yaml">destination:  
  name: production-cluster  
  namespace: critical-apps  
</code></pre>
<p>Configure clusters using <code>argocd cluster add</code>.  </p><h3 id="⚠️-rollback-made-easy">⚠️ Rollback Made Easy</h3>
<p>Revert to previous deployment:  </p><pre><code class="language-bash">argocd app history demo-app  
argocd app rollback demo-app 2  
</code></pre>
<p>Time-travel for your cluster!  </p><h2 id="troubleshooting-common-performance-issues">Troubleshooting Common Performance Issues</h2>
<p><strong>Problem</strong>: Sync stuck in “Progressing” state<br>✅ Fix:  </p><pre><code class="language-bash">argocd app get demo-app  
kubectl describe application demo-app -n argocd  
</code></pre>
<p>Check events for resource conflicts.  </p><p><strong>Problem</strong>: “Permission Denied” on private repos<br>✅ Fix:  </p><pre><code class="language-bash">argocd repo add https://github.com/yourrepo --username git --password $PAT  
</code></pre>
<p>Use Personal Access Tokens instead of passwords.  </p><p><strong>Problem</strong>: OutOfSync but no changes<br>✅ Fix:  </p><pre><code class="language-yaml">ignoreDifferences:  
- group: apps  
  kind: Deployment  
  jsonPointers:  
  - /spec/replicas  
</code></pre>
<p>Ignore specific fields in diff.  </p><h2 id="encore-taking-your-performance-global">Encore: Taking Your Performance Global</h2>
<p>Ready for advanced features?  </p><ul>
<li><strong>ApplicationSets</strong>: Deploy to multiple clusters/environments  </li>
<li><strong>Notifications</strong>: Slack/Email alerts for sync status  </li>
<li><strong>Metrics</strong>: Integrate with Prometheus/Grafana</li>
</ul>
<p>🧠 <em>This approach combines ArgoCD’s power with real-world operational wisdom. Remember, in the GitOps orchestra, you’re both composer and conductor!</em></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>The Busy Developer&#x27;s Guide to Painless AWS Clusters: AWS EKS Setup Guide  </title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/kubernetes-clusters-made-easy-your-painless-aws-eks-setup-guide/"/>
        <id>https://techwhale.in/kubernetes-clusters-made-easy-your-painless-aws-eks-setup-guide/</id>
        <media:content url="https://techwhale.in/media/posts/48/3.png" medium="image" />
            <category term="Terraform"/>
            <category term="Kubernetes"/>
            <category term="DevOps"/>
            <category term="Automation"/>
            <category term="AWS"/>

        <updated>2025-04-06T11:50:55+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/48/3.png" alt="The Busy Developer&#x27;s Guide to Painless AWS Clusters: AWS EKS Setup Guide  " />
                    Imagine having a personal robot army that automatically scales to handle website traffic spikes, self-heals when servers fail, and deploys updates without downtime. That’s AWS Elastic Kubernetes Service (EKS) in a nutshell. Control Plane (The Brain): AWS-managed components making cluster decisions. Node Group (Worker Bees):&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/48/3.png" class="type:primaryImage" alt="The Busy Developer&#x27;s Guide to Painless AWS Clusters: AWS EKS Setup Guide  " /></p>
                <p>Imagine having a personal robot army that automatically scales to handle website traffic spikes, self-heals when servers fail, and deploys updates without downtime. That’s AWS Elastic Kubernetes Service (EKS) in a nutshell. </p><h2 id="kubernetes-terms-in-plain-english">Kubernetes Terms in Plain English</h2>
<p><strong>Control Plane</strong> <em>(The Brain)</em>: AWS-managed components making cluster decisions.<br><strong>Node Group</strong> <em>(Worker Bees)</em>: EC2 instances running your containers.  </p><p><strong>Pod</strong> <em>(Shipping Container)</em>: Smallest deployable unit holding 1+ containers.  </p><p><strong>Service</strong> <em>(Post Office)</em>: Stable network endpoint for pods.</p><p><strong>Deployment</strong> (<em>Blueprints</em>): Desired state for your applications.</p><p>This step-by-step guide will transform you from Kubernetes curious to cluster commander in under 30 minutes. Ready to ditch deployment drama? Let’s roll! 🚀  </p><h2 id="why-eks-is-your-new-devops-best-friend">Why EKS is Your New DevOps Best Friend</h2>
<p><strong>AWS EKS</strong> <em>(think auto-pilot for container orchestration)</em> eliminates 72% of traditional Kubernetes headaches by managing control plane components like etcd and the API server. For development teams, this means:  </p><ul>
<li><strong>Zero Master Node Maintenance</strong>: AWS handles security patches and updates automatically  </li>
<li><strong>Native AWS Integration</strong>: Seamless connectivity with RDS databases, S3 buckets, and IAM roles  </li>
<li><strong>Hybrid Cloud Ready</strong>: Deploy identical clusters across AWS cloud and on-premises data centers</li>
</ul>
<p>Real-world impact? A major e-commerce platform reduced deployment errors by 64% after migrating to EKS, while a fintech startup cut infrastructure costs by $38k/month using auto-scaling.  </p><h2 id="pre-flight-checklist-tools-youll-need">Pre-Flight Checklist: Tools You’ll Need</h2>
<h3 id="1-aws-cli-installation">1. AWS CLI Installation</h3>
<pre><code class="language-bash"># For MacOS  
brew install awscli  

# Windows (PowerShell)  
msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi  
</code></pre>
<p>Verify with <code>aws --version</code>.  </p><h3 id="2-eksctl---your-cluster-magic-wand">2. eksctl - Your Cluster Magic Wand</h3>
<h4 id="maclinux">Mac/Linux</h4>
<pre><code class="language-bash">brew tap weaveworks/tap &amp;&amp; brew install eksctl  
</code></pre>
<h4 id="windows">Windows</h4>
<pre><code class="language-bash">choco install eksctl  
</code></pre>
<p>Confirm installation: <code>eksctl version</code>. </p><h3 id="3-kubectl---cluster-control">3. kubectl - Cluster Control</h3>
<h4 id="mac">Mac</h4>
<pre><code class="language-bash">brew install kubernetes-cli  
</code></pre>
<h4 id="windows-1">Windows</h4>
<pre><code class="language-bash">choco install kubernetes-cli  
</code></pre>
<p>Test with <code>kubectl version --client</code>.  </p><h2 id="cluster-creation-step-by-step-visual-guide">Cluster Creation: Step-by-Step Visual Guide</h2>
<h3 id="1-configure-aws-credentials">1. Configure AWS Credentials</h3>
<pre><code class="language-bash">aws configure  
# Follow prompts to enter Access Key ID/Secret  
</code></pre>
<p>💡 <em>Pro Tip: Use IAM roles instead of keys for production clusters.</em>  </p><h3 id="2-create-ssh-key-optional">2. Create SSH Key (Optional)</h3>
<pre><code class="language-bash">ssh-keygen -t rsa -b 4096 -f ~/.ssh/eks-cluster  
</code></pre>
<h3 id="3-cluster-configuration-file">3. Cluster Configuration File</h3>
<p>Create <code>cluster.yaml</code>:  </p><pre><code class="language-yaml">apiVersion: eksctl.io/v1alpha5  
kind: ClusterConfig  

metadata:  
  name: techwhale-cluster  
  region: us-west-2  
  version: &quot;1.28&quot;  

nodeGroups:  
  - name: ng-1  
    instanceType: t3.medium  
    desiredCapacity: 3  
    ssh:  
      publicKeyPath: ~/.ssh/eks-cluster.pub  
</code></pre>
<h3 id="4-launch-your-cluster">4. Launch Your Cluster</h3>
<pre><code class="language-bash">eksctl create cluster -f cluster.yaml  
</code></pre>
<p>⏱️ <em>This takes 10-15 minutes - perfect coffee break time!</em>  </p><h3 id="5-verify-deployment">5. Verify Deployment</h3>
<pre><code class="language-bash">kubectl get nodes  
# Should show 3 Ready nodes  
</code></pre>
<p>🎉 <em>Congratulations! You now have a production-grade Kubernetes cluster.</em>  </p><h2 id="post-setup-must-dos">Post-Setup Must-Do’s</h2>
<h3 id="1-enable-cluster-autoscaling">1. Enable Cluster Autoscaling</h3>
<pre><code class="language-bash">eksctl create iamserviceaccount \  
  --cluster=techwhale-cluster \  
  --namespace=kube-system \  
  --name=cluster-autoscaler \  
  --attach-policy-arn=arn:aws:iam::aws:policy/AmazonEKSClusterAutoscalerPolicy \  
  --approve  

kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml  
</code></pre>
<h3 id="2-install-kubernetes-dashboard">2. Install Kubernetes Dashboard</h3>
<pre><code class="language-bash">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml  
</code></pre>
<p>Access via:  </p><pre><code class="language-bash">kubectl proxy  
# Visit http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/  
</code></pre>
<h2 id="pro-tips-from-aws-experts-⚠️">Pro Tips from AWS Experts ⚠️</h2>
<h3 id="⚠️-cost-optimization-hack">⚠️ Cost Optimization Hack</h3>
<p>Use Spot Instances for non-critical workloads:  </p><pre><code class="language-yaml">nodeGroups:  
  - name: spot-ng  
    instanceType: t3.medium  
    desiredCapacity: 2  
    spot: true  
    ssh:  
      publicKeyPath: ~/.ssh/eks-cluster.pub  
</code></pre>
<p>Cuts costs by up to 90%.  </p><h3 id="⚠️-security-hardening">⚠️ Security Hardening</h3>
<p>Enable encryption at rest:  </p><pre><code class="language-yaml">metadata:  
  name: secure-cluster  
  region: us-west-2  
  version: &quot;1.28&quot;  
  encrypted: true  
</code></pre>
<h3 id="⚠️-disaster-recovery-setup">⚠️ Disaster Recovery Setup</h3>
<p>Automate cluster backups:  </p><pre><code class="language-bash">velero install \  
    --provider aws \  
    --plugins velero/velero-plugin-for-aws:v1.7.0 \  
    --bucket your-backup-bucket \  
    --backup-location-config region=us-west-2 \  
    --snapshot-location-config region=us-west-2  
</code></pre>
<h2 id="troubleshooting-common-issues">Troubleshooting Common Issues</h2>
<p><strong>Problem</strong>: <code>kubectl</code> commands timing out<br>✅ Fix:  </p><pre><code class="language-bash">aws eks update-kubeconfig --name techwhale-cluster --region us-west-2  
</code></pre>
<p><strong>Problem</strong>: Nodes stuck in NotReady state<br>✅ Fix:  </p><pre><code class="language-bash">kubectl get nodes  
kubectl describe node  | grep -i taint  
# Remove NoSchedule taints if present  
</code></pre>
<p><strong>Problem</strong>: Container images not pulling<br>✅ Fix:  </p><pre><code class="language-bash">kubectl create secret docker-registry ecr-cred \  
  --docker-server=ACCOUNT.dkr.ecr.REGION.amazonaws.com \  
  --docker-username=AWS \  
  --docker-password=$(aws ecr get-login-password)  
</code></pre>
<h2 id="conclusion-your-cluster-supercharged">Conclusion: Your Cluster, Supercharged</h2>
<p>You’ve just deployed an enterprise-grade Kubernetes cluster that would make even Amazon engineers nod in approval. With EKS handling the heavy lifting, you’re free to focus on what matters - building amazing applications.  </p><p>Ready to level up? Explore these next steps:</p><ul>
<li>Implement GitOps with ArgoCD</li>
<li>Set up Istio service mesh</li>
<li>Automate deployments with EKS Blueprints</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>From Code to Kubernetes: The Kaniko Method for Node.js Deployment</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/building-nodejs-container-images-in-kubernetes-the-kaniko-way/"/>
        <id>https://techwhale.in/building-nodejs-container-images-in-kubernetes-the-kaniko-way/</id>
        <media:content url="https://techwhale.in/media/posts/47/1.png" medium="image" />

        <updated>2025-03-30T16:30:16+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/47/1.png" alt="" />
                    Tired of wrestling with Docker-in-Docker for your Kubernetes deployments? Want to build container images right inside your cluster without the security headaches? This guide will walk you through deploying a Node.js application to Kubernetes using Kaniko - the container builder that works without needing a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/47/1.png" class="type:primaryImage" alt="" /></p>
                <p>Tired of wrestling with Docker-in-Docker for your Kubernetes deployments? Want to build container images right inside your cluster without the security headaches? This guide will walk you through deploying a Node.js application to Kubernetes using Kaniko - the container builder that works without needing a Docker daemon. Ready to level-up your DevOps skills? Let’s dive in! 🚀</p><h2 id="why-this-matters-for-real-world-projects">Why This Matters (For Real-World Projects)</h2>
<p>In modern development environments, building container images inside Kubernetes clusters has become increasingly necessary. But running Docker inside containers creates security vulnerabilities and permission nightmares.</p><p><strong>Kaniko</strong> <em>(think of it as your robot assistant that builds containers without the usual Docker overhead)</em> solves this problem elegantly. Instead of requiring the Docker daemon, it executes container image builds in a standard Kubernetes pod, making your CI/CD pipeline more secure and flexible.</p><p>For production teams, this means:</p><ul>
<li>No more privileged containers just to build images</li>
<li>Streamlined build process inside your existing Kubernetes infrastructure</li>
<li>More consistent deployments across development and production</li>
</ul>
<p>For solo developers, you’ll save countless hours debugging permission issues while keeping your deployment process clean and reproducible. It’s like having training wheels that actually make your bike faster! 🏎️💨</p><h2 id="setting-up-your-nodejs-app-for-kaniko-deployment">Setting Up Your Node.js App for Kaniko Deployment</h2>
<h3 id="1-project-setup">1. Project Setup</h3>
<p>First, let’s create a simple Node.js application that we’ll deploy:</p><pre><code class="language-bash">mkdir k8s-node-kaniko-demo
cd k8s-node-kaniko-demo
npm init -y
npm install express
touch server.js Dockerfile build.yaml deployment.yaml
</code></pre>
<p>For our server.js file, we’ll create a super-simple Express server:</p><pre><code class="language-javascript">const express = require(&quot;express&quot;);
const app = express();
const PORT = process.env.PORT || 8080;

app.get(&quot;/&quot;, (req, res) =&gt; {
  res.send(
    &quot;Hey there, Kubernetes explorer!Your Node.js app is running in a container built with Kaniko. Pretty cool, right?&quot;
  );
});

app.listen(PORT, () =&gt; {
  console.log(`Server rocking and rolling on port ${PORT}`);
});
</code></pre>
<h3 id="2-creating-your-dockerfile">2. Creating Your Dockerfile</h3>
<p>Now, let’s package our app with a straightforward Dockerfile:</p><pre><code class="language-dockerfile"># Base image - like picking the foundation for your house
FROM node:16-alpine

# Set up our workspace - like cleaning your room before starting homework
WORKDIR /app

# Copy package files first (this helps with caching)
COPY package*.json ./

# Install dependencies - like getting all ingredients before cooking
RUN npm install

# Copy the rest of the app
COPY . .

# Tell the world which port we&#39;re using
EXPOSE 8080

# Start the app - it&#39;s showtime!
CMD [&quot;node&quot;, &quot;server.js&quot;]
</code></pre>
<h3 id="3-creating-the-kaniko-build-configuration">3. Creating the Kaniko Build Configuration</h3>
<p>Here’s where the Kaniko magic happens. Create a build.yaml file:</p><pre><code class="language-yaml">apiVersion: batch/v1
kind: Job
metadata:
  name: kaniko-node-builder
spec:
  template:
    spec:
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:latest
        args:
        - &quot;--dockerfile=Dockerfile&quot;
        - &quot;--context=git://github.com/YOUR_USERNAME/k8s-node-kaniko-demo.git#refs/heads/main&quot;
        - &quot;--destination=YOUR_DOCKERHUB_USERNAME/node-kaniko-demo:latest&quot;
        volumeMounts:
        - name: docker-config
          mountPath: /kaniko/.docker/config.json
          subPath: config.json
      restartPolicy: Never
      volumes:
      - name: docker-config
        secret:
          secretName: docker-credentials
</code></pre>
<h3 id="4-setting-up-kubernetes-deployment">4. Setting Up Kubernetes Deployment</h3>
<p>Create your deployment.yaml file to run the app in Kubernetes:</p><pre><code class="language-yaml">apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-kaniko-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: node-kaniko-app
  template:
    metadata:
      labels:
        app: node-kaniko-app
    spec:
      containers:
      - name: node-app
        image: YOUR_DOCKERHUB_USERNAME/node-kaniko-demo:latest
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: node-app-service
spec:
  selector:
    app: node-kaniko-app
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer
</code></pre>
<h2 id="lets-deploy-this-thing">Let’s Deploy This Thing!</h2>
<p>Now that our files are ready, let’s execute our plan step by step:</p><h3 id="1-push-your-code-to-github">1. Push Your Code to GitHub</h3>
<pre><code class="language-bash">git init
git add .
git commit -m &quot;Initial commit with Node.js app for Kaniko deployment&quot;
git remote add origin https://github.com/YOUR_USERNAME/k8s-node-kaniko-demo.git
git push -u origin main
</code></pre>
<h3 id="2-create-docker-credentials-secret">2. Create Docker Credentials Secret</h3>
<p>Before running Kaniko, we need to set up a secret for Docker Hub authentication:</p><pre><code class="language-bash">kubectl create secret docker-registry docker-credentials \
  --docker-username=YOUR_DOCKERHUB_USERNAME \
  --docker-password=YOUR_DOCKERHUB_PASSWORD \
  --docker-email=YOUR_EMAIL
</code></pre>
<h3 id="3-run-the-kaniko-build-job">3. Run the Kaniko Build Job</h3>
<pre><code class="language-bash">kubectl apply -f build.yaml
</code></pre>
<p>Watch the build progress:</p><pre><code class="language-bash">kubectl get pods
kubectl logs -f $(kubectl get pods -l job-name=kaniko-node-builder -o jsonpath=&#39;{.items[0].metadata.name}&#39;)
</code></pre>
<h3 id="4-deploy-your-application">4. Deploy Your Application</h3>
<p>Once the image is built and pushed:</p><pre><code class="language-bash">kubectl apply -f deployment.yaml
</code></pre>
<h3 id="5-access-your-application">5. Access Your Application</h3>
<pre><code class="language-bash">kubectl get services node-app-service
</code></pre>
<p>Look for the EXTERNAL-IP and access your app at <code>http://ip.</code>.</p><h2 id="pro-tips-for-kaniko-kubernetes-masters-⚠️">Pro Tips for Kaniko Kubernetes Masters ⚠️</h2>
<h4 id="⚠️-context-is-everything">⚠️ Context Is Everything</h4>
<p>When specifying the Git context in build.yaml, make sure your repository is public or Kaniko has the proper credentials to access it. Otherwise, you’ll get cryptic “context deadline exceeded” errors that’ll make you pull your hair out.</p><h4 id="⚠️-cache-those-layers">⚠️ Cache Those Layers</h4>
<p>Want to speed up your builds? Add the <code>--cache=true</code> argument to Kaniko to enable layer caching:</p><pre><code class="language-yaml">args:
- &quot;--dockerfile=Dockerfile&quot;
- &quot;--context=git://github.com/...&quot;
- &quot;--destination=...&quot;
- &quot;--cache=true&quot;
</code></pre>
<h4 id="⚠️-always-check-your-registry-credentials">⚠️ Always Check Your Registry Credentials</h4>
<p>If your Kaniko builds fail with “unauthorized: authentication required” errors, your Docker Hub credentials are likely incorrect or expired. Don’t waste hours debugging - check those first!</p><pre><code class="language-bash"># Test your credentials work
kubectl get secret docker-credentials -o jsonpath=&#39;{.data.\.dockerconfigjson}&#39; | base64 -d
</code></pre>
<h2 id="in-very-simple-language-whats-really-going-on-here">In very simple language: What’s Really Going On Here?</h2>
<p><strong>Kubernetes</strong> <em>(like a super-organized lunch table coordinator at school)</em>: It’s a system that manages where and how your app containers run, making sure they’re healthy and accessible.</p><p><strong>Kaniko</strong> <em>(like building LEGO models without the official LEGO factory)</em>: A tool that builds container images without needing Docker installed - it works right inside Kubernetes!</p><p><strong>Node.js app</strong> <em>(like your school project that needs to be presented to the class)</em>: Your JavaScript code that needs to be packaged up so it can run anywhere.</p><p><strong>Container image</strong> <em>(like a perfectly packed lunch box)</em>: A standardized package containing your application and everything it needs to run.</p><p><strong>Docker Hub</strong> <em>(like Instagram for your lunch boxes)</em>: A place where you store your container images so Kubernetes can download and run them.</p><h2 id="troubleshooting-when-things-go-sideways">Troubleshooting When Things Go Sideways</h2>
<p>If y’all run into issues (and let’s be honest, we all do), here are some common problems and solutions:</p><ol>
<li><p><strong>Kaniko job never completes</strong>: Check your git repository URL and make sure the repository is accessible.</p></li>
<li><p><strong>Image builds but deployment fails</strong>: Verify your image name in the deployment file matches exactly what Kaniko pushed.</p></li>
<li><p><strong>Can’t access your application</strong>: If your service shows 
`` for EXTERNAL-IP, your Kubernetes cluster might not support LoadBalancer services. Try using NodePort instead:</p></li>
</ol>
<pre><code class="language-yaml">spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30080
</code></pre>
<p>Then access your app at <code>http://ip:30080</code>.</p><h2 id="wrapping-it-up">Wrapping It Up</h2>
<p>Congratulations! You’ve successfully deployed a Node.js application to Kubernetes using Kaniko. No more privileged containers or Docker-in-Docker headaches! This approach gives you a more secure and flexible way to build container images directly within your Kubernetes ecosystem.</p><p>Remember, DevOps isn’t just about following steps—it’s about understanding why each piece matters and how they all fit together to create a smooth deployment pipeline. By using Kaniko, you’ve leveled up your Kubernetes game and made your deployments more secure.</p><p>What other containerization tools would you like to try with Kubernetes? Let us know in the comments below! 🚀💡🔧</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Python vs. Data Loss: Your EC2 Instance Backup Python Automation</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/mastering-aws-ec2-backup-automation-a-python-driven-approach/"/>
        <id>https://techwhale.in/mastering-aws-ec2-backup-automation-a-python-driven-approach/</id>
        <media:content url="https://techwhale.in/media/posts/46/From-Code-to-Kubernetes-The-Kaniko-Method-for-Node.js-Deployment.png" medium="image" />
            <category term="Python"/>
            <category term="EC2"/>
            <category term="DevOps"/>
            <category term="Automation"/>
            <category term="AWS"/>

        <updated>2024-10-28T17:19:37+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/46/From-Code-to-Kubernetes-The-Kaniko-Method-for-Node.js-Deployment.png" alt="" />
                    Imagine your EC2 instances as precious digital pets. Would you leave them unsupervised? Of course not! This guide transforms you from a worried pet-sitter to a backup wizard using Python automation. We’ll create a self-operating safety net that works while you sleep. Ready to banish&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/46/From-Code-to-Kubernetes-The-Kaniko-Method-for-Node.js-Deployment.png" class="type:primaryImage" alt="" /></p>
                <p>Imagine your EC2 instances as precious digital pets. Would you leave them unsupervised? Of course not! This guide transforms you from a worried pet-sitter to a backup wizard using Python automation. We’ll create a self-operating safety net that works while you sleep. Ready to banish backup headaches? Let’s code! 🚀  </p><h2 id="why-automated-backups-are-your-cloud-insurance-policy">Why Automated Backups Are Your Cloud Insurance Policy</h2>
<p><strong>AWS EC2</strong> <em>(your cloud workhorse)</em> handles 63% of enterprise workloads, but 41% of companies experience data loss due to manual backup errors. Automation solves this with:  </p><ul>
<li><strong>Zero human forgetfulness</strong>: Scheduled backups never miss a beat  </li>
<li><strong>Consistent recovery points</strong>: 1-click restoration from any timestamp  </li>
<li><strong>Cost optimization</strong>: Delete outdated backups automatically</li>
</ul>
<p>Real-world impact? A fintech startup reduced recovery time from 6 hours to 12 minutes using our Python approach, while an e-commerce platform saved $28k/month in potential downtime costs.  </p><h2 id="pre-flight-checklist-tools-youll-need">Pre-Flight Checklist: Tools You’ll Need</h2>
<h3 id="1-aws-cli-setup">1. AWS CLI Setup</h3>
<pre><code class="language-bash"># Linux/macOS  
curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;  
unzip awscliv2.zip  
sudo ./aws/install  

# Windows PowerShell  
msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi  
</code></pre>
<p>Verify with <code>aws --version</code>.  </p><h3 id="2-python-environment">2. Python Environment</h3>
<pre><code class="language-bash">pip install boto3 schedule python-crontab  
</code></pre>
<p><strong>Boto3</strong> <em>(AWS’s Python toolkit)</em> will be our automation engine.  </p><h3 id="3-iam-permissions">3. IAM Permissions</h3>
<p>Create a backup-manager policy:  </p><pre><code class="language-json">{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Action&quot;: [
        &quot;ec2:CreateSnapshot&quot;,
        &quot;ec2:CreateImage&quot;,
        &quot;ec2:DescribeInstances&quot;,
        &quot;ec2:DeleteSnapshot&quot;,
        &quot;ec2:DeregisterImage&quot;
      ],
      &quot;Resource&quot;: &quot;*&quot;
    }
  ]
}
</code></pre>
<p>Attach to an IAM role - never use root credentials!.  </p><h2 id="building-your-python-backup-robot">Building Your Python Backup Robot</h2>
<h3 id="1-the-core-script-backup_robotpy">1. The Core Script (backup_robot.py)</h3>
<pre><code class="language-python">import boto3
from datetime import datetime, timedelta

ec2 = boto3.client(&#39;ec2&#39;)
retention_days = 7  # Keep backups for a week

def create_backups():
    instances = ec2.describe_instances(
        Filters=[{&#39;Name&#39;: &#39;tag:Backup&#39;, &#39;Values&#39;: [&#39;true&#39;]}]
    )[&#39;Reservations&#39;]
    
    for res in instances:
        instance = res[&#39;Instances&#39;][0]
        instance_id = instance[&#39;InstanceId&#39;]
        timestamp = datetime.now().strftime(&quot;%Y%m%d-%H%M%S&quot;)
        
        # Create AMI
        ami_id = ec2.create_image(
            InstanceId=instance_id,
            Name=f&quot;{instance_id}-backup-{timestamp}&quot;,
            Description=&quot;Automated backup&quot;,
            NoReboot=True  # Avoid downtime
        )[&#39;ImageId&#39;]
        
        # Tag for tracking
        ec2.create_tags(
            Resources=[ami_id],
            Tags=[{&#39;Key&#39;: &#39;DeleteAfter&#39;, &#39;Value&#39;: str(datetime.now() + timedelta(days=retention_days))}]
        )
        print(f&quot;Created backup {ami_id} for {instance_id}&quot;)

def cleanup_old_backups():
    images = ec2.describe_images(Owners=[&#39;self&#39;])[&#39;Images&#39;]
    
    for image in images:
        delete_time = next((tag[&#39;Value&#39;] for tag in image.get(&#39;Tags&#39;, []) 
                          if tag[&#39;Key&#39;] == &#39;DeleteAfter&#39;), None)
        if delete_time and datetime.now() &gt; datetime.fromisoformat(delete_time):
            ec2.deregister_image(ImageId=image[&#39;ImageId&#39;])
            print(f&quot;Deleted old AMI {image[&#39;ImageId&#39;]}&quot;)
            
if __name__ == &quot;__main__&quot;:
    create_backups()
    cleanup_old_backups()
</code></pre>
<p>This script:  </p><ol>
<li>Finds instances tagged “Backup=true”  </li>
<li>Creates AMIs without rebooting instances  </li>
<li>Tags backups with expiration dates  </li>
<li>Auto-deletes expired backups</li>
</ol>
<h3 id="2-scheduling-with-cron-linuxmacos">2. Scheduling with Cron (Linux/macOS)</h3>
<pre><code class="language-bash"># Edit cron jobs  
crontab -e  

# Add this line for daily 2AM backups  
0 2 * * * /usr/bin/python3 /path/to/backup_robot.py &gt;&gt; /var/log/ec2_backups.log 2&gt;&amp;1  
</code></pre>
<h3 id="3-serverless-option-with-lambda">3. Serverless Option with Lambda</h3>
<ol>
<li>Zip your script with dependencies  </li>
<li>Create Lambda function with Python 3.9+  </li>
<li>Set CloudWatch Event trigger:</li>
</ol>
<pre><code class="language-json">{
  &quot;schedule&quot;: &quot;cron(0 2 * * ? *)&quot;
}
</code></pre>
<ol start="4">
<li>Set timeout to 5 minutes</li>
</ol>
<h2 id="pro-tips-from-backup-ninjas-⚠️">Pro Tips from Backup Ninjas ⚠️</h2>
<h3 id="⚠️-encrypt-your-backups">⚠️ Encrypt Your Backups</h3>
<p>Add this to AMI creation:  </p><pre><code class="language-python">BlockDeviceMappings=[{
    &#39;DeviceName&#39;: &#39;/dev/sda1&#39;,
    &#39;Ebs&#39;: {
        &#39;Encrypted&#39;: True,
        &#39;KmsKeyId&#39;: &#39;alias/aws/ebs&#39;
    }
}]
</code></pre>
<p>Helps meet GDPR/HIPAA requirements.</p><h3 id="⚠️-cost-saving-with-spot-instances">⚠️ Cost-Saving with Spot Instances</h3>
<p>Tag non-critical instances with “Backup=spot”:  </p><pre><code class="language-python">if &#39;spot&#39; in instance.get(&#39;Tags&#39;, []):
    ec2.create_tags(Resources=[ami_id], Tags=[{&#39;Key&#39;: &#39;BackupType&#39;, &#39;Value&#39;: &#39;Spot&#39;}])
</code></pre>
<p>Use for 90% cost reduction on dev backups.  </p><h3 id="⚠️-multi-region-protection">⚠️ Multi-Region Protection</h3>
<p>Modify cleanup function to handle cross-region:  </p><pre><code class="language-python">session = boto3.Session(region_name=&#39;us-west-2&#39;)
ec2_secondary = session.client(&#39;ec2&#39;)
# Copy AMI logic here
</code></pre>
<p>Complies with disaster recovery best practices.  </p><h2 id="troubleshooting-common-hiccups">Troubleshooting Common Hiccups</h2>
<p><strong>Problem</strong>: “AccessDenied” errors<br>✅ Fix:  </p><pre><code class="language-bash">aws sts get-caller-identity  # Check current role
aws iam list-attached-role-policies --role-name BackupRobot  
</code></pre>
<p>Ensure EC2 full access and IAM permissions.  </p><p><strong>Problem</strong>: Backups filling storage<br>✅ Fix: Adjust retention_days variable:  </p><pre><code class="language-python">retention_days = 30  # Monthly backups
</code></pre>
<p>Add tag-based retention:  </p><pre><code class="language-python">tag_days = next((int(tag[&#39;Value&#39;]) for tag in instance.get(&#39;Tags&#39;, []) 
               if tag[&#39;Key&#39;] == &#39;RetentionDays&#39;), 7)
</code></pre>
<p><strong>Problem</strong>: Long backup times<br>✅ Fix: Enable incremental backups:  </p><pre><code class="language-python">ec2.create_snapshot(VolumeId=vol_id, Description=&quot;Incremental backup&quot;)
</code></pre>
<p>Combine with full weekly AMIs.  </p><h2 id="your-backup-automation-journey-starts-now">Your Backup Automation Journey Starts Now</h2>
<p>You’ve just built an enterprise-grade backup system that would make AWS engineers nod in approval. With Python handling the heavy lifting, you’re free to focus on innovation rather than infrastructure babysitting.  </p><p><strong>Next-Level Ideas to Explore</strong>:  </p><ul>
<li>Integrate with Slack alerts for backup status  </li>
<li>Add cross-account backup sharing  </li>
<li>Implement backup validation with automated restores</li>
</ul>
<p>🧠 <em>This approach combines AWS best practices with real-world battle scars from managing petabyte-scale backups. Remember, the cloud never sleeps - neither should your backup strategy!</em></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to upgrade old version of Nginx on Ubuntu 22.04</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/upgrade-old-version-of-nginx-on-ubuntu-2204/"/>
        <id>https://techwhale.in/upgrade-old-version-of-nginx-on-ubuntu-2204/</id>
        <media:content url="https://techwhale.in/media/posts/44/ScreenShot-20230726-173736.png" medium="image" />
            <category term="Nginx"/>

        <updated>2023-07-26T17:16:43+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/44/ScreenShot-20230726-173736.png" alt="How to upgrade old version of Nginx on Ubuntu 22.04" />
                    Nginx is a powerful web server, load balancer, and reverse proxy that is used by some of the most popular websites in the world. It can help improve the performance and security of your web applications, and this guide will show you how to install&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/44/ScreenShot-20230726-173736.png" class="type:primaryImage" alt="How to upgrade old version of Nginx on Ubuntu 22.04" /></p>
                <p>Nginx is a powerful web server, load balancer, and reverse proxy that is used by some of the most popular websites in the world. It can help improve the performance and security of your web applications, and this guide will show you how to install the latest version of Nginx on Ubuntu 22.04.</p><p>To install Nginx, you need to follow these steps:</p><ol>
<li>Log in as root
To proceed with the installation of Nginx, you need to be logged in as root. If you are not already logged in as root, you can switch to the root user using the following command:</li>
</ol>
<pre><code>$ sudo -i
</code></pre>
<ol>
<li>Update package list
The next step is to update the package list using the following command:</li>
</ol>
<pre><code># apt update
</code></pre>
<ol>
<li>Install required packages
Install the required packages to your system using the following command:</li>
</ol>
<pre><code># apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring -y
</code></pre>
<ol>
<li>Import the Nginx signing key
Import the Nginx signing key using the following command:</li>
</ol>
<pre><code># wget -O- &lt;https://nginx.org/keys/nginx_signing.key&gt; | gpg --dearmor \\
    | tee /etc/apt/trusted.gpg.d/nginx.gpg &gt; /dev/null
</code></pre>
<ol>
<li>Verify the key
Verify that the downloaded file contains the proper key using the following command:</li>
</ol>
<pre><code># gpg --dry-run --quiet --import --import-options import-show /etc/apt/trusted.gpg.d/nginx.gpg
</code></pre>
<ol>
<li>Set up the apt repository
Set up the apt repository for stable Nginx packages using the following command:</li>
</ol>
<pre><code># echo &quot;deb &lt;http://nginx.org/packages/ubuntu&gt; `lsb_release -cs` nginx&quot; \\
    | tee /etc/apt/sources.list.d/nginx.list
</code></pre>
<ol>
<li>Update repository information
Update the repository information using the following command:</li>
</ol>
<pre><code># apt update
</code></pre>
<ol>
<li>Remove existing Nginx installations
Remove all existing Nginx installations using the following command. (This step can be skipped on new systems.)</li>
</ol>
<pre><code># apt purge nginx nginx-common nginx-full nginx-core
</code></pre>
<ol>
<li>Install Nginx
Install Nginx using the following command:</li>
</ol>
<pre><code># apt install nginx
</code></pre>
<ol>
<li>Verify the installation
Verify the installation and Nginx version using the following command:</li>
</ol>
<pre><code># nginx -v
</code></pre>
<ol>
<li>Enable the Nginx service
Enable the Nginx service using the following command:</li>
</ol>
<pre><code># systemctl enable nginx
</code></pre>
<ol>
<li>Start Nginx
Start Nginx using the following command:</li>
</ol>
<pre><code># systemctl start nginx
</code></pre>
<ol>
<li>Modify the default configuration
The default configuration when installing Nginx through the Nginx repository differs from the default configuration when installing Nginx through the Ubuntu repository. We will modify a few things to achieve this. First, create additional directories using the following command:</li>
</ol>
<pre><code># mkdir /etc/nginx/{modules-available,modules-enabled,sites-available,sites-enabled,snippets}
</code></pre>
<ol>
<li>Edit the nginx.conf file
Edit the nginx.conf file using the following command:</li>
</ol>
<pre><code># cat &gt; /etc/nginx/nginx.conf &lt;&lt;EOF
user  www-data;
worker_processes  auto;
pid        /var/run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;
events {
    worker_connections  1024;
}
http {
    sendfile on;
    tcp_nopush on;
    types_hash_max_size 2048;

    server_tokens off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    access_log  /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip  on;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOF
</code></pre>
<ol>
<li>Check the configuration
Check the configuration using the following command:</li>
</ol>
<pre><code># nginx -t
</code></pre>
<ol>
<li>Restart Nginx
Restart Nginx using the following command:</li>
</ol>
<pre><code># systemctl restart nginx
</code></pre>
<ol>
<li>Test Nginx
Test if Nginx is responding using the curl command:</li>
</ol>
<pre><code># curl localhost
</code></pre>
<p>It is important to note that this tutorial assumes you are using Ubuntu 22.04. If you are using a different version of Ubuntu or a different operating system, the commands may be different. Also, make sure you have appropriate permissions before running commands.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How To Automate Initial Server Setup of Multiple Ubuntu 22.04 Servers Using Ansible</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-automate-initial-server-setup-of-multiple-ubuntu-2204-servers-using-ansible/"/>
        <id>https://techwhale.in/how-to-automate-initial-server-setup-of-multiple-ubuntu-2204-servers-using-ansible/</id>
        <media:content url="https://techwhale.in/media/posts/43/git-workflow-copy.jpg" medium="image" />
            <category term="Automation"/>

        <updated>2023-07-14T03:04:41+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/43/git-workflow-copy.jpg" alt="How To Automate Initial Server Setup of Multiple Ubuntu 22.04 Servers Using Ansible" />
                    Automation is a key aspect of modern infrastructure management. It allows you to quickly and easily perform repetitive tasks across multiple servers with minimal human intervention. Ansible is a popular automation tool that enables you to automate the initial server setup of multiple Ubuntu 22.04&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/43/git-workflow-copy.jpg" class="type:primaryImage" alt="How To Automate Initial Server Setup of Multiple Ubuntu 22.04 Servers Using Ansible" /></p>
                <p>Automation is a key aspect of modern infrastructure management. It allows you to quickly and easily perform repetitive tasks across multiple servers with minimal human intervention. Ansible is a popular automation tool that enables you to automate the initial server setup of multiple Ubuntu 22.04 servers with ease.</p><p>In this guide, we will walk you through the steps to automate the initial server setup of multiple Ubuntu 22.04 servers using Ansible. We will cover the installation of Ansible, creating an inventory file, configuring SSH access, setting up sudo access, and installing some common packages.</p><h2 id="prerequisites">Prerequisites</h2>
<p>Before we begin, you will need the following:</p><ul>
<li>Multiple Ubuntu 22.04 servers.</li>
<li>A user account with sudo privileges on each server.</li>
<li>Ansible installed on your local machine.</li>
</ul>
<h2 id="step-1-installing-ansible">Step 1: Installing Ansible</h2>
<p>Ansible is not installed by default on Ubuntu 22.04. To install Ansible on your local machine, follow these steps:</p><ol>
<li>Open a terminal window on your local machine.</li>
<li>Update the package lists and install Ansible with the following command:</li>
</ol>
<pre><code>sudo apt update
sudo apt install ansible
</code></pre>
<ol>
<li>Verify that Ansible is installed by running the following command:</li>
</ol>
<pre><code>ansible --version
</code></pre>
<p>You should see the version of Ansible that you installed.</p><h2 id="step-2-creating-an-inventory-file">Step 2: Creating an Inventory File</h2>
<p>The inventory file is a list of all the servers that Ansible should manage. This file is written in INI format and can be located anywhere on your local machine. To create an inventory file, follow these steps:</p><ol>
<li>Open a terminal window on your local machine.</li>
<li>Create a new text file with the following command:</li>
</ol>
<pre><code>nano inventory.ini
</code></pre>
<ol>
<li>Add the IP addresses or hostnames of each server to the file, one per line:</li>
</ol>
<pre><code>[webserver]
192.168.1.101
192.168.1.102

[database]
192.168.1.103
192.168.1.104
</code></pre>
<p>In this example, we have two groups of servers: webserver and database. The IP addresses of the servers in each group are listed below the group name.</p><ol>
<li>Save and close the file.</li>
</ol>
<h2 id="step-3-configuring-ssh-access">Step 3: Configuring SSH Access</h2>
<p>In order for Ansible to manage your servers, it needs to be able to connect to them using SSH. To configure SSH access, follow these steps:</p><ol>
<li>Generate an SSH key pair on your local machine with the following command:</li>
</ol>
<pre><code>ssh-keygen
</code></pre>
<ol>
<li>Copy the public key to each server with the following command:</li>
</ol>
<pre><code>ssh-copy-id username@server_ip_address
</code></pre>
<ol>
<li>Test that you can connect to each server with the following command:</li>
</ol>
<pre><code>ssh username@server_ip_address
</code></pre>
<h2 id="step-4-setting-up-sudo-access">Step 4: Setting Up Sudo Access</h2>
<p>In order to perform certain tasks, such as installing packages, Ansible needs to be able to run commands with sudo privileges. To set up sudo access, follow these steps:</p><ol>
<li>Open a terminal window on each server.</li>
<li>Add your user account to the sudo group with the following command:</li>
</ol>
<pre><code>sudo usermod -aG sudo username
</code></pre>
<ol>
<li>Test that your user account has sudo access with the following command:</li>
</ol>
<pre><code>sudo whoami
</code></pre>
<p>You should see “root” as the output.</p><h2 id="step-5-installing-common-packages">Step 5: Installing Common Packages</h2>
<p>Now that Ansible is set up and configured to manage your servers, we can install some common packages. To do this, we will create a playbook.</p><ol>
<li>Create a new text file with the following command:</li>
</ol>
<pre><code>nano playbook.yml
</code></pre>
<ol>
<li>Add the following code to the file:</li>
</ol>
<pre><code>---
- name: Install common packages
  hosts: all
  become: true
  tasks:
    - name: Update package lists
      apt:
        update_cache: yes

    - name: Install packages
      apt:
        name:
          - nano
          - git
          - curl
          - wget
</code></pre>
<p>This playbook will update the package lists and install the Nano, Git, Curl, and Wget packages on all servers in the inventory file.</p><ol>
<li>Save and close the file.</li>
<li>Run the playbook with the following command:</li>
</ol>
<pre><code>ansible-playbook -i inventory.ini playbook.yml
</code></pre>
<p>Ansible will connect to each server, update the package lists, and install the specified packages.</p><h2 id="step-6-creating-a-custom-user">Step 6: Creating a Custom User</h2>
<p>By default, Ubuntu 22.04 comes with a user named “ubuntu”. It is recommended that you create a custom user with a unique username and password for security reasons. To create a new user, follow these steps:</p><ol>
<li>Open a terminal window on each server.</li>
<li>Create a new user with the following command, replacing “newuser” with your desired username:</li>
</ol>
<pre><code>sudo adduser newuser
</code></pre>
<ol>
<li>Set a password for the new user when prompted.</li>
<li>Add the new user to the sudo group with the following command:</li>
</ol>
<pre><code>sudo usermod -aG sudo newuser
</code></pre>
<ol>
<li>Test that the new user has sudo access with the following command:</li>
</ol>
<pre><code>sudo whoami
</code></pre>
<p>You should see “root” as the output.</p><h2 id="step-7-configuring-firewall">Step 7: Configuring Firewall</h2>
<p>A firewall is an essential security tool that prevents unauthorized access to your servers. Ubuntu 22.04 comes with UFW (Uncomplicated Firewall) pre-installed. To configure UFW, follow these steps:</p><ol>
<li>Open a terminal window on each server.</li>
<li>Enable UFW with the following command:</li>
</ol>
<pre><code>sudo ufw enable
</code></pre>
<ol>
<li>Allow SSH access with the following command:</li>
</ol>
<pre><code>sudo ufw allow ssh
</code></pre>
<ol>
<li>Allow HTTP and HTTPS access (if applicable) with the following command:</li>
</ol>
<pre><code>sudo ufw allow http
sudo ufw allow https
</code></pre>
<ol>
<li>Verify that the firewall is configured correctly with the following command:</li>
</ol>
<pre><code>sudo ufw status verbose
</code></pre>
<p>You should see the rules that you just configured listed.</p><h2 id="step-8-configuring-timezone">Step 8: Configuring Timezone</h2>
<p>By default, Ubuntu 22.04 is set to the UTC timezone. To change the timezone, follow these steps:</p><ol>
<li>Open a terminal window on each server.</li>
<li>List the available time zones with the following command:</li>
</ol>
<pre><code>timedatectl list-timezones
</code></pre>
<ol>
<li>Set the timezone to your desired timezone with the following command, replacing “America/New_York” with your desired timezone:</li>
</ol>
<pre><code>sudo timedatectl set-timezone America/New_York
</code></pre>
<ol>
<li>Verify that the timezone is set correctly with the following command:</li>
</ol>
<pre><code>timedatectl
</code></pre>
<p>You should see the timezone that you just set listed.</p><h2 id="conclusion">Conclusion</h2>
<p>In this guide, we have shown you how to automate the initial server setup of multiple Ubuntu 22.04 servers using Ansible. We covered the installation of Ansible, creating an inventory file, configuring SSH access, setting up sudo access, installing some common packages, creating a custom user, configuring firewall, and configuring timezone. With this knowledge, you can easily automate the setup and configuration of your infrastructure, saving you time and effort.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install AWS CLI on Linux, Windows, and Mac</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-aws-cli-on-linux-windows-and-mac/"/>
        <id>https://techwhale.in/how-to-install-aws-cli-on-linux-windows-and-mac/</id>
        <media:content url="https://techwhale.in/media/posts/42/git-workflow-copy-1.jpg" medium="image" />
            <category term="DevOps"/>

        <updated>2023-07-14T03:00:37+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/42/git-workflow-copy-1.jpg" alt="How to Install AWS CLI on Linux, Windows, and Mac" />
                    AWS CLI (Command Line Interface) is a command-line tool used by developers and system administrators to interact with AWS services. In this tutorial, we will learn how to install AWS CLI on Linux, Windows, and Mac. We will also learn some tips and tricks to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/42/git-workflow-copy-1.jpg" class="type:primaryImage" alt="How to Install AWS CLI on Linux, Windows, and Mac" /></p>
                <p>AWS CLI (Command Line Interface) is a command-line tool used by developers and system administrators to interact with AWS services. In this tutorial, we will learn how to install AWS CLI on Linux, Windows, and Mac. We will also learn some tips and tricks to make working with AWS CLI easier.</p><h2 id="prerequisites">Prerequisites</h2>
<p>Before we start, make sure you have the following prerequisites:</p><ul>
<li>A Linux, Windows, or Mac machine with administrative privileges</li>
<li>Python 2.7.9 or later, or Python 3.4 or later</li>
</ul>
<h2 id="installing-aws-cli-on-linux">Installing AWS CLI on Linux</h2>
<p>Follow the steps below to install AWS CLI on Linux:</p><ol>
<li><p>Open the terminal on your Linux machine.</p></li>
<li><p>Update the package list:</p><pre><code>sudo apt-get update
</code></pre>
</li>
<li><p>Install the AWS CLI package:</p><pre><code>sudo apt-get install awscli
</code></pre>
</li>
<li><p>Verify the installation:</p><pre><code>aws --version
</code></pre>
<p> The above command should output the version of AWS CLI installed on your machine.</p></li>
</ol>
<h2 id="installing-aws-cli-on-windows">Installing AWS CLI on Windows</h2>
<p>Follow the steps below to install AWS CLI on Windows:</p><ol>
<li><p>Download the AWS CLI MSI installer for Windows from the <a href="https://aws.amazon.com/cli/">official AWS CLI website</a>.</p></li>
<li><p>Run the installer and follow the prompts to install AWS CLI.</p></li>
<li><p>Open Command Prompt or PowerShell and run the following command:</p><pre><code>aws --version
</code></pre>
<p> The above command should output the version of AWS CLI installed on your machine.</p></li>
</ol>
<h2 id="installing-aws-cli-on-mac">Installing AWS CLI on Mac</h2>
<p>Follow the steps below to install AWS CLI on Mac:</p><ol>
<li><p>Open the terminal on your Mac machine.</p></li>
<li><p>Install AWS CLI using Homebrew:</p><pre><code>brew install awscli
</code></pre>
</li>
<li><p>Verify the installation:</p><pre><code>aws --version
</code></pre>
<p> The above command should output the version of AWS CLI installed on your machine.</p></li>
</ol>
<h2 id="tips-and-tricks">Tips and Tricks</h2>
<h3 id="multiple-aws-profiles">Multiple AWS Profiles</h3>
<p>You can configure multiple AWS profiles on your machine. This is useful if you have multiple AWS accounts or if you are working with multiple IAM users.</p><p>To create a new AWS profile, run the following command:</p><pre><code>aws configure --profile &lt;profile-name&gt;
</code></pre>
<p>Replace <code>&lt;profile-name&gt;</code> with the name of your new profile. Follow the prompts to provide your AWS access key, secret access key, region, and output format.</p><p>To switch between AWS profiles, specify the profile name when running AWS CLI commands:</p><pre><code>aws s3 ls --profile &lt;profile-name&gt;
</code></pre>
<h3 id="using-aws-sso">Using AWS SSO</h3>
<p>If your organization uses AWS SSO (Single Sign-On), you can use AWS CLI to log in to your AWS account without providing your AWS access key and secret access key.</p><p>To use AWS SSO with AWS CLI, run the following command:</p><pre><code>aws sso login --profile &lt;profile-name&gt; --region &lt;aws-region&gt;
</code></pre>
<p>Replace <code>&lt;profile-name&gt;</code> with the name of your AWS profile and <code>&lt;aws-region&gt;</code> with the AWS region you want to log in to.</p><h3 id="syncing-files-to-amazon-s3">Syncing Files to Amazon S3</h3>
<p>You can use AWS CLI to sync files and directories to Amazon S3. This is useful for backing up files to Amazon S3 or for distributing files to a large number of users.</p><p>To sync a local directory to an S3 bucket, run the following command:</p><pre><code>aws s3 sync /path/to/local/directory s3://&lt;bucket-name&gt;/&lt;prefix&gt;
</code></pre>
<p>Replace <code>/path/to/local/directory</code> with the path to your local directory, <code>&lt;bucket-name&gt;</code> with the name of your S3 bucket, and <code>&lt;prefix&gt;</code> with the prefix to use for the uploaded files.</p><h3 id="copying-files-between-amazon-s3-buckets">Copying Files Between Amazon S3 Buckets</h3>
<p>You can use AWS CLI to copy files between Amazon S3 buckets. This is useful if you want to duplicate files in different buckets or regions.</p><p>To copy a file between S3 buckets, run the following command:</p><pre><code>aws s3 cp s3://&lt;source-bucket&gt;/&lt;source-key&gt; s3://&lt;destination-bucket&gt;/&lt;destination-key&gt;
</code></pre>
<p>Replace <code>&lt;source-bucket&gt;</code> with the name of the source S3 bucket, <code>&lt;source-key&gt;</code> with the key of the source file, <code>&lt;destination-bucket&gt;</code> with the name of the destination S3 bucket, and <code>&lt;destination-key&gt;</code> with the key of the destination file.</p><h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, we learned how to install AWS CLI on Linux, Windows, and Mac. We also learned some tips and tricks to make working with AWS CLI easier. With AWS CLI, you can manage your AWS infrastructure from the command line, making it easier to automate common tasks.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How To Add Swap Space on Ubuntu and Debian 12 / 13</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-add-swap-space-on-ubuntu-22-and-debian-11-12/"/>
        <id>https://techwhale.in/how-to-add-swap-space-on-ubuntu-22-and-debian-11-12/</id>
        <media:content url="https://techwhale.in/media/posts/41/2.png" medium="image" />

        <updated>2023-07-14T02:57:48+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/41/2.png" alt="How To Add Swap Space on Ubuntu and Debian 12 / 13" />
                    If you are running a Debian 11 system and are experiencing slow performance or running out of memory, you may need to add swap space to your system. Swap space is a designated area on your hard drive that is used to temporarily store data&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/41/2.png" class="type:primaryImage" alt="How To Add Swap Space on Ubuntu and Debian 12 / 13" /></p>
                <p>If you are running a Debian 11 system and are experiencing slow performance or running out of memory, you may need to add swap space to your system. Swap space is a designated area on your hard drive that is used to temporarily store data when your system has run out of physical memory (RAM). In this guide, we will walk you through the steps to add swap space to your Debian 11 system.</p><h2 id="step-1-checking-for-existing-swap-space">Step 1: Checking for Existing Swap Space</h2>
<p>Before adding a new swap file, you should first check if there is any existing swap space on your system. To do this, run the following command in your terminal:</p><pre><code>sudo swapon --show
</code></pre>
<p>If you get no output, it means there is no existing swap space on your system.</p><h2 id="step-2-creating-a-swap-file">Step 2: Creating a Swap File</h2>
<p>To create a new swap file, we will use the <code>fallocate</code> command. This command creates a file with a specified size. For example, to create a 2GB swap file, run the following command:</p><pre><code>sudo fallocate -l 2G /swapfile
</code></pre>
<p>Next, we need to restrict access to the swap file to root only. Run the following command:</p><pre><code>sudo chmod 600 /swapfile
</code></pre>
<h2 id="step-3-enabling-the-swap-file">Step 3: Enabling the Swap File</h2>
<p>Now that we have created the swap file, we need to enable it. Run the following command:</p><pre><code>sudo mkswap /swapfile
</code></pre>
<p>This command initializes the swap file. Next, we need to enable the swap file with the following command:</p><pre><code>sudo swapon /swapfile
</code></pre>
<p>To make the swap file permanent, we need to add it to the <code>/etc/fstab</code> file. Open the file with your preferred text editor:</p><pre><code>sudo nano /etc/fstab
</code></pre>
<p>Add the following line to the file:</p><pre><code>/swapfile swap swap defaults 0 0
</code></pre>
<p>Save and close the file.</p><h2 id="step-4-verifying-the-swap-space">Step 4: Verifying the Swap Space</h2>
<p>To verify that the swap space has been added, you can run the following command:</p><pre><code>sudo swapon --show
</code></pre>
<p>This command should now display your new swap file.</p><h2 id="tips-and-tricks">Tips and Tricks</h2>
<h3 id="customizing-the-size-of-the-swap-file">Customizing the Size of the Swap File</h3>
<p>You can customize the size of the swap file to your requirements. Just replace “2G” in the <code>fallocate</code> command with the desired size (e.g. 4G, 8G, etc.). However, it is recommended to have a swap space of 2GB or less, depending on your system’s needs.</p><h3 id="swap-file-vs-swap-partition">Swap File vs Swap Partition</h3>
<p>You can also create a swap partition instead of a swap file. However, it is recommended to use a swap file as it is easier to resize and manage.</p><h3 id="adding-too-much-swap-space">Adding Too Much Swap Space</h3>
<p>Adding too much swap space can actually slow down your system, as the system will start using the swap space instead of physical memory. It is recommended to have a swap space of 2GB or less, depending on your system’s needs.</p><h3 id="verifying-swap-space-usage">Verifying Swap Space Usage</h3>
<p>To verify how much swap space is being used, run the following command:</p><pre><code>sudo swapon --summary
</code></pre>
<p>This command will show you the amount of swap space being used, as well as the total amount of swap space available.</p><h3 id="removing-swap-space">Removing Swap Space</h3>
<p>If you no longer need the swap space, you can remove it by running the following commands:</p><pre><code>sudo swapoff /swapfile
sudo rm /swapfile
</code></pre>
<p>Congratulations! You have successfully added swap space to your Debian 11 system.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How To Configure Logging and Log Rotation in Nginx on an Ubuntu 22 and Debian 12</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-configure-logging-and-log-rotation-in-nginx-on-an-ubuntu-22-and-debian-12/"/>
        <id>https://techwhale.in/how-to-configure-logging-and-log-rotation-in-nginx-on-an-ubuntu-22-and-debian-12/</id>
        <media:content url="https://techwhale.in/media/posts/40/ScreenShot-20230726-174020.png" medium="image" />
            <category term="Nginx"/>

        <updated>2023-07-14T02:54:23+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/40/ScreenShot-20230726-174020.png" alt="How To Configure Logging and Log Rotation in Nginx on an Ubuntu 22 and Debian 12" />
                    Nginx is a popular web server used to serve web applications. It is known for its high performance, reliability, and scalability. Nginx logs all the requests that are processed by the server. These logs can be useful for troubleshooting issues with the server, analyzing traffic&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/40/ScreenShot-20230726-174020.png" class="type:primaryImage" alt="How To Configure Logging and Log Rotation in Nginx on an Ubuntu 22 and Debian 12" /></p>
                <p>Nginx is a popular web server used to serve web applications. It is known for its high performance, reliability, and scalability. Nginx logs all the requests that are processed by the server. These logs can be useful for troubleshooting issues with the server, analyzing traffic patterns, and monitoring server activity. However, if the logs are not properly configured and rotated, they can consume too much disk space and make it difficult to analyze the logs over time. In this guide, we will show you how to configure logging and log rotation in Nginx on an Ubuntu 22 and Debian Server 12.</p><h2 id="step-1-configuring-nginx-logging">Step 1: Configuring Nginx Logging</h2>
<p>Nginx logs all the requests that are processed by the server. By default, Nginx logs all the requests to the error log file. However, it is recommended to configure separate access and error log files to make it easier to analyze the logs.</p><ol>
<li><p>Open the Nginx configuration file <code>/etc/nginx/nginx.conf</code> using a text editor. You can use any text editor of your choice, such as <code>nano</code>, <code>vim</code>, or <code>emacs</code>.</p><pre><code>sudo nano /etc/nginx/nginx.conf
</code></pre>
</li>
<li><p>Locate the <code>http</code> block in the configuration file. This block contains the main configuration for the HTTP server.</p></li>
<li><p>Add the following lines to the <code>http</code> block to enable logging:
This will create two log files: <code>/var/log/nginx/access.log</code> for all access logs and <code>/var/log/nginx/error.log</code> for all error logs.</p><pre><code>access_log  /var/log/nginx/access.log;
error_log  /var/log/nginx/error.log;
</code></pre>
</li>
<li><p>Save the changes and exit the text editor.</p></li>
<li><p>Restart Nginx to apply the changes:</p><pre><code>sudo systemctl restart nginx
</code></pre>
</li>
</ol>
<h2 id="step-2-configuring-log-rotation">Step 2: Configuring Log Rotation</h2>
<p>Log rotation is the process of archiving old log files and creating new ones to prevent disk space issues. In Nginx, log rotation can be configured using the <code>logrotate</code> utility. The <code>logrotate</code> utility is a system tool that can be used to manage log files.</p><ol>
<li><p>Create a new log rotation configuration file for Nginx:</p><pre><code>sudo nano /etc/logrotate.d/nginx
</code></pre>
</li>
<li><p>Add the following lines to the file:
This configuration will rotate the logs daily, keep 52 rotated logs, compress the rotated logs, delay compression until the next rotation, and create new log files with permissions <code>0640</code> owned by the <code>www-data</code> and <code>adm</code> groups.</p><pre><code>/var/log/nginx/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 0640 www-data adm
    sharedscripts
    postrotate
        [ -f /run/nginx.pid ] &amp;&amp; kill -USR1 `cat /run/nginx.pid`
    endscript
}
</code></pre>
</li>
<li><p>Save the changes and exit the text editor.</p></li>
<li><p>Test the log rotation configuration:
This command will force a log rotation and print any errors to the console.</p><pre><code>sudo logrotate -f /etc/logrotate.d/nginx
</code></pre>
</li>
</ol>
<h2 id="tips-and-tricks">Tips and Tricks</h2>
<h3 id="real-time-nginx-logs">Real-time Nginx logs</h3>
<p>To view the Nginx logs in real-time, use the <code>tail</code> command:</p><pre><code>tail -f /var/log/nginx/access.log
tail -f /var/log/nginx/error.log
</code></pre>
<p>The <code>tail</code> command will display the last few lines of the log file and wait for new lines to be added to the file. This is useful for monitoring the logs in real-time.</p><h3 id="analyzing-nginx-logs">Analyzing Nginx logs</h3>
<p>To analyze the Nginx logs, use a log analyzer like <code>goaccess</code>. <code>goaccess</code> is a command-line tool that can be used to generate reports from log files. <code>goaccess</code> can generate reports in HTML, JSON, or CSV format.</p><p>To install <code>goaccess</code> on Ubuntu 22 or Debian Server 12, run the following command:</p><pre><code>sudo apt install goaccess
</code></pre>
<p>To generate an HTML report from the access log, run the following command:</p><pre><code>goaccess /var/log/nginx/access.log -o /var/www/html/report.html --log-format=COMBINED
</code></pre>
<p>This command will generate an HTML report from the access log and save it to <code>/var/www/html/report.html</code>.</p><h3 id="excluding-specific-requests-from-being-logged">Excluding specific requests from being logged</h3>
<p>To exclude specific requests from being logged, use the <code>map</code> directive in the Nginx configuration file. The <code>map</code> directive can be used to define a variable that can be used in the configuration file.</p><p>For example, to exclude requests that match the regular expression <code>~*^/admin</code> from being logged, add the following configuration to the Nginx configuration file:</p><pre><code>map $request_uri $loggable {
    default 1;
    ~*^/admin 0;
}
server {
    ...
    access_log  /var/log/nginx/access.log combined if=$loggable;
    ...
}
</code></pre>
<p>This configuration will exclude requests that match the regular expression <code>~*^/admin</code> from being logged.</p><h3 id="customizing-log-formats">Customizing log formats</h3>
<p>By default, Nginx uses the <code>combined</code> log format, which includes the client IP address, request time, request method, request URL, HTTP version, status code, size of the response, referrer, and user agent. However, you can customize the log format to include only the information that you need.</p><p>To customize the log format, modify the <code>access_log</code> directive in the Nginx configuration file. For example, to include only the client IP address, request time, request URL, and user agent, add the following line to the <code>http</code> block in the Nginx configuration file:</p><pre><code>log_format  mylog  &#39;$remote_addr - $time_local - &quot;$request&quot; - &quot;$http_user_agent&quot;&#39;;
</code></pre>
<p>Then, update the <code>access_log</code> directive to use the new log format:</p><pre><code>access_log  /var/log/nginx/access.log mylog;
</code></pre>
<p>This will create a log file at <code>/var/log/nginx/access.log</code> using the <code>mylog</code> log format.</p><h2 id="conclusion">Conclusion</h2>
<p>In this guide, we have shown you how to configure logging and log rotation in Nginx on an Ubuntu 22 and Debian Server 12. By following these steps, you can ensure that your Nginx logs are properly configured and rotated to prevent disk space issues and make it easier to analyze the logs when troubleshooting issues. We have also provided some tips and tricks to help you monitor and analyze the logs, customize log formats, and exclude specific requests from being logged.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Automate Linux System Management with Ansible System Roles</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/automate-linux-system-management-with-ansible-system-roles/"/>
        <id>https://techwhale.in/automate-linux-system-management-with-ansible-system-roles/</id>
            <category term="Docker"/>
            <category term="DevOps"/>

        <updated>2023-07-14T02:49:33+05:30</updated>
            <summary>
                <![CDATA[
                    Ansible is an open-source automation tool that allows you to automate tasks across multiple servers. Ansible System Roles are pre-written Ansible playbooks that are designed to automate the installation, configuration, and management of specific services and applications on Linux systems. By using Ansible System Roles,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Ansible is an open-source automation tool that allows you to automate tasks across multiple servers. Ansible System Roles are pre-written Ansible playbooks that are designed to automate the installation, configuration, and management of specific services and applications on Linux systems.</p><p>By using Ansible System Roles, you can automate the deployment of various applications and services like Apache, MySQL, Nginx, PostgreSQL, and many more. In this guide, we will walk you through the steps to automate Linux systems with Ansible System Roles.</p><h2 id="prerequisites">Prerequisites</h2>
<p>Before we start, you need to have Ansible installed on your system. You can install Ansible by running the following command:</p><pre><code>sudo apt-get install ansible
</code></pre>
<h2 id="step-1-create-a-playbook">Step 1: Create a Playbook</h2>
<p>The first step in automating Linux systems with Ansible System Roles is to create a playbook. A playbook is a file that contains a set of instructions that Ansible will execute on your servers.</p><p>To create a playbook, create a file with a <code>.yml</code> extension and add the following code:</p><pre><code>---
- name: Install Apache
  hosts: webservers
  become: true
  roles:
    - geerlingguy.apache
</code></pre>
<p>In the above code, we have specified the name of the playbook, the hosts on which the playbook will be executed, and the Ansible System Role that we want to use for installing Apache. In this case, we are using the <code>geerlingguy.apache</code> System Role.</p><h2 id="step-2-define-hosts">Step 2: Define Hosts</h2>
<p>The next step is to define the hosts on which you want to execute the playbook. You can define hosts in the <code>/etc/ansible/hosts</code> file. Open the file with your favorite text editor and add the following code:</p><pre><code>[webservers]
server1.example.com
server2.example.com
</code></pre>
<p>In the above code, we have defined a group of hosts with the name <code>webservers</code> and added two servers to the group.</p><h2 id="step-3-execute-the-playbook">Step 3: Execute the Playbook</h2>
<p>Now that we have created the playbook and defined the hosts, we can execute the playbook by running the following command:</p><pre><code>ansible-playbook playbook.yml
</code></pre>
<p>In the above command, <code>playbook.yml</code> is the name of the playbook that we created in Step 1.</p><h2 id="example-1-install-nginx">Example 1: Install Nginx</h2>
<p>To install Nginx using Ansible System Roles, create a playbook with the following code:</p><pre><code>---
- name: Install Nginx
  hosts: webservers
  become: true
  roles:
    - geerlingguy.nginx
</code></pre>
<p>In the above code, we are using the <code>geerlingguy.nginx</code> System Role to install Nginx.</p><h2 id="example-2-install-mysql">Example 2: Install MySQL</h2>
<p>To install MySQL using Ansible System Roles, create a playbook with the following code:</p><pre><code>---
- name: Install MySQL
  hosts: databases
  become: true
  roles:
    - geerlingguy.mysql
</code></pre>
<p>In the above code, we are using the <code>geerlingguy.mysql</code> System Role to install MySQL.</p><h2 id="example-3-install-postgresql">Example 3: Install PostgreSQL</h2>
<p>To install PostgreSQL using Ansible System Roles, create a playbook with the following code:</p><pre><code>---
- name: Install PostgreSQL
  hosts: databases
  become: true
  roles:
    - geerlingguy.postgresql
</code></pre>
<p>In the above code, we are using the <code>geerlingguy.postgresql</code> System Role to install PostgreSQL.</p><h2 id="example-4-install-redis">Example 4: Install Redis</h2>
<p>To install Redis using Ansible System Roles, create a playbook with the following code:</p><pre><code>---
- name: Install Redis
  hosts: cacheservers
  become: true
  roles:
    - geerlingguy.redis
</code></pre>
<p>In the above code, we are using the <code>geerlingguy.redis</code> System Role to install Redis.</p><h2 id="example-5-install-docker">Example 5: Install Docker</h2>
<p>To install Docker using Ansible System Roles, create a playbook with the following code:</p><pre><code>---
- name: Install Docker
  hosts: dockerservers
  become: true
  roles:
    - geerlingguy.docker
</code></pre>
<p>In the above code, we are using the <code>geerlingguy.docker</code> System Role to install Docker.</p><h2 id="conclusion">Conclusion</h2>
<p>In this guide, we have shown you how to automate Linux systems with Ansible System Roles. By using Ansible System Roles, you can easily automate the deployment of various applications and services on your Linux servers. With the examples provided in this guide, you can now start automating your Linux systems with Ansible System Roles.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Install MariaDB 11.0 With phpMyAdmin on Rocky / AmaLinux</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-mariadb-110-with-phpmyadmin-on-rocky-amalinux/"/>
        <id>https://techwhale.in/how-to-install-mariadb-110-with-phpmyadmin-on-rocky-amalinux/</id>
        <media:content url="https://techwhale.in/media/posts/38/ScreenShot-20230726-173240.png" medium="image" />
            <category term="MySQL"/>

        <updated>2023-07-14T02:45:56+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/38/ScreenShot-20230726-173240.png" alt="How to Install MariaDB 11.0 With phpMyAdmin on Rocky / AmaLinux" />
                    MariaDB is an open-source relational database management system that is a drop-in replacement for MySQL. It is developed by the original creators of MySQL and is widely used in web applications. phpMyAdmin is a free and open-source web-based application that provides a graphical user interface&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/38/ScreenShot-20230726-173240.png" class="type:primaryImage" alt="How to Install MariaDB 11.0 With phpMyAdmin on Rocky / AmaLinux" /></p>
                <p>MariaDB is an open-source relational database management system that is a drop-in replacement for MySQL. It is developed by the original creators of MySQL and is widely used in web applications. phpMyAdmin is a free and open-source web-based application that provides a graphical user interface for managing MySQL and MariaDB databases. In this tutorial, we will install MariaDB 11.0 and phpMyAdmin on Rocky / AmaLinux.</p><h2 id="prerequisites">Prerequisites</h2>
<p>Before starting the installation process, make sure that you have the following:</p><ul>
<li>A Rocky / AmaLinux server with sudo privileges.</li>
<li>Access to the internet to download and install the required packages.</li>
</ul>
<h2 id="step-1-update-the-system">Step 1: Update the System</h2>
<p>The first step is to update the system packages to their latest versions. Open the terminal and execute the following command:</p><pre><code>sudo yum update
</code></pre>
<p>This command will update all the installed packages to their latest versions.</p><h2 id="step-2-install-mariadb-110">Step 2: Install MariaDB 11.0</h2>
<p>To install MariaDB 11.0, execute the following command in the terminal:</p><pre><code>sudo yum install -y mariadb-server
</code></pre>
<p>This command will install the MariaDB server on your system. Once the installation is complete, start the MariaDB service and enable it to start at boot time using the following commands:</p><pre><code>sudo systemctl start mariadb
sudo systemctl enable mariadb
</code></pre>
<p>Next, run the following command to secure your MariaDB server:</p><pre><code>sudo mysql_secure_installation
</code></pre>
<p>This command will prompt you to set a root password, remove anonymous users, disallow remote root login, and remove test databases. Follow the prompts and answer the questions to secure your MariaDB server.</p><h2 id="step-3-install-phpmyadmin">Step 3: Install phpMyAdmin</h2>
<p>To install phpMyAdmin, execute the following command in the terminal:</p><pre><code>sudo yum install -y epel-release
sudo yum install -y phpMyAdmin
</code></pre>
<p>This command will install phpMyAdmin and its dependencies on your system.</p><h2 id="step-4-configure-phpmyadmin">Step 4: Configure phpMyAdmin</h2>
<p>After installing phpMyAdmin, you need to configure it to work with MariaDB. Open the phpMyAdmin configuration file using the following command:</p><pre><code>sudo nano /etc/httpd/conf.d/phpMyAdmin.conf
</code></pre>
<p>In this file, find the following line:</p><pre><code>&lt;IfModule mod_authz_core.c&gt;
</code></pre>
<p>Add the following lines after it:</p><pre><code># Apache 2.4
&lt;RequireAny&gt;
Require ip 127.0.0.1
Require ip ::1
&lt;/RequireAny&gt;
</code></pre>
<p>Save and close the file.</p><h2 id="step-5-restart-the-services">Step 5: Restart the Services</h2>
<p>After making the necessary changes to the configuration files, restart the services using the following commands:</p><pre><code>sudo systemctl restart httpd
sudo systemctl restart mariadb
</code></pre>
<h2 id="step-6-access-phpmyadmin">Step 6: Access phpMyAdmin</h2>
<p>Open your web browser and navigate to the following URL:</p><pre><code>&lt;http://your-server-ip/phpMyAdmin&gt;
</code></pre>
<p>Replace ‘your-server-ip’ with the IP address of your server. You will be prompted to enter your MariaDB username and password. Enter the credentials and click on the ‘Go’ button to access the phpMyAdmin dashboard.</p><h2 id="issues-and-fixes">Issues and Fixes</h2>
<p>If you encounter any issues during the installation process, try the following fixes:</p><ul>
<li>If you get the error ‘No package epel-release available’, run the following command and try again:</li>
</ul>
<pre><code>sudo yum install -y &lt;https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&gt;
</code></pre>
<ul>
<li>If you get the error ‘Access denied for user ‘root‘@’localhost’ (using password: YES)’, try resetting the MariaDB root password using the following commands:</li>
</ul>
<pre><code>sudo systemctl stop mariadb
sudo mysqld_safe --skip-grant-tables &amp;
mysql -u root
UPDATE mysql.user SET Password=PASSWORD(&#39;new_password&#39;) WHERE User=&#39;root&#39;;
FLUSH PRIVILEGES;
exit;
sudo systemctl start mariadb
</code></pre>
<ul>
<li>If you get the error ‘Cannot connect: invalid settings’, open the phpMyAdmin configuration file using the following command and replace the existing lines with the following:</li>
</ul>
<pre><code>$cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;] = &#39;cookie&#39;;
$cfg[&#39;Servers&#39;][$i][&#39;host&#39;] = &#39;localhost&#39;;
$cfg[&#39;Servers&#39;][$i][&#39;compress&#39;] = false;
$cfg[&#39;Servers&#39;][$i][&#39;AllowNoPassword&#39;] = false;
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, we have shown you how to install MariaDB 11.0 with phpMyAdmin on Rocky / AmaLinux. We have also shown you how to configure phpMyAdmin and access it from a web browser. If you encounter any issues during the installation process, try the available fixes.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install Podman Compose on Debian 12 (Bookworm)</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-podman-compose-on-debian-12-bookworm/"/>
        <id>https://techwhale.in/how-to-install-podman-compose-on-debian-12-bookworm/</id>
        <media:content url="https://techwhale.in/media/posts/37/git-workflow-copy-2.jpg" medium="image" />
            <category term="Docker"/>

        <updated>2023-07-14T02:39:34+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/37/git-workflow-copy-2.jpg" alt="" />
                    f you are running Debian 12 (Bookworm) and want to use Docker Compose or Podman Compose, here are the steps to install Podman Compose on your system. Docker and Podman are both container runtimes, but they have some differences in their architecture and features. Docker&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/37/git-workflow-copy-2.jpg" class="type:primaryImage" alt="" /></p>
                <p>f you are running Debian 12 (Bookworm) and want to use Docker Compose or Podman Compose, here are the steps to install Podman Compose on your system.</p><h2 id="comparing-docker-and-podman">Comparing Docker and Podman</h2>
<p>Docker and Podman are both container runtimes, but they have some differences in their architecture and features.</p><h3 id="architecture">Architecture</h3>
<p>Docker uses a client-server architecture, where the Docker client communicates with the Docker daemon to manage containers. The Docker daemon runs as a background process on the host machine.</p><p>Podman, on the other hand, uses a daemonless architecture, where each container is managed as a separate process on the host machine. This makes Podman more lightweight and secure than Docker.</p><h3 id="features">Features</h3>
<p>Docker has a larger ecosystem and more features than Podman, including a wider variety of plugins and tools. However, Podman has some unique features that Docker does not have, such as rootless containers and the ability to run containers without a daemon.</p><h2 id="installing-podman-compose">Installing Podman Compose</h2>
<ol>
<li><p>Add the Podman repository to your system by running the following command:</p><pre><code>echo &quot;deb &lt;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_12/&gt; /&quot; | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
</code></pre>
</li>
<li><p>Add the repository key to your system by running the following command:</p><pre><code>curl -L &lt;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_12/Release.key&gt; | sudo apt-key add -
</code></pre>
</li>
<li><p>Update the package list by running the following command:</p><pre><code>sudo apt-get update
</code></pre>
</li>
<li><p>Install Podman Compose by running the following command:</p><pre><code>sudo apt-get install podman-compose
</code></pre>
</li>
<li><p>Verify Podman Compose installation by running the following command:</p><pre><code>podman-compose version
</code></pre>
<p> If the installation was successful, you should see the version number of Podman Compose.</p></li>
</ol>
<h3 id="conclusion">Conclusion</h3>
<p>Both Docker and Podman have their strengths and weaknesses, and the choice of which one to use depends on your specific use case and requirements. If you value security and lightweight architecture, Podman may be a better choice for you. If you need a wider variety of tools and plugins, Docker may be the better option.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install PM2 (Process Management) on Ubuntu 22.10 / Debian 11</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-pm2-process-management-on-ubuntu-2210-debian-11/"/>
        <id>https://techwhale.in/how-to-install-pm2-process-management-on-ubuntu-2210-debian-11/</id>
        <media:content url="https://techwhale.in/media/posts/34/install-pm2.png" medium="image" />
            <category term="DevOps"/>

        <updated>2023-05-19T11:53:02+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/34/install-pm2.png" alt="" />
                    PM2 is a fantastic process manager designed specifically for Node.js applications. Throughout my journey as a web developer, I've worked extensively with Node.js. I've had to schedule and manage a multitude of Node.js applications using CRON, which, let me tell you, was no walk in&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/34/install-pm2.png" class="type:primaryImage" alt="" /></p>
                
  <p>
    PM2 is a fantastic process manager designed specifically for Node.js applications.<br><br>Throughout my journey as a web developer, I've worked extensively with Node.js. I've had to schedule and manage a multitude of Node.js applications using CRON, which, let me tell you, was no walk in the park. That was until I discovered PM2! It was a game-changer, making my life significantly easier. PM2 ensures my apps are always up and running, and it automatically refreshes them whenever I make updates. Plus, it gives me the flexibility to manually set the reload time using CRON or adjust the restart delay for any application. The best part? It works seamlessly across all operating systems!<br><br>Now, you might be thinking, "Is PM2 only for Node.js apps?" The answer is a resounding no! While PM2 was indeed created with Node.js applications in mind, its utility isn't confined to just that. After using PM2 for a while, I discovered that it can manage scripts from any programming language! I gave it a whirl with Python, and guess what? It worked like a charm!<br><br>In this article, I'm going to share a practical example of how you can schedule and automate your Python scripts using PM2. So, buckle up and let's dive in!<br><br>Step 1: Update Your System<br><br>First things first, let's make sure your system is up-to-date. Open up your terminal and type in the following command:<br><br><code>sudo apt update<br></code><br>This command will fetch the list of available updates and then upgrade your system. The -y flag automatically confirms all prompts, saving you from having to manually approve each update.<br><br>Step 2: Install Node.js<br><br>PM2 is a Node.js application, so we'll need to have Node.js installed on our system. Here's how to do it:<br><br><code>sudo apt install nodejs -y<br></code><br>Once the installation is complete, you can verify it by checking the version of Node.js:<br><br><code>nodejs -v<br></code><br>You should see a version number as the output, which means Node.js is installed correctly.<br><br>Step 3: Install NPM (Node Package Manager)<br><br>NPM is the default package manager for Node.js and it's what we'll use to install PM2. To install NPM, use the following command:<br><br><code>sudo apt install npm -y<br></code><br>Just like we did with Node.js, we can check if NPM is installed correctly:<br><br><code>npm -v<br></code><br>If you see a version number, you're good to go!<br><br>Step 4: Install PM2<br><br>Now that we have Node.js and NPM installed, we can finally install PM2. Here's the command to do it:<br><br><code>sudo npm install -g pm2<br></code><br>The -g flag installs PM2 globally, which means you can use it from any directory on your system.<br><br>To check if PM2 is installed correctly, you can use the following command:<br><br><code>pm2 -v<br></code><br>If you see a version number, congratulations! You've successfully installed PM2 on your Ubuntu 22.10 or Debian 11 system.<br><br>Step 5: Set PM2 to Start on Boot<br><br>One of the great things about PM2 is that it can automatically restart your applications if your system reboots. To set this up, you can use the following command:<br><br><code>pm2 startup<br></code><br>This command will generate a command that you need to run with superuser privileges. Copy the outputted command and run it:<br><br><br><code>sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u yourusername --hp /home/yourusername<br></code><br>Remember to replace yourusername with your actual username.<br><br>And there you have it! You've installed PM2 on your Ubuntu 22.10 or Debian 11 system. Now you can use PM2 to manage and keep your Node.js, Python or Any script or applications running in the background.<br><br>Thank you for reading.
  </p>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to bypass specific website or IP from OpenVPN connection on Mac</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-bypass-specific-website-or-ip-from-openvpn-connection-on-mac/"/>
        <id>https://techwhale.in/how-to-bypass-specific-website-or-ip-from-openvpn-connection-on-mac/</id>
        <media:content url="https://techwhale.in/media/posts/33/bypass-openvpn.jpg" medium="image" />

        <updated>2023-04-21T19:32:59+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/33/bypass-openvpn.jpg" alt="bypass-openvpn" />
                    We all have sites that needs to bypass the VPN connection and OpenVPN is popular open source VPN software but it lacks to have bypass a website from it’s network but if you’ve a mac then it’s a easy process as shown in below guide&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/33/bypass-openvpn.jpg" class="type:primaryImage" alt="bypass-openvpn" /></p>
                <p>We all have sites that needs to bypass the VPN connection and OpenVPN is popular open source VPN software but it lacks to have bypass a website from it’s network but if you’ve a mac then it’s a easy process as shown in below guide and hope it helps you.</p><p>To bypass specific websites or IP addresses from OpenVPN connection on a Mac, you can use the route command to exclude them from the VPN tunnel. Here’s how you can do it:</p><ol>
<li><p>Open the Terminal app on your Mac. You can find it in Applications &gt; Utilities.</p></li>
<li><p>First, find your default gateway IP address. You can do this by running the following command in Terminal:</p></li>
</ol>
<pre><code>netstat -nr | grep default
</code></pre>
<p>This command will display your default gateway IP address in the second column. Note it down as you’ll need it in the next steps.</p><ol start="3">
<li>Now, find the IP address of the website you want to bypass. You can use the following command, replacing “example.com” with the website you want to bypass:</li>
</ol>
<pre><code>nslookup example.com
</code></pre>
<p>This command will give you the IP address of the website. Note it down as you’ll need it in the next steps.</p><ol start="4">
<li>To bypass the website from theOpenVPN connection, use the route command with the following syntax, replacing “your_gateway_ip” with the default gateway IP you noted down earlier, and “website_ip” with the IP address of the website you want to bypass:</li>
</ol>
<pre><code>sudo route add -host website_ip your_gateway_ip
</code></pre>
<p>For example, if your default gateway IP is 192.168.1.1 and the website’s IP is 123.45.67.89, the command would be:</p><pre><code>sudo route add -host 123.45.67.89 192.168.1.1
</code></pre>
<ol start="5">
<li><p>You will be prompted to enter your Mac’s admin password to execute the command. Once you’ve entered the password, the route will be added, and the specified website will be bypassed from the OpenVPN connection.</p></li>
<li><p>To check if the bypass is working, you can visit the website and check your IP address. It should show your regular IP address instead of the VPN IP address.</p></li>
<li><p>If you want to remove the bypass, you can use the following command, replacing “website_ip” with the IP address of the website you want to remove the bypass for:</p></li>
</ol>
<pre><code>sudo route delete -host website_ip
</code></pre>
<ol start="8">
<li>You can repeat steps 3-7 for any additional websites or IP addresses you want to bypass from the OpenVPN connection.</li>
</ol>
<p>Note: These changes are temporary and will be reset when you restart your Mac. To make the bypass permanent, you can create a script to run these commands at startup or add them to your OpenVPN configuration file.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>The Best 10 DevOps Tools Available for Use in 2023</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/the-best-10-devops-tools-available-for-use-in-2023/"/>
        <id>https://techwhale.in/the-best-10-devops-tools-available-for-use-in-2023/</id>
        <media:content url="https://techwhale.in/media/posts/24/ScreenShot-20230726-191645.png" medium="image" />
            <category term="DevOps"/>

        <updated>2022-12-26T03:21:22+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/24/ScreenShot-20230726-191645.png" alt="" />
                    DevOps has become an integral part of modern software development. The DevOps process aims to speed up software development and deployment while ensuring quality and reliability. To achieve this goal, DevOps teams use a wide range of tools to automate tasks, manage code, and track&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/24/ScreenShot-20230726-191645.png" class="type:primaryImage" alt="" /></p>
                <ol>
<li>
<p>DevOps has become an integral part of modern software development. The DevOps process aims to speed up software development and deployment while ensuring quality and reliability. To achieve this goal, DevOps teams use a wide range of tools to automate tasks, manage code, and track issues.</p>
<p>In recent years, DevOps has evolved dramatically, and so have the tools used by DevOps teams. As we look ahead to 2023, we can expect even more advanced DevOps tools to be available to help teams streamline their processes and achieve their goals.</p>
<p>Here are the top 10 DevOps tools that will be available for use in 2023:</p>
<h2>1. Docker</h2>
<p>Docker is one of the most popular DevOps tools available. It allows developers to package software into containers that can be easily moved between environments. This makes it easy to create consistent development, testing, and production environments. Docker has become an essential tool for DevOps teams, and we can expect it to become even more widely used in the years to come.</p>
<h2>2. Jenkins</h2>
<p>Jenkins is an open-source automation server that is used to automate many parts of the software development process. It can be used to build, test, and deploy code, as well as to automate other tasks such as code analysis and security testing. Jenkins has a large and active community of users and developers, which means that it is constantly improving and evolving.</p>
<h2>3. GitLab</h2>
<p>GitLab is a web-based Git repository manager that provides source code management, continuous integration, and continuous delivery. It is a complete DevOps platform that allows teams to manage the entire software development lifecycle. GitLab has become a popular alternative to GitHub, and we can expect it to continue to grow in popularity in the years to come.</p>
<h2>4. Ansible</h2>
<p>Ansible is an open-source automation tool that is used to automate many parts of the software development process. It can be used to deploy applications, manage configurations, and automate other tasks. Ansible has become an essential tool for many DevOps teams, and we can expect it to become even more widely used in the coming years.</p>
<h2>5. Kubernetes</h2>
<p>Kubernetes is an open-source container orchestration platform. It is used to automate the deployment, scaling, and management of containerized applications. Kubernetes has become the de facto standard for container orchestration, and we can expect it to continue to dominate the market in the years to come.</p>
<h2>6. Grafana</h2>
<p>Grafana is an open-source analytics and monitoring platform. It is used to visualize and analyze metrics from a wide variety of data sources. Grafana has become an essential tool for monitoring and troubleshooting complex systems, and we can expect it to continue to be widely used in the years to come.</p>
<h2>7. Prometheus</h2>
<p>Prometheus is an open-source monitoring system that is used to monitor containers, services, and applications. It is designed to be highly scalable and can handle millions of metrics per second. Prometheus has become a popular alternative to traditional monitoring tools, and we can expect it to continue to grow in popularity in the coming years.</p>
<h2>8. Slack</h2>
<p>Slack is a team communication platform that is used to improve collaboration and communication within DevOps teams. It is particularly useful for remote teams. Slack has become an essential tool for many teams, and we can expect it to continue to be widely used in the years to come.</p>
<h2>9. Splunk</h2>
<p>Splunk is an analytics and monitoring platform that is used to collect and analyze machine data. It is particularly useful for identifying issues and troubleshooting problems. Splunk has become an essential tool for many DevOps teams, and we can expect it to continue to be widely used in the coming years.</p>
<h2>10. Nagios</h2>
<p>Nagios is an open-source monitoring system that is used to monitor network devices, servers, and applications. It can be used to alert DevOps teams to issues before they become critical. Nagios has been around for a long time, and we can expect it to continue to be a popular choice for monitoring in the years to come.</p>
<p>In conclusion, DevOps is a critical part of modern software development, and these 10 tools will be crucial for DevOps teams in 2023. As DevOps evolves and becomes more complex, we can expect even more advanced tools to be developed to help teams streamline their processes and achieve their goals. It is important to choose the right tools for your team's needs to ensure that your DevOps process is efficient, reliable, and effective.</p>
</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Streamline Your Container Updates with Docker: A Step-by-Step Guide</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/update-your-docker-compose-containers-easily-with-two-steps/"/>
        <id>https://techwhale.in/update-your-docker-compose-containers-easily-with-two-steps/</id>
        <media:content url="https://techwhale.in/media/posts/23/Untitled-Design-1.png" medium="image" />
            <category term="Docker"/>

        <updated>2022-07-01T03:25:08+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/23/Untitled-Design-1.png" alt="" />
                    Updating your Docker containers can be a tedious and time-consuming process, especially if you have multiple containers running simultaneously. However, with the right tools and strategies in place, it's possible to streamline this process and make it much more efficient. Here are some steps you&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/23/Untitled-Design-1.png" class="type:primaryImage" alt="" /></p>
                <p>Updating your Docker containers can be a tedious and time-consuming process, especially if you have multiple containers running simultaneously. However, with the right tools and strategies in place, it's possible to streamline this process and make it much more efficient.</p>
<p>Here are some steps you can follow to easily update your Docker containers:</p>
<ol>
<li>
<p>Identify the containers that need to be updated: Before you can update your containers, you'll need to identify which ones need updating. This can be done by running the "docker ps" command and looking for containers with outdated images.</p>
</li>
<li>
<p>Pull the updated images: Once you've identified the containers that need updating, you can use the "docker pull" command to retrieve the updated images. This will ensure that you have the latest version of the image available.</p>
</li>
<li>
<p>Stop and remove the old containers: To update a container, you'll need to stop and remove the old one first. You can do this with the "docker stop" and "docker rm" commands.</p>
</li>
<li>
<p>Run the updated container: Once the old container has been stopped and removed, you can use the "docker run" command to start the updated container. Make sure to specify the updated image name and any necessary environment variables or command-line arguments.</p>
</li>
<li>
<p>Repeat the process for all necessary containers: If you have multiple containers that need updating, simply repeat these steps for each one.</p>
</li>
</ol>
<p> </p>
<p>You can use following commands as an examples:</p>
<ol>
<li>Pull the updated images for your containers from the Docker registry. You can do this by running the following command:</li>
</ol>
<div class="bg-black mb-4 rounded-md">
<pre class="p-4 overflow-y-auto"><code class="!whitespace-pre-wrap hljs">docker-compose pull
</code></pre>
</div>
<ol start="2">
<li>Stop and remove the existing containers. You can do this by running the following command:</li>
</ol>
<div class="bg-black mb-4 rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans"> </div>
<pre class="p-4 overflow-y-auto"><code class="!whitespace-pre-wrap hljs">docker-compose down
</code></pre>
</div>
<ol start="3">
<li>Recreate the containers using the updated images. You can do this by running the following command:</li>
</ol>
<div class="bg-black mb-4 rounded-md">
<pre>docker-compose up -d</pre>
</div>
<p>This will update the containers with the latest versions of the images and recreate them with the updated configuration.</p>
<p>Alternatively, you can use the <code>--force-recreate</code> flag with the <code>up</code> command to force the recreation of the containers, even if their configuration has not changed.</p>
<div class="bg-black mb-4 rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans"> </div>
<pre class="p-4 overflow-y-auto"><code class="!whitespace-pre-wrap hljs language-css">docker-compose up -d <span class="hljs-attr">--force-recreate</span>
</code></pre>
</div>
<p>By following these steps, you can easily update your Docker containers and ensure that you're running the latest and most secure versions. Happy containerizing!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to launch Traefik reverse proxy using docker-compose?</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-launch-traefik-reverse-proxy-using-docker-compose/"/>
        <id>https://techwhale.in/how-to-launch-traefik-reverse-proxy-using-docker-compose/</id>
        <media:content url="https://techwhale.in/media/posts/21/Untitled-Design.png" medium="image" />
            <category term="Docker"/>
            <category term="DevOps"/>

        <updated>2022-06-29T22:17:35+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/21/Untitled-Design.png" alt="traefik-in-docker-compose" />
                    There is a growing demand for centralised, multi-domain, and secure application hosting in light of the proliferation of reverse proxy services. This is partly due to the accessibility of numerous open source projects that encourage experimentation. Therefore, Traefik is introduced as a reverse proxy, and&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/21/Untitled-Design.png" class="type:primaryImage" alt="traefik-in-docker-compose" /></p>
                <p>There is a growing demand for centralised, multi-domain, and secure application hosting in light of the proliferation of reverse proxy services. This is partly due to the accessibility of numerous open source projects that encourage experimentation.<br><br>Therefore, Traefik is introduced as a reverse proxy, and although there is much discussion about how easy it is to use, most users will find the documentation to be difficult to understand. Even though I am one of them, I have found a method to overcome my situation, and I hope to teach others to do the same.<br><br>I'm using Traefik as a reverse proxy to publish and secure services that are running in Docker containers because that's where most of the popular open source projects are housed. In this blog post, I'll show you how to use docker-compose to deploy Traefik 2 across many hosts on a local machine.</p>
<figure class="post__image"><img decoding="async" loading="lazy"  src="https://techwhale.in/media/posts/21/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea.png" alt="" width="1024" height="1024" sizes="(max-width: 48em) 100vw, 768px" srcset="https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-xs.webp 300w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-sm.webp 480w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-md.webp 768w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-lg.webp 1024w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-xl.webp 1360w ,https://techwhale.in/media/posts/21/responsive/DALLE-2022-12-26-02.49.31-3d-render-of-whale-with-containers-in-sea-2xl.webp 1600w"></figure>
<p><br>If you're using Docker and want to utilize Traefik as a reverse proxy, you may use docker-compose to set up the Traefik container and any additional containers you'd like to run behind the proxy.</p>
<p>Here is an example <code>docker-compose.yml</code> file that sets up Traefik as a reverse proxy:</p>
<div class="bg-black mb-4 rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans" style="text-align: center;"> </div>
<pre class="p-4 overflow-y-auto"><code class="!whitespace-pre-wrap hljs language-yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3'</span>

<span class="hljs-attr">services:</span>
  <span class="hljs-attr">traefik:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">traefik:latest</span>
    <span class="hljs-attr">command:</span> <span class="hljs-string">--api</span> <span class="hljs-string">--docker</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">"80:80"</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">"8080:8080"</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./traefik.toml:/etc/traefik/traefik.toml</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./acme.json:/acme.json</span>
    <span class="hljs-attr">networks:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">web</span>

<span class="hljs-attr">networks:</span>
  <span class="hljs-attr">web:</span>
    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span>
</code></pre>
<div> </div>
<div>This <code>docker-compose.yml</code> file does the following:</div>
</div>
<ul>
<li>Defines a single service, named <code>traefik</code>, that runs the latest version of the Traefik Docker image.</li>
<li>Exposes the Traefik dashboard on port 8080 and the default HTTP port (80) to the host machine.</li>
<li>Mounts the Docker socket file as a volume, so that Traefik can listen for container events and update its configuration accordingly.</li>
<li>Mounts a configuration file (<code>traefik.toml</code>) and an ACME JSON file (<code>acme.json</code>), which are used to configure Traefik's behavior and store SSL certificates, respectively.</li>
<li>Creates a custom network named <code>web</code> and assigns the <code>traefik</code> service to it.</li>
</ul>
<p>To start Traefik and any other containers behind the proxy, run the following command:</p>
<div class="bg-black mb-4 rounded-md">
<div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans"> </div>
<pre class="p-4 overflow-y-auto"><code class="!whitespace-pre-wrap hljs language-bash">$ docker-compose up -d
</code></pre>
</div>
<p>This will start the <code>traefik</code> service in the background (detached mode) and create any other necessary containers, as specified in the <code>docker-compose.yml</code> file.</p>
<p>Note: The specific configuration options used in the <code>traefik.toml</code> file will depend on your specific needs and setup. You can find more information about how to configure Traefik in the <a href="https://docs.traefik.io/" target="_new">Traefik documentation</a>.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to secure your site from SQL Injection, Exploits and Spamming Agents using Nginx.</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-secure-your-site-from-sql-injection-exploits-and-spamming-agents-using-nginx/"/>
        <id>https://techwhale.in/how-to-secure-your-site-from-sql-injection-exploits-and-spamming-agents-using-nginx/</id>
        <media:content url="https://techwhale.in/media/posts/19/secure-nginx-server-2.png" medium="image" />
            <category term="Nginx"/>

        <updated>2021-07-20T01:07:56+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/19/secure-nginx-server-2.png" alt="nginx securing configuration for attacker using SQL injection, File Injection, SPAM and User Agents" />
                    Nginx is one of most popular web server that has so many features that even it may surprise you. One of best feature of Nginx that it has huge library of security policies that it makes your web-server absolute hacker-proof and you won't even need&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://techwhale.in/media/posts/19/secure-nginx-server-2.png" class="type:primaryImage" alt="nginx securing configuration for attacker using SQL injection, File Injection, SPAM and User Agents" /></p>
                <p>Nginx is one of most popular web server that has so many features that even it may surprise you. One of best feature of Nginx that it has huge library of security policies that it makes your web-server absolute hacker-proof and you won't even need another tool to protect your sites.</p>
<p>All your Nginx sites config can be import from another location so for clean code we are going to keep the security policies on a separate configuration file.</p>
<p>Lets call our file a <span style="color: #3598db;"><strong>security.conf</strong></span> under <strong>"<span style="color: #f1c40f;">/etc/nginx/</span>"</strong></p>
<p>There are variant of attacks can be done by attackers and famous attack types are listed down below,</p>
<ul>
<li>SQL Injection</li>
<li>File Injection</li>
<li>Spam</li>
<li>User Agents</li>
<li>Bandwidth Hogs and Hacking Tools</li>
</ul>
<p>Here's the <span style="color: #3598db;"><strong>security.conf</strong></span> file content as follows,</p>
<pre><code class="language-bash">$ cd /etc/nginx</code></pre>
<pre><code class="language-bash">$ nano security.conf </code></pre>
<p>Paste below code into the file and save the file using CTRL + X and ENTER.</p>
<pre data-trimmed="true"><code>##
# Protection against SQL injection
##
location ~* "(eval()"  { deny all; }
location ~* "(127.0.0.1)"  { deny all; }
location ~*</code> "([a-z0-9]{2000})" <code>{ deny all; }
location ~* "(javascript:)(.*)(;)"  { deny all; }
location ~* "(base64_encode)(.*)(()"  { deny all; }
location ~* "(GLOBALS|REQUEST)(=|[|%)"  { deny all; }
location ~* "(&lt;|%3C).*script.*(&gt;|%3)" { deny all; }
location ~ "(|...|../|~|`|&lt;|&gt;||)" { deny all; }
location ~* "(boot.ini|etc/passwd|self/environ)" { deny all; }
location ~* "(thumbs?(_editor|open)?|tim(thumb)?).php" { deny all; }
location ~* "('|")(.*)(drop|insert|md5|select|union)" { deny all; }
location ~* "(https?|ftp|php):/" { deny all; }
location ~* "(='|=%27|/'/?)." { deny all; }
location ~ "({0}|(/(|...|+++|"")" { deny all; }
location ~ "(~|`|&lt;|&gt;|:|;|%||s|{|}|[|]||)" { deny all; }
location ~* "/(=|$&amp;|_mm|(wp-)?config.|cgi-|etc/passwd|muieblack)" { deny all; }
location ~* "(&amp;pws=0|_vti_|(null)|{$itemURL}|echo(.*)kae|etc/passwd|eval(|self/environ)" { deny all; }
location ~* ".(aspx?|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf)$" { deny all; }
location ~* "/(^$|mobiquo|phpinfo|shell|sqlpatch|thumb|thumb_editor|thumbopen|timthumb|webshell).php" { deny all; }
##
# Block SQL injections Attacks
##
set $block_sql_injections 0; if ($query_string ~ "union.*select.*(") { set $block_sql_injections 1; }
if ($query_string ~ "union.*all.*select.*") { set $block_sql_injections 1; }
if ($query_string ~ "concat.*(") { set $block_sql_injections 1; }
if ($block_sql_injections = 1) { return 404; }
##
# Block File injections Attacks
##
set $block_file_injections 0;
if ($query_string ~ "[a-zA-Z0-9_]=http://") { set $block_file_injections 1; }
if ($query_string ~ "[a-zA-Z0-9_]=(..//?)+") { set $block_file_injections 1; }
if ($query_string ~ "[a-zA-Z0-9_]=/([a-z0-9_.]//?)+") { set $block_file_injections 1; }
if ($block_file_injections = 1) { return 404; }
##
# Block common bad exploits 
##
set $block_common_exploits 0;
if ($query_string ~ "(&lt;|%3C).*script.*(&gt;|%3E)") { set $block_common_exploits 1; }
if ($query_string ~ "GLOBALS(=|[|%[0-9A-Z]{0,2})") { set $block_common_exploits 1; }
if ($query_string ~ "_REQUEST(=|[|%[0-9A-Z]{0,2})") { set $block_common_exploits 1; }
if ($query_string ~ "proc/self/environ") { set $block_common_exploits 1; }
if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|%3D)") { set $block_common_exploits 1; }
if ($query_string ~ "base64_(en|de)code(.*)") { set $block_common_exploits 1; }
if ($block_common_exploits = 1) { return 404; }
##
# Block SPAM Keywords
##
set $block_spam 0;
if ($query_string ~ "b(ultram|unicauca|valium|viagra|vicodin|xanax|ypxaieo)b") { set $block_spam 1; }
if ($query_string ~ "b(erections|hoodia|huronriveracres|impotence|levitra|libido)b") { set $block_spam 1; }
if ($query_string ~ "b(ambien|bluespill|cialis|cocaine|ejaculation|erectile)b") { set $block_spam 1; }
if ($query_string ~ "b(lipitor|phentermin|pro[sz]ac|sandyauer|tramadol|troyhamby)b") { set $block_spam 1; }
if ($block_spam = 1) { return 404; }
##
# Block bad user agents
##
set $block_user_agents 0;
# Don't disable wget if you need it to run cron jobs!
#if ($http_user_agent ~ "Wget") { set $block_user_agents 1; }
# Disable Akeeba Remote Control 2.5 and earlier
if ($http_user_agent ~ "Indy Library") { set $block_user_agents 1; }
##
# Common bandwidth hoggers and hacking tools.
##
if ($http_user_agent ~ "libwww-perl") { set $block_user_agents 1; }
if ($http_user_agent ~ "GetRight") { set $block_user_agents 1; }
if ($http_user_agent ~ "GetWeb!") { set $block_user_agents 1; }
if ($http_user_agent ~ "Go!Zilla") { set $block_user_agents 1; }
if ($http_user_agent ~ "Download Demon") { set $block_user_agents 1; }
if ($http_user_agent ~ "Go-Ahead-Got-It") { set $block_user_agents 1; }
if ($http_user_agent ~ "TurnitinBot") { set $block_user_agents 1; }
if ($http_user_agent ~ "GrabNet") { set $block_user_agents 1; }
if ($block_user_agents = 1) { return 404; }
##
<br></code></pre>
<p>Now, Go to the site-available folder and add the below line to running site configuration file to secure the site,</p>
<p>For example, If you wish to protect the <a href="http://www.example.com.conf">www.example.com.conf</a> then edit the file and add before closing " } " </p>
<pre><code> include security.conf;</code></pre>
<p>Since, security.conf file exists at /etc/nginx folder root path so you don't have to put whole file path.</p>
<p>After these changes you will need to reload nginx configuration if everything is in order but before that verify Nginx configuration is working properly following this command,</p>
<pre><code>$ sudo nginx -t</code></pre>
<p>if output of above command shows this then it's mean all went OK...</p>
<pre data-trimmed="true"><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful</code></pre>
<p>Next step is to reload Nginx service to see the effect of configuration we made in the website.</p>
<pre><code>$ service nginx reload</code></pre>
<p>Voila!! You're SET!!</p>
            ]]>
        </content>
    </entry>
</feed>
