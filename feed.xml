<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>TechWhale</title>
    <link href="https://techwhale.in/feed.xml" rel="self" />
    <link href="https://techwhale.in" />
    <updated>2021-07-16T17:24:21+05:30</updated>
    <author>
        <name>Mayur Chavhan</name>
    </author>
    <id>https://techwhale.in</id>

    <entry>
        <title>Run Bash Script from PHP Page</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/run-bash-script-from-php-page/"/>
        <id>https://techwhale.in/run-bash-script-from-php-page/</id>

        <updated>2021-07-09T03:09:59+05:30</updated>
            <summary>
                <![CDATA[
                    I know it's seems risky to put out your whole server from PHP page. As a System Admin we knows any security holes can be very dangerous. Same time as we put things in risk we understand about risk and we always know some one&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>I know it's seems risky to put out your whole server from PHP page. As a System Admin we knows any security holes can be very dangerous.</p>
<p>Same time as we put things in risk we understand about risk and we always know some one is always step ahead to beat you but what doesn't kill you makes you stronger.</p>
<p>Ahh!! Enough about big words and lets get into if you want to know how you can access a Bash / Shell Script through a simple PHP code and securing it and it always fun to learn something everyday, Don't you think? I've learned bash script and my daily work depends on Linux, updating code and for some file monitoring, i wrote bunch of scripts but for that i have always sticks to my laptop so i want flexibility to do things from my phone as well but of course keeping in all security in mind.</p>
<p>First, We know root user should be kept away from these script as attacker will try to use any command injection or PHP vulnerability to gain access the server so we want to make sure, Whoever runs the bash script should not be a sudo user or web server user, It should be like who has no other system access permission and only able to execute bash script.</p>
<p>Second thing will be the php script where we are going to call bash script and put its output on the browser. In PHP there's a shell function that use for executing shell commands so that's perfect for us to execute bash script. so we are going to take some number input and we are going to see output of a bash script.</p>
<p>"Visudo" is a tool to edit user permissions but there are bunch of alternative tools in Linux if you are already familiar with it but for this example i have one CentOS server so lets move on.</p>
<p>Let's create a user called "ghost" which will have only permission to execute bash script in visudo and will have nologin permission</p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Automate Smart Plug to charge laptop using Webhook and Shell Script.</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/automate-smart-plug-to-charge-laptop-using-webhook-and-shell-script/"/>
        <id>https://techwhale.in/automate-smart-plug-to-charge-laptop-using-webhook-and-shell-script/</id>
            <category term="Ubuntu"/>
            <category term="Tutorials"/>
            <category term="Tricks and Hack"/>
            <category term="Automation"/>

        <updated>2021-07-16T17:24:21+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/15/Untitled-Design.jpg" alt="auto turn on and off laptop charger whenever battery gets low and full." />
                    In the world of automation, it little gives me heebie-jeebies to turn on and off charging when needed cause I read that always plugged in charging will damage your laptop battery but since I'm using a laptop it always draws power so keeping on charging&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/15/Untitled-Design.jpg" alt="auto turn on and off laptop charger whenever battery gets low and full." />
                <p>In the world of automation, it little gives me heebie-jeebies to turn on and off charging when needed cause I read that always plugged in charging will damage your laptop battery but since I'm using a laptop it always draws power so keeping on charging all the time is good or bad that is debate we don't want to get in, so here we go..</p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1fani75hnn">Get a SMART Switch</a></li>
<li><a href="#mcetoc_1fani75hno">Create an account on Sequematic</a></li>
<li><a href="#mcetoc_1fani75hnp">Write or Download Bash Script for an automation.</a></li>
<li><a href="#mcetoc_1fani75hnq">Cronjob for scheduled task run.</a></li>
</ul>
</div>
<p>ASUS Laptop where they have inbuilt a hardware charging limit to 80% so I thought that it must be important that's why ASUS has done it. But now, the office gave me another working laptop which is DELL, and sadly given the model doesn't have a hardware charging limit available and while it's plugged and charging at full, sometimes laptop gets hot and its bad if you live in tropical area like myself. 😩</p>
<p>Anyhow, You can see limiting the charging can increase your laptop's battery life a little better.</p>
<figure class="align-center"><img loading="lazy"  src="https://www.xda-developers.com/files/2020/09/depth-of-charge.jpg" data-is-external-image="true"  alt="The ASUS ZenFone 7 and ROG Phone 3 support passthrough charging"></figure>
<p>So here I have a problem so I thought, What if I can build a simple plug as a charger solution that can be turned automatically ON when charging gets low or reaches a set limit and it will get off when laptop charging reaches above 90%. and vice versa. So it a simple and fun to build this want to share this little project. 😎</p>
<h4 id="mcetoc_1fani75hnn">Get a SMART Switch</h4>
<p>The first step is to get a wireless plug so I found the cheapest smart plug available on Amazon. which advertised as works with Alexa so without any research I thought it must work with everything. Boy! I was wrong but eventually, it worked out just fine, just went to my super helpful everyone's favourite friend who helped me to fix this kind of issue as always and you all know by its name "google". 🤓</p>
<p>So this Solimo Smart Plug has this app called "Smart Life" to set up your device with your local centralized Wi-Fi router so you can talk to this "IOT" device from anywhere.</p>
<p>https://amzn.to/354UpQW</p>
<figure class="gmail-align-center align-center"><img loading="lazy"  src="https://images-na.ssl-images-amazon.com/images/I/51-Q1%2BQbCDL._SL1500_.jpg" data-is-external-image="true"  alt="Buy Amazon Brand - Solimo Smart Plug, 16A, Works with Alexa Online at Low  Prices in India - Amazon.in" width="465" height="465"></figure>
<p>So I register myself on the app and proceed with usage turning ON and OFF.  Also, This app has multi-functionality like I can set it up like a timer but sadly I have to set up the timer again and again like Microwave or create a scene where I can connect to other services like location, temperature, etc. which is all fine but it's useless for the purpose and what I want to achieve.</p>
<figure class="gmail-align-center align-center"><img loading="lazy"  src="https://www.ismartlife.me/images/ifttt@2x.png" data-is-external-image="true"  alt="Smart Life" width="392" height="436"></figure>
<h4 id="mcetoc_1fani75hno">Create an account on Sequematic</h4>
<p>If you are familiar with IFTTT it's simply "IF THIS THEN THAT" and my project is all about that so I wanted to find an option to turn the plug state from my laptop whenever charging is necessary. Then I found out that I can turn on the device through Webhook, where I change the plug state as I want and the webhook is available on IFTTT. Then I searched in IFTTT if there's an applet available for "Smart Life" and found some applets.</p>
<p>Great !! but then the PROBLEM occurred, where it showed my plug is unavailable in the applet settings so I search about it and found "Smart Life" broke ties with IFTTT so I search more than found out about another app called "Brilliant Smart" and really it's not that brilliant which turns out the same <br>Table of Contents<br>1. Get a SMART Switch<br>2. Create an account on Sequematic<br>3. Write or Download Bash Script for an automation.<br>4. Cronjob for scheduled task run.<br>Table of Contents<br>1. Get a SMART Switch<br>2. Create an account on Sequematic<br>3. Write or Download Bash Script for an automation.<br>4. Cronjob for scheduled task run.<br><br>failure as "Smart Life" then I went again for help on the internet and finally someone on Reddit said that there's another website which still can access "Smart Life" API and that site is "<a href="https://sequematic.com/" target="_blank" rel="noopener noreferrer">sequematic</a>" which finally done all the work for me.</p>
<p>Sequematic is really easy to set up so I created a step by creating a <a href="https://en.wikipedia.org/wiki/Webhook" target="_blank" rel="noopener noreferrer">webhook</a> where I gave the state name as a "turn_on" and set parameter "on" and another step I have added a switch to turn on whenever a POST request on the web-hook is being sent.</p>
<figure class="align-center"><img loading="lazy"  src="https://www.fanjoe.be/wp-content/uploads/2020/06/SEQUEmatic-06.png" data-is-external-image="true"  alt="Lier Smart Life / Tuya à IFTTT après le 26 mai 2020 | Fanjoe&amp;#39;s website..."></figure>
<p>In the above screenshot, you can see two sequences are created which are "socket-switch-on" and "socket-switch-off". In those sequences, two steps have been created.</p>
<p>Cool !! Now my plug can be turned on from the internet using just a POST request. It was so simple so what now? How can I turn it on whenever my laptop needs charging?</p>
<h4 id="mcetoc_1fani75hnp">Write or Download Bash Script for an automation.</h4>
<p>As always I wrote a very simple bash script [ Literally, It is very simple ], Check it out.</p>
<p> </p>
<div class="post__iframe"><iframe loading="lazy" style="border: none; width: 100%; min-height: 400px;" src="http://paste.stacksmile.com/embed/0UhnWtuzKr"></iframe></div>
<p>So if you have some Linux experience then you can understand from the shell script that I have created two if conditions and in the first condition, it compares the current battery percentage to start the plug when the battery reaches below or equal to 40%.</p>
<p>The second condition when the battery percentage reaches above or equal to 90% smart plug should automatically turn off.</p>
<p>In the shell script, the URL taken from sequematic can change the plug state when the condition is satisfied so you need to replace both of your <a href="https://ifttt.com">IFTTT</a> URLs from the sequematic link in the script.</p>
<h4 id="mcetoc_1fani75hnq">Cronjob for scheduled task run.</h4>
<p>This is a simple task given in a simple script but how can this script know every time this battery value changes?</p>
<p>As always, Linux has inbuilt tools like <a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener noreferrer">Cron</a>, Where, I have given a timer to run this script for every 5 min to check battery percentage and the script will check its logic.</p>
<p>Check out the below cronjob.</p>
<p> </p>
<pre>*/5 * * * * bash charge-battery-script.sh</pre>
<p>Voila!! It worked like magic.</p>
<hr>
<p>I always use Ubuntu as my daily driver OS so it was a piece of cake for me to automate this process and if you want to do this on your Windows then, I suggest you should turn on <a href="https://docs.microsoft.com/en-us/windows/wsl/about" target="_blank" rel="noopener noreferrer">WSL</a> Feature "Windows Subsystem for Linux" which of course enables Linux (Ubuntu) in your windows.</p>
<p>I can think of many usages from this automation somethings like turn on smart lights or change the color of smart light, smart socket or plug activity from your laptop.</p>
<p> </p>
<address> Hope you found this article interesting and let us know your opinion if you have a way to improve it.</address>
<blockquote>
<p>Thank you for reading!</p>
</blockquote>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install Portainer on Linux OS (Ubuntu, Debian, CentOS, Raspbian)</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-portainer-on-linux-os-ubuntu-debian-centos-raspbian/"/>
        <id>https://techwhale.in/how-to-install-portainer-on-linux-os-ubuntu-debian-centos-raspbian/</id>
            <category term="Tutorials"/>
            <category term="Docker"/>

        <updated>2021-06-07T02:38:55+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/10/Annotation-2020-06-25-082542-min-compressed.jpg" alt="Install Portainer" />
                     Portainer is docker web GUI application in where you can manage all your docker containers, Images and Volumes. It offers more features than just showing docker containers but you can even manage other docker nodes in one Portainer application.&nbsp; This guide will show you&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/10/Annotation-2020-06-25-082542-min-compressed.jpg" alt="Install Portainer" />
                
  <p id="overviewbr">
    <br>
  </p>

  <div class="post__toc">
    <h3>Index:</h3>
    <ul>
      <li><a href="#overviewbr">Overview:<br></a></li><li><a href="#installationbr">Installation.<br></a></li><li><a href="#acess-portainer-gui">Acess Portainer GUI</a></li><li><a href="#portainer-docker-processnbsp">Portainer Docker Process&nbsp;</a></li><li><a href="#update-portainer">Update Portainer</a></li>
    </ul>
  </div>
  

    <h2 id="overviewbr">
      Overview:<br>
    </h2>

  <p>
    Portainer is docker web GUI application in where you can manage all your docker containers, Images and Volumes. It offers more features than just showing docker containers but you can even manage other docker nodes in one Portainer application.&nbsp;<br>
  </p>

  <p>
    This guide will show you how easy is to install Portainer on any linux machines but before that you need to keep in mind that it needs some preparation before installing it.&nbsp;
  </p>

  <p>
    There are two method is to install Portainer but this guide  will show you the easiest one.
  </p>

    <h2 id="installationbr">
      Installation.<br>
    </h2>

  <p>
    The easiest method to install Portainer is of course is docker. To manage Docker, you need to deploy a docker container that contains Portainer binary and it access host docker process file to get all information what are docker containers with volumes are running.
  </p>

  <p>
    Check out our guide on how to install Docker on Linux so you can install Portainer.
  </p>

  <p>
    Now, Here we go, To Install Portainer here is this one line command that simply pulls up the Portainer image.
  </p>

  <p>
    <mark>sudo docker run --name portainer --restart=unless-stopped -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</mark>
  </p>

  <p>
    In this line of command, We specified docker name "portainer" and port in which Portainer Docker can be accessible to the public network. Which in this case is port "<strong>9000</strong>"
  </p>

  <ul>
    <li>"-v portainer_data" is host location where on the Docker Host the Portainer data.</li><li>"-v /var/run/docker.sock" is Docker process where portainer can access all information and control docker applications.</li><li>"portainer/portainer" is the official docker image which will get pull from official Docker repository.</li>
  </ul>

    <h2 id="acess-portainer-gui">
      Acess Portainer GUI
    </h2>

  <p>
    Now, Go to the browser and put Docker Host Server IP in there like this:
  </p>

  <p class="msg msg--success">
    http://[public-ip-address]:9000
  </p>

  <p>
    Replace your public ip address in above field and if you are running docker in your private machine then put your private IP like : <strong>192.168.0.10:9000,192.168.1.10:9000</strong> and so on..
  </p>

    <h2 id="portainer-docker-processnbsp">
      Portainer Docker Process&nbsp;
    </h2>

  <p>
    To check if portainer is running on your host machine simply run below command,
  </p>

  <p class="msg msg--success">
    sudo docker ps
  </p>

  <p>
    <strong>Command Output:</strong>
  </p>

  <p class="msg msg--highlight">
    docker ps<br>CONTAINER ID        IMAGE                                COMMAND             CREATED             STATUS              PORTS                                                               NAMES<br>9a83bdecfc56        portainer/portainer                  "/portainer"        2 hours ago         Up 2 hours          0.0.0.0:8000-8000/tcp, 0.0.0.0:9000-&gt;9000/tcp                      portainer
  </p>

  <p>
    Above output it shows that it exposes application to port 8000 and port 9000 but we use 9000 to access Portainer GUI.
  </p>

    <h2 id="update-portainer">
      Update Portainer
    </h2>

  <p>
    If you want to update Docker of Portainer then simple run these following commands,
  </p>

  <p class="msg msg--success">
    sudo docker pull portainer/portainer
  </p>

  <p>
    Above command will pull the latest image from official docker repository but it will not update the current running Portainer Docker so we will stop the running container so it will use updated image.
  </p>

  <p class="msg msg--success">
    sudo docker stop portainer&nbsp;
  </p>

  <p>
    Here we have stopped our Portainer container and if you seem to notice we don't have to use docker id to stop portainer container but we used "portainer" name and this happened because we gave our docker container a name called "portainer" so using a name for container is makes easy to manage like stop and run the container.
  </p>

  <p>
    Now, Delete old Portainer image to replace updated one.
  </p>

  <p class="msg msg--success">
    sudo docker rm portainer <br>
  </p>

  <p>
    Above command will delete only image but not the volume where we are keeping our Portainer data.
  </p>

  <p>
    Re-run the docker portainer command to launch portainer with updated image at same volume and exposed ports we have given before.
  </p>

  <p class="msg msg--success">
    sudo docker run --name portainer --restart=unless-stopped -d -p 8000:8000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer <br>
  </p>

  <p>
    Check again for docker process and if it's running then we are good to know. Hope this guide helped you.
  </p>

    <figure class="blockquote">
      <blockquote>Thank you for reading!</blockquote>
      <figcaption>Mayur Chavhan</figcaption>
    </figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install &quot;Nginx Proxy Manager&quot; on Raspberry Pi 4 [arm64]</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-nginx-proxy-manager-on-raspberry-pi-4-arm64/"/>
        <id>https://techwhale.in/how-to-install-nginx-proxy-manager-on-raspberry-pi-4-arm64/</id>
            <category term="Tutorials"/>
            <category term="TechWhale Guides"/>
            <category term="Docker"/>

        <updated>2021-06-07T00:07:34+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/8/imageedit_31_2317095391.jpg" alt="install-nginx-proxy-manager-raspberry-pi-4-b" />
                     Overview: In DevOps deployments Reverse Proxy is very common for port routing in backend applications. One of the popular is Traefik. Similar to Traefik there are HAproxy and Nginx. HAproxy which is known for Server Load Balancer but also can be used as a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/8/imageedit_31_2317095391.jpg" alt="install-nginx-proxy-manager-raspberry-pi-4-b" />
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1eal5n5a90">Overview:</a></li>
<li><a href="#mcetoc_1eal5nqjb5">Prerequisite:</a></li>
<li><a href="#mcetoc_1eal5oajo7">Step-1: Create folders.</a></li>
<li><a href="#mcetoc_1eal5q1579">Step-2: Create a file called "config.json"</a></li>
<li><a href="#mcetoc_1eal5qq5ba">Step-3: Create Docker-Compose File</a></li>
<li><a href="#mcetoc_1eal5rduib">Step-5: Run Docker-Compose File</a></li>
<li><a href="#mcetoc_1eal5s74vc">Step-6: Login to NPMan dashboard</a></li>
</ul>
</div>
<h2 id="mcetoc_1eal5n5a90">Overview:</h2>
<p><span style="font-weight: 400;">In DevOps deployments Reverse Proxy is very common for port routing in backend applications. One of the popular is <a href="https://containo.us/traefik/" target="_blank" rel="noopener noreferrer">Traefik</a>. Similar to Traefik there are HAproxy and Nginx.</span></p>
<p><span style="font-weight: 400;"><a href="http://www.haproxy.org/" target="_blank" rel="noopener noreferrer">HAproxy </a>which is known for Server Load Balancer but also can be used as a reverse proxy.</span></p>
<p><span style="font-weight: 400;">Nginx is the fastest web server that can also be used as a reverse proxy for backend applications. </span></p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://i.imgur.com/0hZKBEF.png" data-is-external-image="true"  alt="Reverse-Proxy" width="1137" height="286"></figure>
<p><span style="font-weight: 400;">All these three are excellent and popular reverse proxies used in servers but all these have one common problem: they need to write configuration files and it's not noobie server admin friendly since it involves years of experience to understand how exactly reverse proxy works. In Nginx and HAproxy, When you need to install SSL certificates for domai, It makes the configuration a little complicated and tiresome where in Traefik, It automatically handles domain certificates which makes Traefik awesome.</span></p>
<p><span style="font-weight: 400;">When i started learning Traefik it took few months for me to get a proper grip on its configuration and i learned on old Traefik version and when new Traefik versions came out then i have to read their documentation for new version changes plus then i have to added new changes to docker-compose file so my docker container can properly communicate with Traefik routing which adds big sigh for me. Don't get me wrong Traefik is still best for reverse proxy and if you can write Bash and Ansible Yaml scripts to automate with docker or backend applications then you're golden.</span><span style="font-weight: 400;">Where "Jamie Curnow" aka "</span><a href="https://jc21.com/"><span style="font-weight: 400;">jc21</span></a><span style="font-weight: 400;">" did all these three things in a single docker GUI application called "Nginx Proxy Manager '' In which you can easily bind backend applications without writing a single line of code. Which makes it easy enough for newbie server admin also for Developers who don’t need to learn reverse proxy complex configurations.</span></p>
<p>This installation can run same for any linux distros out there also docker image file also supports architecture for <a href="https://en.wikipedia.org/wiki/ARM_architecture" target="_blank" rel="noopener noreferrer">armhf and arm64</a> so it can easily run on Raspberry Pi 3B and 4B without any issue. I personally used Raspbian Lite for testing purpose and it works well.</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://i.imgur.com/urx8Zmg.png" data-is-external-image="true"  alt="Nnginx-Proxy-Manager" width="593" height="224">
<figcaption >Nginx-Proxy-Manager</figcaption>
</figure>
<h2 id="mcetoc_1eal5nqjb5"><strong>Prerequisite:</strong></h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Docker_(software)" target="_blank" rel="noopener noreferrer">Docker </a></li>
<li><strong>Docker-Compose</strong></li>
<li>[Optional] <strong><a href="https://www.portainer.io/" target="_blank" rel="noopener noreferrer">Portainer</a></strong></li>
</ol>
<h2 id="mcetoc_1eal5oajo7">Step-1: <strong>Create folders.</strong></h2>
<pre>sudo mkdir npman</pre>
<p>Inside NPman folder create these three folders [data, data/mysql and letsencrypt] or run below command,</p>
<pre>sudo mkdir -p npman/{data/mysql,letsencrypt}</pre>
<h2 id="mcetoc_1eal5q1579"><strong>Step-2: </strong><strong>Create a file called "config.json"</strong></h2>
<p id="mcetoc_1eal64sejd"><strong>paste below lines of code into it.</strong></p>
<pre>{
  "database": {
    "engine": "mysql",
    "host": "db",
    "name": "DBNAME",
    "user": "DBUSERNAME",
    "password": "DBPASSWORD",
    "port": 3306
  }</pre>
<h2 id="mcetoc_1eal5qq5ba">Step-3: Create Docker-Compose File</h2>
<p><strong>Now, Create a file called "docker-compose.yaml" and paste following code into it.</strong></p>
<p class="msg msg--info">Source: <a href="https://github.com/jeff89179">https://github.com/jeff89179</a> [ Thanks to him]</p>
<p> </p>
<pre data-enlighter-language="yaml">version: '2'
services:
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '81:81'
    volumes:
      - './config.json:/app/config/production.json'
      - './data:/data'
      - './letsencrypt:/etc/letsencrypt'
    depends_on:
      - db
  db:
    image: 'yobasystems/alpine-mariadb:latest'
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: npman
      MYSQL_DATABASE: npman
      MYSQL_USER: npman
      MYSQL_PASSWORD: password
    volumes:
      - './data/mysql:/var/lib/mysql'</pre>
<address class="msg msg--info"> Change MySQL password for production security purpose.</address>
<h2 id="mcetoc_1eal5rduib">Step-5: Run Docker-Compose File</h2>
<p> </p>
<p><strong>Run Docker-Compose command to download docker images and services,</strong></p>
<pre><strong>sudo docker-compose up -d</strong></pre>
<p>If you have Portainer running then go into the Portainer UI, And in the Stacks, add a new stack named "NPMan" and paste above docker-compose code and deploy it.</p>
<p>After deployment check if container health and port are showing like this..</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://i.imgur.com/TvK1WNK.png" data-is-external-image="true"  alt="Portainer-Nginx-Proxy-Manager" width="1901" height="328"></figure>
<h2 id="mcetoc_1eal5s74vc">Step-6: Login to NPMan dashboard</h2>
<address>Go to browser and replace &lt;&lt;docker-host-server-ip&gt;&gt; to docker host server ip like this,</address><address><br><a href="http://&lt;&lt;docker-host-serve-ip&gt;&gt;:81/login">http://&lt;&lt;docker-host-server-ip&gt;&gt;:81/login</a></address>
<p><img loading="lazy" src="https://i.imgur.com/4RE3JjY.png" data-is-external-image="true" ></p>
<p>If everything goes right then enter below default credentials,</p>
<p><strong>Credential for NPMan,</strong></p>
<p> </p>
<address class="msg msg--highlight  msg--success"><span style="text-decoration: underline;">Email</span>: <a href="mailto:admin@example.com">admin@example.com</a><br><br><span style="text-decoration: underline;">Password</span>: changeme</address>
<p>Visit our repository has all codes in this tutorial,</p>
<p class="msg msg--success msg--highlight  post__lead">https://github.com/mayur-chavhan/Nginx-Proxy-Manager</p>
<p> </p>
<p>Cheers!</p>
<blockquote>
<p>Thank you for reading</p>
</blockquote>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to setup user SSH Keys on Ubuntu 18.04</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-setup-user-ssh-keys-on-ubuntu-1804/"/>
        <id>https://techwhale.in/how-to-setup-user-ssh-keys-on-ubuntu-1804/</id>
            <category term="Ubuntu"/>
            <category term="Tutorials"/>
            <category term="TechWhale Guides"/>

        <updated>2020-06-30T17:22:43+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/6/image-0-compressed.jpg" alt="setup ssh keys on linux" />
                     Overview SSH [ Secure Shell ] is a famous encrypted protocol are widely becoming popular for communicate server access. For security purpose SSH provide lot of features and one of the famous is SSH Keys and for some its complicated and mostly biased to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/6/image-0-compressed.jpg" alt="setup ssh keys on linux" />
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1e91n65hn3">Overview</a></li>
<li><a href="#mcetoc_1e91n560l2">Step 1 : Generate a RSA Key Pair on your machine.</a></li>
<li><a href="#mcetoc_1e91n4u7m1">Step 2 : Copy SSH Public Key to remote server.</a></li>
</ul>
</div>
<h3 id="mcetoc_1e91n65hn3">Overview</h3>
<p><strong>SSH</strong> [ Secure Shell ] is a famous encrypted protocol are widely becoming popular for communicate server access. For security purpose SSH provide lot of features and one of the famous is SSH Keys and for some its complicated and mostly biased to use SSH password method.</p>
<p>Cloud Service providers like AWS and GCP are default using ssh key method before creating any Instance. So they can generate SSH keys for you and you can download it for you to access it remotely. But other server provider mostly generate and provide you SSH password.</p>
<p>SSH Password method is secured but password can be bruteforce by millions of bots are out there for cracking passwords and who knows if someone has supercomputer who can break your password within minutes but fear not cause SSH key to the rescue.</p>
<p>In reality, SSH Keys gives an easy and perfectly secure way to connect your remote server and one SSH key can be use for multiple users.</p>
<p>In this tutorial, How we can setup user ssh keys for Ubuntu 18.04 but it also applicable to any linux OS.</p>
<p>For this example we will take a remote server which enabled with SSH password authentication and applying SSH Key based authentication.</p>
<p>Before communication with remote server we have to do following steps.</p>
<h3 id="mcetoc_1e91n560l2">Step 1 : Generate a RSA Key Pair on your machine.</h3>
<table style="width: 693.156px; background-color: yellow;" border="7">
<tbody>
<tr>
<td class="align-center" style="width: 28px;"><span style="color: #843fa1;"><strong>$</strong></span></td>
<td style="width: 660.156px;"><address><span style="color: #843fa1;"><strong>ssh-keygen</strong></span></address></td>
</tr>
</tbody>
</table>
<p>Above command will generate 2048 bit RSA key pair consists of public and private keys. [ id_rsa and id_rsa.pub ] When you run ssh-keygen command it will ask for custom path to store your keys but for now default location is shown in below image.</p>
<p><img loading="lazy" src="https://i.imgur.com/NFHy3XT.png" data-is-external-image="true" ></p>
<p><strong> Press enter to select default path for RSA keys.</strong></p>
<p>Next, You should then see the following prompt:</p>
<p class="msg msg--highlight ">Enter passphrase (empty for no passphrase):</p>
<p>Additional security if you want to protect your SSH key using passphrase and empty for no passphrase so when you establish remote connection it will not ask for password everytime but its highly recommended that you should use passphrase and it gives more security and that's what we need.</p>
<p><img loading="lazy" src="https://i.imgur.com/DQska4v.png" data-is-external-image="true" ></p>
<p> Here's the result after creation of the key</p>
<p class="msg msg--success"><strong>Your identification has been saved in /your_home/.ssh/id_rsa.</strong><br><br><strong>Your public key has been saved in /your_home/.ssh/id_rsa.pub.</strong><br><br><strong>The key fingerprint is:</strong><br><strong>SHA256:tQX64BUmMF2BY1wUSTdeJEYQQUjFIf9wrUAz0RJlaU4 user@remote-server</strong><br><strong>The key's randomart image is:</strong><br><strong>+---[RSA 2048]----+</strong><br><strong>| o=+@^#Ooo |</strong><br><strong>| .BB+XE= |</strong><br><strong>| .o.*=+ . |</strong><br><strong>| . = B.. |</strong><br><strong>| S o o |</strong><br><strong>| |</strong><br><strong>| |</strong><br><strong>| |</strong><br><strong>| |</strong><br><strong>+----[SHA256]-----+</strong></p>
<p> </p>
<p> And at this path you'll find ssh keys as follows,</p>
<figure class="post__image"><img loading="lazy"  src="https://i.imgur.com/xhRQmXn.png" data-is-external-image="true"  alt="ssh-key-path" width="689" height="236"></figure>
<p> That's it, Now you've generated public and private ssh key on your machine. Next step is very easy and we have to copy our public key to remote server so we can SSH Key based authentication for SSH.</p>
<h3 id="mcetoc_1e91n4u7m1">Step 2 : Copy SSH Public Key to remote server.</h3>
<p>Now we have SSH public key which can authenticate remote machine from our host machine. There is fastest method to copy public key ID to remote host is simple tool called <strong>"ssh-copy-id" </strong></p>
<p>Simple yet very useful for copying public ssh key to remote host. Remote host must have enabled password authentication so once public key authentication is done. Later, We can disable password authentication so only gateway to access your server is SSH Key authentication.</p>
<p class="msg msg--highlight  msg--success"><strong>ssh-copy-id <a href="mailto:user@remote_server">user@remote_server</a></strong></p>
<p><strong>[OPTIONAL] - SSH Public Key for Custom Include Key Path</strong></p>
<p>If you have SSH Key available on different path you can use add include path parameter like this</p>
<p class="msg msg--highlight  msg--success"><strong>ssh-copy-id -i /ssh-key-folder/sshpub.key <a href="mailto:user@remote_server">user@remote_server</a></strong></p>
<p><strong>[OPTIONAL] - SSH Public Key for Custom Port</strong></p>
<p class="msg msg--highlight  msg--success"><strong>ssh-copy-id -p 5500 <a href="mailto:user@remote_server">user@remote_server</a></strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install docker and docker-compose on Ubuntu 18.04</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-docker-and-docker-compose-on-ubuntu-1804/"/>
        <id>https://techwhale.in/how-to-install-docker-and-docker-compose-on-ubuntu-1804/</id>
            <category term="Ubuntu"/>
            <category term="Tutorials"/>
            <category term="TechWhale Guides"/>
            <category term="Docker"/>

        <updated>2020-06-30T17:23:33+05:30</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/5/Webp.net-compress-image-2.jpg" alt="How to install docker on Ubuntu 18.04" />
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1e8pdg7j87">Overview</a></li>
<li><a href="#mcetoc_1e8pcknm71"> Update System</a></li>
<li><a href="#mcetoc_1e8pcknm73">Install Prerequisite Packages</a></li>
<li><a href="#mcetoc_1e8pcknm74">Add Docker Repositories</a></li>
<li><a href="#mcetoc_1e8pcknm75">Install Docker on Ubuntu 18.04</a></li>
<li><a href="#mcetoc_1e8pcknm76">Start Docker</a></li>
</ul>
</div>
<hr>
<h3 id="mcetoc_1e8pdg7j87">Overview</h3>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://techwhale.in/media/posts/5/docker-cloud-twitter-card.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-xs.png 300w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-sm.png 480w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-md.png 768w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-lg.png 1024w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-xl.png 1360w ,https://techwhale.in/media/posts/5/responsive/docker-cloud-twitter-card-2xl.png 1600w"  alt="Docker-Image" width="1586" height="600">
<figcaption >Docker Container Image</figcaption>
</figure>
<p> </p>
<p id="1cd8" class="dropcap" data-selectable-paragraph="">Docker is an application that makes it simple and easy to run application processes in a container, which are like virtual machines, but more small, more resource-friendly, and more dependent on the host OS Kernel.</p>
<p data-selectable-paragraph="">Docker-Compose in other hand is more advanced but fairly makes easy if you want to add multiple docker containers and services working together as a one using a single file. YML / YAML is language is used to create docker-compose file.</p>
<p data-selectable-paragraph="">You’ll learn how to install and use it on an existing installation of Ubuntu 18.04.</p>
<p class="msg msg--info" data-selectable-paragraph=""> Docker requires a 64-bit version of Ubuntu also a kernel version requires to greater than 3.10.X</p>
<p>Ubuntu 18.04 doesn't comes with Docker official repository so we are going to add it and install it. Let's start with process to install Docker and Docker-Compose.</p>
<h3 id="mcetoc_1e8pcknm71"> Update System</h3>
<p>First and most important is to update the system to keep all packages up to date so we don't run with outdated dependencies.</p>
<p>Run the following commands:</p>
<p class="msg msg--highlight "><strong>sudo apt update -qq -y</strong></p>
<h3 id="mcetoc_1e8pcknm73">Install Prerequisite Packages</h3>
<p>Once we have updated the system, we need to install some necessary packages before we are ready to install Docker. You can do this with the help of a single command:</p>
<p class="msg msg--highlight "><strong>sudo apt-get install curl apt-transport-https ca-certificates software-properties-common -qq -y </strong></p>
<h3 id="mcetoc_1e8pcknm74">Add Docker Repositories</h3>
<p>Following steps is to add Docker Key and Repository to officially supported method for the Docker installation.</p>
<p>Add the GPG key using following command in terminal:</p>
<p class="msg msg--highlight "><strong>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</strong></p>
<p>Next, Add the repository:</p>
<p class="msg msg--highlight "><strong>sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</strong></p>
<p>Update the repository information:</p>
<p class="msg msg--highlight "><strong>sudo apt update -y</strong></p>
<h3 id="mcetoc_1e8pcknm75">Install Docker on Ubuntu 18.04</h3>
<p>We are almost close. Use apt command to install Docker:</p>
<p class="msg msg--highlight "><strong>sudo apt install docker-ce -y</strong></p>
<h3 id="mcetoc_1e8pcknm76">Start Docker</h3>
<p>Once the installation is complete, Start the docker to enable the service:</p>
<p class="msg msg--highlight "><strong>sudo systemctl start docker</strong></p>
<p>Check the service using below command if docker service is active or not.</p>
<p class="msg msg--highlight "><strong>sudo systemctl status docker</strong></p>
<p><br>If all goes well then pat yourself in the back. Docker is installed on your Ubuntu machine. Now, Lets install Docker-Compose which is very easy now since we have docker installed on the machine.</p>
<div class="uncode_text_column">
<p>Check if you have curl installed in your machine.</p>
<p>If not then install curl using following command:</p>
<p class="msg msg--highlight "><strong>sudo apt install curl</strong></p>
</div>
<div class="heading-text el-text">
<h3 id="mcetoc_1e8pepps7a" class="h3"><span id="htoc-download-the-latest-docker-compose-version">Install Latest Docker Compose</span></h3>
</div>
<div class="clear"> </div>
<div class="uncode_text_column">
<ol>
<li>To download the latest version of Docker Compose, run below command:</li>
</ol>
<p class="msg msg--highlight "><strong>sudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</strong></p>
<p>At the time this article was written, Docker Compose 1.25.5 is the latest version but if you want to change latest version go to this release page.</p>
<p class="msg msg--info"><strong>https://github.com/docker/compose/releases</strong></p>
<br>
<p>2. Give executable permission to docker-compose at installed location:</p>
<p class="msg msg--highlight "><strong>sudo chmod +x /usr/local/bin/docker-compose</strong></p>
<p> That's it, Now you've successfully installed docker-compose on your Ubuntu 18.04, Easy isn't it? </p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Install Jitsi Meet on Ubuntu 18.04</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/install-jitsi-meet-on-ubuntu-1804/"/>
        <id>https://techwhale.in/install-jitsi-meet-on-ubuntu-1804/</id>
            <category term="Ubuntu"/>
            <category term="Tutorials"/>
            <category term="TechWhale Guides"/>

        <updated>2020-06-25T22:18:06+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/4/image-8-compressed.jpg" alt="" />
                    Provisioning New Ubuntu 18.04 x64 VPS Create a new sudo user. A domain jitsi.server.com being pointed to the server instance mentioned above. Update server packages: For security and performance purposes, its necessary to update the Ubuntu 18.04 LTS system to the latest status: sudo apt&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/4/image-8-compressed.jpg" alt="" />
                <h3 id="Prerequisites">Provisioning</h3>
<ul>
<li>New Ubuntu 18.04 x64 VPS</li>
<li>Create a new sudo user.</li>
<li>A domain <code>jitsi.server.com</code> being pointed to the server instance mentioned above.</li>
</ul>
<h3 id="Step_4__Update_the_system">Update server packages:</h3>
<p>For security and performance purposes, its necessary to update the Ubuntu 18.04 LTS system to the latest status:</p>
<p class="msg msg--success"><strong>sudo apt update sudo apt upgrade -y &amp;&amp; sudo shutdown -r now</strong></p>
<p>You need to properly setup a hostname and an FQDN for the machine before you can enable HTTPS security by deploying a Let's Encrypt HTTPS certificate.</p>
<p>The following commands will setup a hostname / FQDN:</p>
<p class="msg msg--success"><strong>sudo hostnamectl set-hostname jitsimeet</strong></p>
<p class="msg msg--success"><strong>sudo sed -i 's/^127.0.1.1.*$/127.0.1.1 jitsi.server.com jitsimeet/g' /etc/hosts</strong></p>
<p>Check if hostname is set properly.</p>
<p class="msg msg--highlight "><strong>hostname</strong></p>
<p class="msg msg--highlight "><strong>hostname -f </strong></p>
<p class="msg msg--success"><br><strong>wget -qO - <a href="https://download.jitsi.org/jitsi-key.gpg.key">https://download.jitsi.org/jitsi-key.gpg.key</a> | sudo apt-key add -</strong></p>
<p class="msg msg--success"><br><strong>apt-get update</strong></p>
<p id="pre" class="msg msg--success"><strong>echo 'deb <a href="https://download.jitsi.org">https://download.jitsi.org</a> stable/' &gt;&gt; /etc/apt/sources.list.d/jitsi-stable.list</strong></p>
<p id="pre" class="msg msg--success"><strong>wget -qO - <a href="https://download.jitsi.org/jitsi-key.gpg.key">https://download.jitsi.org/jitsi-key.gpg.key</a> | sudo apt-key add -</strong></p>
<p id="pre" class="msg msg--success"><strong>apt-get install apt-transport-https</strong></p>
<p id="pre" class="msg msg--success"><strong>apt-get update</strong></p>
<p class="msg msg--success"><strong>apt-get -y install jitsi-meet</strong></p>
<p class="msg msg--success"><strong>sudo /usr/share/jitsi-meet/scripts/install-letsencrypt-cert.sh</strong></p>
<h3 id="Step_3__Tweak_firewall_rules_for_running_Jitsi_Meet">Firewall rules for Jitsi Meet</h3>
<p>As required we need to allow <code>OpenSSH</code>, <code>HTTP</code>, and <code>HTTPS</code> traffic, along with inbound UDP traffic on port range of <code>5222-5281</code> and <code>10000</code> through port <code>20000</code>:</p>
<p class="post__lead msg msg--highlight "><strong>sudo ufw allow OpenSSH</strong><br><strong>sudo ufw allow http</strong><br><strong>sudo ufw allow https</strong><br><strong>sudo ufw allow in 4443/tcp</strong><br><strong>sudo ufw allow in 5222/tcp</strong><br><strong>sudo ufw allow in 5269/tcp</strong><br><strong>sudo ufw allow in 5280:5281/tcp </strong><br><strong>sudo ufw allow in 10000:20000/udp</strong><br><br><strong>sudo ufw enable</strong></p>
<p> </p>
<p>During the process, input your email <code>admin@gmail.com</code> as prompted and then press <kbd>ENTER</kbd>. This script will automatically handle any tasks related to the Let's Encrypt SSL certificate.</p>
<p>Finally, point your favorite web browser to <code>http://jitsimeet.server.com</code> or <code>https://jitsimeet.server.com</code> to access your Jitsi Meet Video conferencing service. Feel free to explore the interface. Clicking the <code>GO</code> button will immediately create a Video conferencing channel for you.</p>
<p><br><code class=" language-bash"></code></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Guide : Git workflow for Developers</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/git-workflow-for-developers-and-devops/"/>
        <id>https://techwhale.in/git-workflow-for-developers-and-devops/</id>
            <category term="Tutorials"/>
            <category term="TechWhale Guides"/>

        <updated>2020-06-30T17:24:14+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/3/l2mvWRp1.png" alt="git-workflow-for-developers" />
                     Git is a top distributed version control system and Nowadays all programmers and developers are dependent on its workflow. Manage to set up a proper Git code workflow is essential for projects that involve group collaboration. Follow procedures to keep working copy of your&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/3/l2mvWRp1.png" alt="git-workflow-for-developers" />
                <p><span style="font-weight: 400;"> </span></p>
<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1e8i9uj8q3">Overview:</a></li>
<li><a href="#mcetoc_1e8i9m22q1">Why Git or Github?</a></li>
<li><a href="#c217">The Workflow Cheat Sheet</a></li>
</ul>
</div>
<h3 id="mcetoc_1e8i9uj8q3">Overview:</h3>
<p><span style="font-weight: 400;">Git is a top distributed version control system and Nowadays all programmers and developers are dependent on its workflow. Manage to set up a proper Git code workflow is essential for projects that involve group collaboration. Follow procedures to keep working copy of your project through identifying code problems and evolving into a big scale project.</span></p>
<p><span style="font-weight: 400;">One of the biggest git repository hosting is Github. </span><a href="https://git-scm.com/"><span style="font-weight: 400;">Git</span></a><span style="font-weight: 400;"> is a distributed version control system accessible through a CLI. Git is </span><a href="https://en.wikipedia.org/wiki/Free_and_open-source_software"><span style="font-weight: 400;">free and open-source software</span></a><span style="font-weight: 400;"> distributed under the terms of the </span><a href="https://en.wikipedia.org/wiki/GNU_General_Public_License"><span style="font-weight: 400;">GNU General Public License</span></a><span style="font-weight: 400;"> version 2.</span></p>
<p><span style="font-weight: 400;"> Using Github, I can share all of my coding projects with the world. Github has a plethora of unique features that enhance the git experience and make collaborative coding simple. I am far from a Git or Github expert, but this is a short guide to get you started with Git on Github:</span></p>
<h3 id="mcetoc_1e8i9m22q1"><strong>Why Git or Github?</strong></h3>
<p>It is the best and most popular system available for managing and tracking any code changes also it allows other developers to collaborate on projects at any scale.</p>
<p>In simple words, GitHub is a “hub” for everyone who is working with the Git version control system. It provides a variety of features to make developers' jobs much easier and it's open for the public so anyone can share their code to the development community and can do better projects or make existing code repositories much better by power of collaboration.</p>
<p>System like Git become a lot more obvious once you make sense of how they truly work. The objective of this guide is to reveal some insight into how Git functions in the engine. We're going to investigate a portion of Git's center ideas including its fundamental item stockpiling, how submits work, how branches and labels work, and we'll take a gander at the various types of converging in Git including the much-dreaded rebase. Ideally toward the finish, all things considered, you'll have a strong comprehension of these ideas and will have the option to utilize a portion of Git's further developed highlights with certainty. <br><br>It's important now that this guide isn't proposed to be a's first experience with Git. This guide was composed for individuals who as of now use Git, however might want to more readily comprehend it by taking a look in the engine, and get familiar with a couple of slick deceives en route. All things considered, we should start.</p>
<p class="msg msg--info"><span style="font-weight: 400;">This is a short guide to get you started with Git on Github:</span></p>
<table>
<tbody>
<tr>
<td class="align-center">
<p><strong>Repository </strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Commonly called the “repo,” this is where all of the updated versions (and the primary version) of a project are stored. This is your staging ground for the project. Each repo has a unique URL for easy access.</span></p>
</td>
</tr>
<tr>
<td class="align-center">
<p><strong>Forking </strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Unless developers pay for a private repository, their project can be viewed by all other members of the GitHub community. If these members feel they could make a worthy contribution, then they can create a new project (repository) from yours. This is called “forking a repo.”</span></p>
</td>
</tr>
<tr>
<td class="align-center">
<p><strong>Pull Request</strong></p>
</td>
<td>
<p><span style="font-weight: 400;">After forking a repo and making new changes to existing code, GitHub users can invite the developers of the original repository to view the changes.</span></p>
</td>
</tr>
<tr>
<td class="align-center">
<p><strong>Merging </strong></p>
</td>
<td>
<p><span style="font-weight: 400;">If you like the changes someone made after forking your repository, you can opt to accept those changes and merge them with your existing repository.</span></p>
</td>
</tr>
<tr>
<td class="align-center">
<p><strong>Changelogs </strong></p>
</td>
<td>
<p><span style="font-weight: 400;">This lets developers working on a single project see all changes, who made them, and when.</span></p>
</td>
</tr>
</tbody>
</table>
<p><span style="font-weight: 400;">Git workflow is the mixer of steps that we have to follow before starting the development cycle means how developers pull, push, commit, clone and manage code.</span></p>
<h3 id="c217" class="hp hq ds ar aq hr du lr dw ls hu lt hw lu hy lv ia">The Workflow Cheat Sheet</h3>
<p class="msg msg--success"><span id="2f9d" data-selectable-paragraph="">--------------------------------------------<br>Managing your Local Repo<br>--------------------------------------------<br>NOTE: If you need to hard reset your local repo to match <br>the remote master use the following commands:<br>$ git fetch origin<br>$ git reset --hard origin/master<br><br>Undo the act of committing, leaving everything else intact:<br>$ git reset --soft HEAD^:<br><br>Undo the act of committing and everything you'd staged, <br>but leave the work tree (your files intact):<br>$ git reset HEAD^<br><br>Completely undo it, throwing away all uncommitted changes,<br>resetting everything to the previous commit:<br>$ git reset --hard HEAD^<br><br>-------------------------------------------- <br>BEGIN WORKFLOW<br>-------------------------------------------- <br>Clone the Repo to local machine:<br>$ git clone https://github.com/user_name/repo_name.git<br><br>Make sure the local master is up-to-date:<br>$ git pull origin master<br><br>Create new branch:<br>$ git banch branch_name<br><br>Move to branch:<br>$ git checkout branch_name<br><br>Navigate file structure as needed:<br>$ ls <br>$ cd folder_name<br><br>Add the files to the branch:<br>$ git add .<br><br>Verify file: <br>$ git status<br><br>Commit the files:<br>$ git commit -m "comment"<br><br>Add branch and files to the Remote Repo:<br>$ git push -u origin branch_name<br><br>Go to the github website to manage pull request and merge. <br><br>Switch back to local master so you can delete the local branch:<br>$ git checkout master<br><br>Delete local branch: <br>$ git branch -d branch_name<br>OR <br>$ git branch -D branch_name<br><br>If you don't want to go to the website, you can merge your branch <br>to the master locally and push the new master to the remote repo:<br><br>Switch back to master branch:<br>$ git checkout master<br><br>Merge the branch with the local master:<br>$ git merge branch_name -m "comment"<br><br>Push the local master to the remote master:<br>$ git push origin master<br><br>Delete local branch: <br>$ git branch -d branch_name<br>OR <br>$ git branch -D branch_name</span></p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install Ansible on Ubuntu 18.04 / Debian 10 Buster</title>
        <author>
            <name>Mayur Chavhan</name>
        </author>
        <link href="https://techwhale.in/how-to-install-ansible-on-ubuntu-1804-debian-10-buster/"/>
        <id>https://techwhale.in/how-to-install-ansible-on-ubuntu-1804-debian-10-buster/</id>
            <category term="Ubuntu"/>
            <category term="DevOps"/>
            <category term="Debian"/>
            <category term="Automation"/>
            <category term="Ansible"/>

        <updated>2020-06-30T17:46:44+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://techwhale.in/media/posts/2/Webp.net-compress-image-3.jpg" alt="install ansible on ubuntu 18 and debian 10" />
                     What is Ansible? Ansible is an open source DevOps automation tool that solves server provisioning in installing tools, configuration, deployment and provisioning. It leverages SSH to communicate between servers. It uses the playbook which states every steps of automation jobs, and playbook uses a simple language called&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://techwhale.in/media/posts/2/Webp.net-compress-image-3.jpg" alt="install ansible on ubuntu 18 and debian 10" />
                <div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#mcetoc_1e887o48e3">What is Ansible?</a></li>
<li><a href="#mcetoc_1e883n8jk0">Prerequisites :</a></li>
<li><a href="#step-1-—-installing-ansible">Before start...</a></li>
<li><a href="#mcetoc_1e8s96ber2">Add official Ansible repository</a></li>
<li><a href="#mcetoc_1e8s976in4">Update Packages</a></li>
<li><a href="#step-1-—-installing-ansible">Install Ansible </a></li>
</ul>
</div>
<h3 id="mcetoc_1e887o48e3">What is Ansible?</h3>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://techwhale.in/media/posts/2/imageedit_16_2728091063.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-xs.png 300w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-sm.png 480w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-md.png 768w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-lg.png 1024w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-xl.png 1360w ,https://techwhale.in/media/posts/2/responsive/imageedit_16_2728091063-2xl.png 1600w"  alt="ansible" width="359" height="284"></figure>
<p id="mcetoc_1e8hhbh66b">Ansible is an open source DevOps automation tool that solves server provisioning in installing tools, configuration, deployment and provisioning. It leverages SSH to communicate between servers. It uses the playbook which states every steps of automation jobs, and playbook uses a simple language called "YAML".</p>
<hr>
<h3 id="mcetoc_1e883n8jk0">Prerequisites :</h3>
<p class="msg msg--info"><strong>Operating System</strong>: Ubuntu 18.04 / Debian 10 Buster</p>
<p class="msg msg--info"><strong>SSH Access</strong> :  You need remote server SSH access available with Password or Key Access so our ansible server can communicate remotely.</p>
<p class="msg msg--info"><strong>Python</strong>: python version 2.7 or above it should be installed.</p>
<p> </p>
<h3 id="step-1-—-installing-ansible">Before start...</h3>
<p>The use of Ansible as a capability of managing your server infrastructure, you want to install the Ansible software program on the machine that will serve as the Ansible manage node.</p>
<p>Ansible’s only real dependency is Python. Once Python is installed, the simplest way to get Ansible running is to use pip, a simple package manager for Python. Don't worry most of the linux distro comes with default Python 2.7 and CentOS 8 comes with built in Python version 3.7.</p>
<p>The easiest way to install Ansible on a Debian or Ubuntu system is to use the official apt package.</p>
<h3 id="mcetoc_1e8s96ber2">Add official Ansible repository</h3>
<p><br>From your ansible host node, run the following command to consist of the authentic project’s PPA and it is needed else you'll end up with older version of Ansible :</p>
<p id="mcetoc_1e8hh88s18" class="msg msg--success"><strong>sudo apt-add-repository ppa:ansible/ansible</strong></p>
<p class="msg msg--info">Press ENTER to proceed with PPA addition.</p>
<h3 id="mcetoc_1e8s976in4">Update Packages</h3>
<p>Newly added PPA needs to be updated :</p>
<p id="mcetoc_1e8hh6keo7" class="msg msg--success"><strong>sudo apt update</strong></p>
<p class="post__lead">If an error like <strong>“sudo: add-apt-repository: command not found”</strong>, then you’re missing the <strong><code>python-software-properties</code></strong> package. Install it with the following command:</p>
<p id="mcetoc_1e8hh61i85" class="msg msg--highlight  msg--success post__lead"><strong>sudo apt-get install python-software-properties</strong></p>
<h3 id="step-1-—-installing-ansible">Install Ansible </h3>
<p>After update is done, you can easily install Ansible using simple install command,</p>
<p id="mcetoc_1e8hh5qdi4" class="msg msg--success"><strong>sudo apt-get install ansible -y</strong></p>
<p>Our installation process has been done. Now let’s check ansible version. </p>
<p id="mcetoc_1e8hhi53oc" class="msg msg--success"><strong>sudo ansible --version</strong></p>
<figure class="post__image post__image--center"><a href="https://i.imgur.com/YSu2ISW.png"><img loading="lazy"  src="https://i.imgur.com/YSu2ISW.png" data-is-external-image="true"  alt="" width="1283" height="172"></figure></a></p>
<p>That's all folks. Happy Hacking!!</p>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
